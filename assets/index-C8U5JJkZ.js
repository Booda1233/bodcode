import{j as e,L as S,N as z,r as u,u as J,R as O,a as Q,b as F,H as me,c as ge,d as E,e as he}from"./react-BVhfhNRc.js";import{G as te}from"./vendor-B4_pKtyg.js";(function(){const r=document.createElement("link").relList;if(r&&r.supports&&r.supports("modulepreload"))return;for(const o of document.querySelectorAll('link[rel="modulepreload"]'))s(o);new MutationObserver(o=>{for(const n of o)if(n.type==="childList")for(const l of n.addedNodes)l.tagName==="LINK"&&l.rel==="modulepreload"&&s(l)}).observe(document,{childList:!0,subtree:!0});function i(o){const n={};return o.integrity&&(n.integrity=o.integrity),o.referrerPolicy&&(n.referrerPolicy=o.referrerPolicy),o.crossOrigin==="use-credentials"?n.credentials="include":o.crossOrigin==="anonymous"?n.credentials="omit":n.credentials="same-origin",n}function s(o){if(o.ep)return;o.ep=!0;const n=i(o);fetch(o.href,n)}})();const N="Bod Code",ye="1.0.0",d={HOME:"/",LEARNING_PLAN:"/learning-plan",CURRICULUM:"/curriculum",LEVEL_DETAILS:"/curriculum/:levelSlug",LESSON_DETAILS:"/curriculum/:levelSlug/:lessonSlug",LESSON_QUIZ:"/curriculum/:levelSlug/:lessonSlug/quiz",CHAT_AI:"/chat-ai",PLAYGROUND:"/playground"},D=({className:t,style:r})=>e.jsxs("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24",fill:"none",stroke:"currentColor",strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round",className:t,style:r,children:[e.jsx("polyline",{points:"16 18 22 12 16 6"}),e.jsx("polyline",{points:"8 6 2 12 8 18"}),e.jsx("line",{x1:"10",y1:"4",x2:"14",y2:"20"})]}),_e=({className:t="w-6 h-6"})=>e.jsx("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",strokeWidth:1.5,stroke:"currentColor",className:t,children:e.jsx("path",{strokeLinecap:"round",strokeLinejoin:"round",d:"M8.625 12a.375.375 0 1 1-.75 0 .375.375 0 0 1 .75 0Zm0 0H8.25m4.125 0a.375.375 0 1 1-.75 0 .375.375 0 0 1 .75 0Zm0 0H12m4.125 0a.375.375 0 1 1-.75 0 .375.375 0 0 1 .75 0Zm0 0h-.375M21 12c0 4.556-3.86 8.25-8.625 8.25S3.75 16.556 3.75 12D3.75 7.444 7.61 3.75 12.375 3.75S21 7.444 21 12Z"})}),fe=({className:t="w-6 h-6"})=>e.jsxs("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",strokeWidth:1.5,stroke:"currentColor",className:t,children:[e.jsx("path",{strokeLinecap:"round",strokeLinejoin:"round",d:"M5.25 7.5A2.25 2.25 0 0 1 7.5 5.25h9a2.25 2.25 0 0 1 2.25 2.25v9a2.25 2.25 0 0 1-2.25 2.25h-9a2.25 2.25 0 0 1-2.25-2.25v-9Z"}),e.jsx("path",{strokeLinecap:"round",strokeLinejoin:"round",d:"m8.25 9.75 2.25 2.25-2.25 2.25"}),e.jsx("path",{strokeLinecap:"round",strokeLinejoin:"round",d:"M12.75 15h3"})]}),be=()=>{const t=({isActive:r})=>`px-3 py-2 sm:px-4 rounded-md text-sm font-medium transition-all duration-300 ease-in-out 
     focus:outline-none focus:ring-2 focus:ring-sky-400 focus:ring-opacity-75
     flex items-center space-x-1 rtl:space-x-reverse
     ${r?"bg-sky-600 text-white shadow-lg scale-105":"text-gray-300 hover:bg-gray-700/80 hover:text-sky-300 hover:scale-105"}`;return e.jsx("header",{className:"bg-gray-800 shadow-lg sticky top-0 z-40",children:e.jsx("div",{className:"container mx-auto px-4 sm:px-6 lg:px-8",children:e.jsxs("div",{className:"flex items-center justify-between h-16",children:[e.jsxs(S,{to:d.HOME,className:"flex items-center space-x-2 rtl:space-x-reverse group",children:[e.jsx(D,{className:"h-8 w-8 text-sky-400 group-hover:text-sky-300 transition-colors duration-300 transform group-hover:rotate-[-5deg]"}),e.jsx("span",{className:"text-2xl font-bold text-sky-400 group-hover:text-sky-300 transition-colors duration-300",children:N})]}),e.jsxs("nav",{className:"flex space-x-1 sm:space-x-2 rtl:space-x-reverse",children:[e.jsx(z,{to:d.HOME,className:t,end:!0,children:"الرئيسية"}),e.jsx(z,{to:d.LEARNING_PLAN,className:t,children:"خطة التعلم"}),e.jsx(z,{to:d.CURRICULUM,className:t,children:"الدروس"}),e.jsxs(z,{to:d.PLAYGROUND,className:t,children:[e.jsx(fe,{className:"w-4 h-4 sm:w-5 sm:h-5 mr-1 sm:mr-0 rtl:ml-1 rtl:mr-0"}),e.jsx("span",{className:"hidden sm:inline",children:"ساحة الأكواد"})]}),e.jsxs(z,{to:d.CHAT_AI,className:t,children:[e.jsx(_e,{className:"w-4 h-4 sm:w-5 sm:h-5 mr-1 sm:mr-0 rtl:ml-1 rtl:mr-0"}),e.jsx("span",{className:"hidden sm:inline",children:"دردشة AI"})]})]})]})})})},we=()=>e.jsx("footer",{className:"bg-gray-800/30 text-gray-400 py-8 mt-auto border-t border-gray-700/30",children:e.jsxs("div",{className:"container mx-auto px-4 sm:px-6 lg:px-8 text-center",children:[e.jsxs("p",{className:"text-sm",children:["© ",new Date().getFullYear()," ",N,". جميع الحقوق محفوظة."]}),e.jsxs("p",{className:"mt-1 text-xs",children:["مصمم بحب لتعليم البرمجة ",e.jsx("span",{className:"text-sky-500 animate-pulse text-sm",children:"❤️"})]})]})}),V=({className:t="w-6 h-6"})=>e.jsx("svg",{className:t,viewBox:"0 0 24 24",fill:"currentColor",xmlns:"http://www.w3.org/2000/svg",children:e.jsx("path",{d:"M14.33 21.79H9.92C5.33 21.79 3 19.51 3 15V9.22C3 4.71 5.33 2.43 9.92 2.43H12.1V6.7H9.92C7.62 6.7 6.48 7.82 6.48 10.07V14.15C6.48 16.4 7.62 17.52 9.92 17.52H12.1V21.79H14.33V17.52H16.54C18.84 17.52 20 16.4 20 14.15V11.61H16.54V14.15C16.54 14.97 16.07 15.42 15.25 15.42C14.42 15.42 13.98 14.97 13.98 14.15V10.07C13.98 7.82 15.11 6.7 17.41 6.7H19.62V2.43H17.41C12.82 2.43 10.49 4.71 10.49 9.22V12.37H14.33C15.16 12.37 15.6 11.92 15.6 11.1V8.8H19.62V11.1C19.62 13.35 18.49 14.47 16.19 14.47H13.98L14.33 21.79Z"})}),ne=({className:t})=>e.jsx("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24",fill:"currentColor",className:t,children:e.jsx("path",{fillRule:"evenodd",d:"M2.25 12c0-5.385 4.365-9.75 9.75-9.75s9.75 4.365 9.75 9.75-4.365 9.75-9.75 9.75S2.25 17.385 2.25 12Zm13.36-1.814a.75.75 0 1 0-1.06-1.06l-3.25 3.25-1.5-1.5a.75.75 0 0 0-1.06 1.06l2 2a.75.75 0 0 0 1.06 0l3.75-3.75Z",clipRule:"evenodd"})}),re=[{id:"l1-lesson-0",slug:"what-is-programming",title:"ما هي البرمجة؟",description:"فهم ماهية البرمجة وكيف تتحدث مع الكمبيوتر.",content:[{type:"heading",text:"ما هي البرمجة؟ لغة التخاطب مع الكمبيوتر!"},{type:"paragraph",text:'تخيل إنك عايز تدي أوامر لجهاز الكمبيوتر عشان يعمل حاجة معينة، زي إنه يحسبلك حسبة، أو يعرضلك صورة، أو حتى يلعب معاك لعبة. الكمبيوتر مبيفهمش كلامنا العادي (زي العربي أو الإنجليزي)، لكنه بيفهم لغات تانية معمولة مخصوص عشانه اسمها "لغات البرمجة".'},{type:"paragraph",text:'البرمجة ببساطة هي عملية كتابة مجموعة من التعليمات والأوامر (بنسميها "كود") بلغة برمجة معينة، عشان الكمبيوتر ينفذها خطوة بخطوة ويأدي المهمة المطلوبة.'},{type:"subheading",text:"ليه البرمجة مهمة؟"},{type:"list",text:"البرمجة بتدخل في كل حاجة حوالينا تقريبًا:",items:["المواقع اللي بتشوفها على الإنترنت (زي فيسبوك وجوجل).","التطبيقات اللي على موبايلك (زي واتساب وإنستجرام).","الألعاب اللي بتلعبها.","البرامج اللي بتستخدمها على الكمبيوتر (زي وورد وفوتوشوب).","حتى الأجهزة الذكية في بيتك (زي التلاجة الذكية أو التكييف الذكي)."]},{type:"paragraph",text:"لما تتعلم برمجة، إنت مش بس بتتعلم تكتب أكواد، لأ، إنت بتتعلم إزاي تفكر بطريقة منطقية وتحل المشاكل خطوة بخطوة. دي مهارة مفيدة جدًا في أي مجال في حياتك."},{type:"subheading",text:"إيه هو البرنامج (Software)?"},{type:"paragraph",text:"البرنامج هو مجموعة الأكواد والتعليمات اللي المبرمج بيكتبها عشان يخلي الكمبيوتر يعمل وظيفة معينة. يعني الكود هو الوصفة، والبرنامج هو الطبخة الجاهزة اللي الكمبيوتر بيقدمهالك."},{type:"code",language:"text",text:`مثال بسيط جداً لفكرة أمر برمجي (ليس بلغة بايثون، مجرد توضيح):

لو المستخدم ضغط "زر أحمر" اعمل "صوت إنذار"
لو المستخدم كتب "اسمي" اطبع "أهلاً يا [اسمي]"`},{type:"paragraph",text:'في الدروس الجاية، هنبدأ نتعلم واحدة من أسهل وأقوى لغات البرمجة وهي "بايثون"، وهنشوف إزاي ندي أوامر للكمبيوتر عشان يعمل حاجات ممتعة ومفيدة!'}],quiz:[{id:"q_prog_1",text:"ما هو التعريف الأبسط للبرمجة؟",options:["التحدث مع الكمبيوتر بلغة البشر","كتابة تعليمات للكمبيوتر بلغة يفهمها لينفذ مهمة","تصميم شكل المواقع والتطبيقات","إصلاح مشاكل الكمبيوتر (الهاردوير)"],correctAnswerIndex:1,explanation:"البرمجة هي إعطاء أوامر للكمبيوتر عبر كود مكتوب بلغة برمجة."},{id:"q_prog_2",text:"ما هو المصطلح الذي يطلق على التعليمات والأوامر المكتوبة بلغة برمجة؟",options:["سوفتوير","هاردوير","كود","نظام تشغيل"],correctAnswerIndex:2,explanation:"الكود هو مجموعة الأوامر التي يكتبها المبرمج."},{id:"q_prog_3",text:"أي من التالي يعتبر مثالاً على نتيجة للبرمجة؟",options:["شاشة الكمبيوتر","تطبيق واتساب على موبايلك","لوحة المفاتيح (الكيبورد)","سلك الكهرباء للكمبيوتر"],correctAnswerIndex:1,explanation:"تطبيقات الموبايل هي برامج تم إنشاؤها عن طريق البرمجة."},{id:"q_prog_4",text:"هل يفهم الكمبيوتر اللغة العربية أو الإنجليزية مباشرة؟",options:["نعم، يفهم كل اللغات","لا، يفهم لغات البرمجة فقط","يفهم الإنجليزية فقط","يفهم الصينية فقط"],correctAnswerIndex:1,explanation:"الكمبيوتر يحتاج إلى لغات برمجة مخصصة ليفهم الأوامر."},{id:"q_prog_5",text:"ما الفائدة الرئيسية من تعلم البرمجة إلى جانب كتابة الأكواد؟",options:["زيادة سرعة الكتابة على الكيبورد","تعلم كيفية تصميم الألعاب فقط","تطوير مهارات التفكير المنطقي وحل المشكلات","القدرة على اختراق الأنظمة"],correctAnswerIndex:2,explanation:"البرمجة تعزز التفكير المنطقي وهي مهارة قيمة."},{id:"q_prog_6",text:"ماذا يُطلق على المنتج النهائي الذي يتكون من مجموعة أكواد تؤدي وظيفة معينة؟",options:["نص برمجي (Script)","برنامج (Software)","مكتبة (Library)","إطار عمل (Framework)"],correctAnswerIndex:1,explanation:"البرنامج هو التطبيق العملي للكود المكتوب."},{id:"q_prog_7",text:"لغات البرمجة تعتبر وسيط بين من ومن؟",options:["المبرمج والمستخدم","الإنسان والكمبيوتر","الكمبيوتر والإنترنت","البرامج وبعضها"],correctAnswerIndex:1,explanation:"لغات البرمجة تمكن الإنسان من إعطاء تعليمات للكمبيوتر."},{id:"q_prog_8",text:"هل البرمجة مقتصرة على إنشاء تطبيقات الكمبيوتر فقط؟",options:["نعم، هي فقط للكمبيوتر المكتبي","لا، تدخل في تطبيقات الويب والموبايل والأجهزة الذكية وغيرها","نعم، وتحديداً لإنشاء أنظمة التشغيل","لا، ولكنها تستخدم بشكل رئيسي في الأبحاث العلمية"],correctAnswerIndex:1,explanation:"البرمجة لها تطبيقات واسعة جداً في مختلف المجالات التقنية."},{id:"q_prog_9",text:'ماذا يعني أن الكمبيوتر "ينفذ" الكود؟',options:["يقرأ الكود بصوت عالٍ","يخزن الكود في الذاكرة فقط","يقوم بتحويل الكود إلى صور","يتبع التعليمات الموجودة في الكود خطوة بخطوة"],correctAnswerIndex:3,explanation:"تنفيذ الكود يعني أن الكمبيوتر يقوم بالمهام المحددة في التعليمات."},{id:"q_prog_10",text:"في هذا الكورس، أي لغة برمجة سنتعلمها؟",options:["جافاسكريبت","جافا","C++","بايثون"],correctAnswerIndex:3,explanation:"هذا الكورس مخصص لتعليم لغة بايثون."}]},{id:"l1-lesson-1",slug:"introduction-to-python",title:"مقدمة إلى بايثون",description:"ما هي لغة بايثون، تاريخها، مميزاتها، ولماذا هي مشهورة ومناسبة للمبتدئين.",content:[{type:"heading",text:"أهلاً بك في عالم بايثون!"},{type:"paragraph",text:'بايثون دي لغة برمجة سهلة جداً وقوية في نفس الوقت. الناس بتحبها عشان مكتوبة بطريقة قريبة من كلامنا العادي وتقدر تعمل بيها حاجات كتير. اتسمت على اسم فرقة كوميدية بريطانية اسمها "Monty Python" مش على اسم تعبان البايثون زي ما ناس كتير فاكرة!'},{type:"subheading",text:"مين اللي عمل بايثون؟ وتاريخها إيه؟"},{type:"paragraph",text:'اللي اخترع بايثون واحد هولندي اسمه "Guido van Rossum". بدأ يشتغل عليها في أواخر الثمانينات ونزل أول إصدار منها سنة 1991. جويدو كان عايز يعمل لغة برمجة تكون سهلة في القراية والكتابة، وفي نفس الوقت قوية وتقدر تعمل بيها مشاريع كبيرة.'},{type:"subheading",text:"فلسفة بايثون (The Zen of Python)"},{type:"paragraph",text:'بايثون ليها فلسفة خاصة بيها اسمها "The Zen of Python" كتبها واحد اسمه Tim Peters. دي مجموعة مبادئ بتوجه تصميم اللغة، زي مثلاً:'},{type:"list",text:'بعض مبادئ "Zen of Python":',items:["الجميل أحسن من القبيح.","الصريح أحسن من الضمني.","البسيط أحسن من المعقد.","المعقد أحسن من المعقد أوي.","القراءة مهمة (Readability counts).","لو التنفيذ صعب الشرح، تبقى فكرة وحشة."]},{type:"paragraph",text:"لو كتبت `import this` في مترجم بايثون، هتشوف الفلسفة دي كاملة!"},{type:"subheading",text:"ليه بايثون؟ إيه مميزاتها؟"},{type:"list",text:"مميزات بايثون الأساسية:",items:["سهلة القراءة والكتابة (Readability): كأنك بتكتب إنجليزي بسيط. الأكواد بتاعتها واضحة ومش معقدة.","متعددة الاستخدامات (Versatile): تقدر تعمل بيها حاجات كتير جداً زي:","  - تطوير مواقع الويب (Web Development) باستخدام إطارات عمل زي Django و Flask.","  - تحليل البيانات (Data Analysis) وعلم البيانات (Data Science) بمساعدة مكتبات زي Pandas و NumPy و Scikit-learn.","  - الذكاء الاصطناعي (Artificial Intelligence) وتعلم الآلة (Machine Learning) بمكتبات زي TensorFlow و PyTorch.","  - برمجة تطبيقات سطح المكتب (Desktop Applications).","  - كتابة الإسكريبتات (Scripting) لعمل مهام متكررة بشكل تلقائي.","مجتمع كبير وداعم (Large Community): لو عندك أي سؤال أو واجهتك مشكلة، هتلاقي ناس كتير أوي تساعدك على الإنترنت ومنتديات المبرمجين.",'مكتبات ضخمة (Extensive Libraries): بايثون معاها "Standard Library" فيها أدوات جاهزة كتير، وكمان فيه آلاف المكتبات الخارجية اللي ممكن تستخدمها عشان توفر على نفسك وقت ومجهود.',"لغة مُفسَّرة (Interpreted Language): الكود بيشتغل سطر بسطر، وده بيخلي عملية التجربة وتصحيح الأخطاء أسهل، خصوصاً للمبتدئين.","مجانية ومفتوحة المصدر (Free and Open-Source): تقدر تستخدمها وتعدل عليها وتوزعها براحتك من غير أي تكلفة."]},{type:"subheading",text:"إصدارات بايثون (Python Versions)"},{type:"paragraph",text:"بايثون ليها إصدارين رئيسيين: بايثون 2 وبايثون 3. بايثون 2 مبقاش مدعوم بشكل رسمي من سنة 2020، وكل الشغل الجديد والمكتبات الحديثة بتتعمل لبايثون 3. عشان كده، إحنا في الكورس ده هنتعلم بايثون 3 لأنه هو المستقبل وهو الإصدار اللي المفروض أي حد جديد يبدأ بيه."},{type:"paragraph",text:"في الدرس ده، عرفنا نبذة عن بايثون، تاريخها، ليه هي لغة ممتازة، وإيه مجالات استخدامها. مستعد تبدأ تكتب أكواد؟ يلا بينا!"},{type:"code",language:"python",text:`# ده مثال بسيط لكود بايثون
# الأمر print() بيستخدم عشان نطبع حاجة على الشاشة
print("أهلاً ببايثون مع Bod Code!")`}],quiz:[{id:"q1-1",text:"إيه أكتر حاجة بتميز لغة بايثون؟",options:["صعوبتها الشديدة","سهولة قراءتها وكتابتها","محدودة الاستخدامات","محدش بيستخدمها"],correctAnswerIndex:1,explanation:"بايثون مشهورة بأنها سهلة جداً في القراءة والكتابة وده بيخليها مناسبة للمبتدئين."},{id:"q1-2",text:"هل بايثون لغة مناسبة للمبتدئين؟",options:["لأ، صعبة جداً","نعم، من أسهل اللغات للبدء","ممكن، بس محتاجة خبرة سابقة","بايثون مش للمبتدئين خالص"],correctAnswerIndex:1,explanation:"طبعاً! بايثون تعتبر من أفضل اللغات اللي ممكن تبدأ بيها مشوار البرمجة."},{id:"q1-3",text:"أمر الطباعة في بايثون هو:",options:["echo","display","print","show"],correctAnswerIndex:2,explanation:"بنستخدم `print()` عشان نعرض أي حاجة على الشاشة."},{id:"q1-4",text:"مين اللي اخترع لغة بايثون؟",options:["بيل جيتس","ستيف جوبز","جويدو فان روسوم","مارك زوكربيرج"],correctAnswerIndex:2,explanation:"Guido van Rossum هو مبتكر لغة بايثون."},{id:"q1-5",text:"بايثون تُعتبر لغة:",options:["مُجمَّعة (Compiled)","مُفسَّرة (Interpreted)","خاصة بتطوير الألعاب فقط","مستخدمة في تصميم الجرافيكس فقط"],correctAnswerIndex:1,explanation:"بايثون لغة مفسرة، يعني الكود بيتنفذ سطر بسطر وده بيسهل اكتشاف الأخطاء."},{id:"q1-6",text:"أي من المجالات التالية لا تُستخدم فيها بايثون بشكل شائع؟",options:["تطوير الويب","تحليل البيانات","برمجة أنظمة التشغيل منخفضة المستوى (Low-level OS programming)","الذكاء الاصطناعي"],correctAnswerIndex:2,explanation:"بينما يمكن استخدام بايثون في مهام نظام معينة، لغات مثل C أو C++ أكثر شيوعًا لبرمجة أنظمة التشغيل منخفضة المستوى."},{id:"q1-7",text:"ما هو الإصدار الحالي من بايثون الذي يُنصح بتعلمه واستخدامه؟",options:["بايثون 1","بايثون 2","بايثون 3","كلهم زي بعض"],correctAnswerIndex:2,explanation:"بايثون 3 هو الإصدار الأحدث والمدعوم حاليًا، ويجب على المتعلمين الجدد البدء به."},{id:"q1-8",text:'مبدأ "Readability counts" من فلسفة بايثون، ماذا يعني؟',options:["أن الكود لازم يكون قصير جداً","أن الكود لازم يكون سهل القراءة والفهم","أن الكاونترات في الكود مهمة","أن سرعة الكتابة هي الأهم"],correctAnswerIndex:1,explanation:"سهولة قراءة الكود وفهمه هي من أهم مبادئ بايثون."},{id:"q1-9",text:'ماذا يعني أن بايثون "مفتوحة المصدر"؟',options:["أن مصدرها الوحيد هو الإنترنت","أن الكود المصدري لها متاح للجميع ويمكن تعديله واستخدامه بحرية","أن لها باب واحد فقط للدخول","أنها تعمل على نظام تشغيل واحد فقط"],correctAnswerIndex:1,explanation:"مفتوحة المصدر تعني أن الكود الأساسي للغة متاح للجميع ويمكنهم المساهمة فيه أو استخدامه بحرية."},{id:"q1-10",text:"لماذا سميت لغة بايثون بهذا الاسم؟",options:["على اسم نوع من الثعابين","على اسم فرقة كوميدية","اسم مركب من أسماء مؤسسيها","كلمة ليس لها معنى محدد"],correctAnswerIndex:1,explanation:`سميت بايثون تيمناً بالفرقة الكوميدية البريطانية "Monty Python's Flying Circus".`}]},{id:"l1-lesson-2",slug:"setting-up-python",title:"تثبيت بايثون وبيئة العمل",description:"خطوات تجهيز جهازك لبدء البرمجة ببايثون، والتعرف على بيئة التطوير.",content:[{type:"heading",text:"تجهيز معمل الأكواد بتاعك!"},{type:"paragraph",text:"قبل ما نبدأ نكتب أكواد بايثون، لازم نتأكد إن بايثون متثبتة على جهازك وإن عندك مكان تكتب فيه الأكواد دي وتشوف نتيجتها. الموضوع أبسط مما تتخيل!"},{type:"subheading",text:"1. تثبيت بايثون (Installing Python):"},{type:"paragraph",text:"أول خطوة هي إنك تحمل بايثون نفسها. روح على الموقع الرسمي لبايثون: `python.org`. هتلاقي قسم للتحميلات (Downloads). الموقع عادة بيعرف نظام التشغيل بتاعك (ويندوز، ماك، أو لينكس) وبيقترحلك النسخة المناسبة. حمل أحدث نسخة مستقرة من بايثون 3 (مثلاً Python 3.10 أو أحدث)."},{type:"list",text:"تعليمات خاصة بأنظمة التشغيل:",items:['**ويندوز (Windows):** أثناء التثبيت، هتظهرلك شاشة فيها خيارات. مهم جداً إنك تعلم على مربع مكتوب جنبه حاجة زي "Add Python to PATH" أو "Add Python 3.x to PATH". دي خطوة بتسهل عليك تشغيل بايثون من أي مكان في الكمبيوتر.',"**ماك (macOS):** ماك بييجي معاه نسخة قديمة من بايثون (بايثون 2). الأفضل إنك تثبت بايثون 3 من الموقع الرسمي. ممكن تستخدم مدير حزم زي Homebrew لو بتعرفله، وتكتب أمر زي `brew install python3`.","**لينكس (Linux):** معظم توزيعات لينكس بييجي معاها بايثون 3 متثبت. ممكن تتأكد من خلال الترمنال (Terminal) بكتابة `python3 --version`. لو مش متثبتة أو عايز نسخة أحدث، ممكن تستخدم مدير الحزم بتاع توزيعتك (زي `apt` في أوبونتو/ديبيان: `sudo apt install python3`)."]},{type:"subheading",text:"2. التأكد من التثبيت:"},{type:"paragraph",text:"بعد ما التثبيت يخلص، افتح الـ Command Prompt (في ويندوز) أو الـ Terminal (في ماك ولينكس). اكتب الأمر ده ودوس Enter:"},{type:"code",language:"text",text:`python --version
# أو لو الأمر اللي فوق مرجعش نتيجة، جرب ده:
python3 --version`},{type:"paragraph",text:'لو ظهرلك رقم الإصدار (مثلاً `Python 3.10.4`) يبقى بايثون اتثبتت تمام! لو ظهر خطأ، يبقى فيه مشكلة في التثبيت أو في خطوة "Add to PATH".'},{type:"subheading",text:"3. بايثون REPL (Read-Eval-Print Loop):"},{type:"paragraph",text:'بايثون بييجي معاها أداة بسيطة اسمها REPL. دي بيئة تفاعلية ممكن تكتب فيها أوامر بايثون وتشوف نتيجتها فوراً. عشان تفتحها، اكتب `python` أو `python3` في الترمنال ودوس Enter. هتلاقي شكل البرومبت اتغير لـ `>>>`. جرب تكتب `print("Hello!")` ودوس Enter.'},{type:"code",language:"python",text:`>>> print("Bod Code شغال!")
Bod Code شغال!
>>> 2 + 3
5`},{type:"paragraph",text:"للخروج من الـ REPL، اكتب `exit()` أو اضغط `Ctrl+Z` ثم Enter في ويندوز، أو `Ctrl+D` في ماك/لينكس."},{type:"subheading",text:"4. اختيار محرر الأكواد (Code Editor) أو IDE:"},{type:"paragraph",text:'الـ REPL كويس للتجارب السريعة، لكن عشان تكتب برامج كاملة هتحتاج برنامج متخصص اسمه "محرر أكواد" أو "بيئة تطوير متكاملة" (IDE). دي برامج بتساعدك تكتب وتنظم وتدير مشاريع البرمجة بتاعتك، وفيها مميزات كتير زي تلوين الأكواد، الإكمال التلقائي، وتصحيح الأخطاء.'},{type:"list",text:"أشهر الخيارات المجانية والممتازة:",items:["**Visual Studio Code (VS Code):** محرر أكواد قوي جداً ومشهور، من تطوير مايكروسوفت. خفيف وبيدعم لغات كتير، وفيه آلاف الإضافات (Extensions) اللي ممكن تزودها عشان تسهل شغلك مع بايثون (زي إضافة Python الرسمية من مايكروسوفت). **(موصى به بشدة لهذا الكورس)**","**PyCharm Community Edition:** بيئة تطوير متكاملة (IDE) معمولة مخصوص لبايثون بواسطة شركة JetBrains. قوية جداً وفيها مميزات كتير متقدمة. النسخة الـ Community مجانية.","**Sublime Text:** محرر أكواد خفيف وسريع ومرن. ممكن تخصصه زي ما تحب.","**Thonny:** بيئة تطوير بسيطة جداً معمولة للمبتدئين في بايثون. بتيجي معاها بايثون متثبتة جواها أحياناً."]},{type:"paragraph",text:"نصيحة: ابدأ بـ VS Code. سهل في البداية وقوي كفاية لما مستواك يتقدم."},{type:"subheading",text:"5. البيئات الافتراضية (Virtual Environments) - فكرة للمستقبل القريب:"},{type:"paragraph",text:'لما تبدأ تشتغل على مشاريع بايثون مختلفة، كل مشروع ممكن يحتاج مكتبات (packages) بإصدارات معينة. عشان تتجنب التعارض بين إصدارات المكتبات دي، بنستخدم حاجة اسمها "بيئات افتراضية". البيئة الافتراضية بتعمل مجلد معزول لكل مشروع، بتحط فيه نسخة بايثون خاصة بيه والمكتبات اللي المشروع ده بس محتاجها. أشهر أداة لعمل كده هي `venv` اللي بتيجي مع بايثون. مش لازم تقلق بيها أوي في البداية، بس اعرف إنها موجودة ومهمة للمشاريع الأكبر.'},{type:"paragraph",text:"كده جهازك بقى جاهز لاستقبال أول أوامر بايثون منك! في الدرس الجاي، هنكتب أول برنامج لينا."}],quiz:[{id:"q2-1",text:"منين أقدر أحمل بايثون؟",options:["من أي موقع تحميل برامج","من الموقع الرسمي python.org","بايثون مش محتاجة تحميل","بتيجي مع الويندوز فقط"],correctAnswerIndex:1,explanation:"يجب دائماً تحميل بايثون من موقعها الرسمي لضمان الحصول على نسخة آمنة وحديثة."},{id:"q2-2",text:"VS Code يعتبر إيه؟",options:["لغة برمجة","نظام تشغيل","محرر أكواد (أو IDE مصغر)","متصفح إنترنت"],correctAnswerIndex:2,explanation:"VS Code هو محرر أكواد شهير جداً ومرن، يمكن اعتباره بيئة تطوير مصغرة مع الإضافات المناسبة."},{id:"q2-3",text:'إيه أهمية خيار "Add Python to PATH" أثناء التثبيت على ويندوز؟',options:["بيخلي بايثون أسرع","بيسمح بتشغيل بايثون من أي مكان في الـ Command Prompt","بيثبت مكتبات إضافية","ملوش لازمة"],correctAnswerIndex:1,explanation:"إضافة بايثون إلى PATH يسهل الوصول إلى مفسر بايثون من أي مجلد عبر سطر الأوامر."},{id:"q2-4",text:"إيه الأمر اللي ممكن أكتبه في الترمنال عشان أتأكد إن بايثون اتثبتت صح وأعرف إصدارها؟",options:["python status","python --version أو python3 --version","check python","python install check"],correctAnswerIndex:1,explanation:"الأمر `python --version` أو `python3 --version` يعرض رقم إصدار بايثون المثبت."},{id:"q2-5",text:"ما هي الـ REPL في بايثون؟",options:["نوع من أنواع الأفاعي","محرر أكواد متقدم","بيئة تفاعلية لتنفيذ أوامر بايثون مباشرة","مكتبة لإنشاء الرسوميات"],correctAnswerIndex:2,explanation:"REPL (Read-Eval-Print Loop) هي واجهة تفاعلية تسمح بكتابة وتنفيذ كود بايثون سطراً بسطر ورؤية الناتج فوراً."},{id:"q2-6",text:"أشهر محرر أكواد يُنصح به للمبتدئين في هذا الكورس هو:",options:["Notepad++","PyCharm Professional","Visual Studio Code (VS Code)","Eclipse"],correctAnswerIndex:2,explanation:"VS Code خيار ممتاز لأنه يجمع بين البساطة والقوة وهو مجاني ويدعم بايثون بشكل رائع."},{id:"q2-7",text:"ما الفائدة الأساسية من استخدام البيئات الافتراضية (Virtual Environments) في بايثون؟",options:["تسريع تنفيذ الكود","تقليل حجم ملفات بايثون","عزل متطلبات (مكتبات) كل مشروع عن الآخر لتجنب التعارض","تشفير الكود لحمايته"],correctAnswerIndex:2,explanation:"البيئات الافتراضية تساعد في إدارة الاعتماديات الخاصة بكل مشروع بشكل منفصل."},{id:"q2-8",text:"إذا كنت تستخدم نظام macOS، أي نسخة من بايثون تكون مثبتة مسبقًا عادةً (ولكن يُنصح بتثبيت الأحدث)؟",options:["لا يوجد بايثون مثبت","بايثون 3.9 أو أحدث","بايثون 2","بايثون موبايل"],correctAnswerIndex:2,explanation:"macOS يأتي غالبًا مع بايثون 2، لكن يجب تثبيت بايثون 3 للعمل الحديث."},{id:"q2-9",text:"في نظام لينكس (مثل أوبونتو)، كيف يمكنك تثبيت بايثون 3 إذا لم تكن مثبتة؟",options:["عن طريق تحميل ملف EXE","باستخدام أمر مثل `sudo apt install python3`","لا يمكن تثبيتها على لينكس","عن طريق متجر تطبيقات مايكروسوفت"],correctAnswerIndex:1,explanation:"في توزيعات ديبيان/أوبونتو، يُستخدم `apt` لتثبيت البرامج، بما في ذلك بايثون 3."},{id:"q2-10",text:"ما هو الأمر الذي ينهي جلسة الـ REPL في بايثون؟",options:["`end`","`quit`","`exit()` أو Ctrl+D/Ctrl+Z","`close_session`"],correctAnswerIndex:2,explanation:"يمكن استخدام `exit()` أو اختصارات لوحة المفاتيح لإنهاء الـ REPL."}]},{id:"l1-lesson-4",slug:"hello-world",title:"أول برنامج لك: أهلاً بالعالم!",description:"كتابة وتشغيل أول كود بايثون بسيط، وفهم أمر الطباعة والتعليقات.",content:[{type:"heading",text:'برنامجك الأول: "أهلاً بالعالم!"'},{type:"paragraph",text:'في عالم البرمجة، عادةً أول برنامج بنكتبه في أي لغة جديدة بيكون برنامج بسيط جداً بيطبع جملة "أهلاً بالعالم!" (أو "Hello, World!"). الهدف منه إننا نتأكد إن كل حاجة في بيئة العمل بتاعتنا شغالة تمام، وإننا قادرين نكتب كود ونشغله ونشوف نتيجته. دي تعتبر زي "السلام عليكم" بتاعتك للغة البرمجة الجديدة!'},{type:"subheading",text:"كتابة الكود:"},{type:"paragraph",text:"افتح محرر الأكواد بتاعك (زي VS Code). اعمل ملف جديد وسميه أي اسم بامتداد `.py` (مثلاً `hello.py`). امتداد `.py` ده بيقول للكمبيوتر إن الملف ده فيه كود بايثون."},{type:"paragraph",text:"جوه الملف ده، اكتب السطر التالي:"},{type:"code",language:"python",text:'print("أهلاً بالعالم مع Bod Code!")'},{type:"subheading",text:"شرح الكود:"},{type:"list",text:"",items:['`print()`: ده اسم "دالة" (Function) جاهزة في بايثون. وظيفتها إنها تطبع أو تعرض أي حاجة بتديها لها على الشاشة (الترمنال أو نافذة الخرج).','`("أهلاً بالعالم مع Bod Code!")`: الكلام اللي بين القوسين `()` ده هو الحاجة اللي إنت عايز تطبعها. ولإنها نص (كلام)، لازم نحطها بين علامتين تنصيص مزدوجتين `""` أو مفردتين `\'\'`. دي بنسميها "سلسلة نصية" أو String.']},{type:"subheading",text:"تشغيل الكود:"},{type:"paragraph",text:"عشان تشغل الكود ده، افتح الترمنال (Terminal) أو الـ Command Prompt. روح للمكان (المجلد/Folder) اللي حفظت فيه ملف `hello.py`. بعدين اكتب الأمر التالي ودوس Enter:"},{type:"code",language:"text",text:`python hello.py
# أو لو الأمر اللي فوق مرجعش نتيجة، جرب ده:
python3 hello.py`},{type:"paragraph",text:'لو كل حاجة تمام، المفروض تشوف جملة "أهلاً بالعالم مع Bod Code!" مطبوعة قدامك في الترمنال. مبروك! إنت كده كتبت وشغلت أول برنامج بايثون ليك!'},{type:"subheading",text:"التعليقات (Comments) في بايثون:"},{type:"paragraph",text:'ساعات بنحتاج نكتب ملاحظات جوه الكود بتاعنا عشان نفسر حاجة معينة أو نفتكر ليه كتبنا جزء معين بالطريقة دي. الملاحظات دي بنسميها "تعليقات". مفسر بايثون بيتجاهل التعليقات دي تماماً ومش بينفذها، هي بس لينا إحنا كبشر عشان نفهم الكود أحسن.'},{type:"paragraph",text:"في بايثون، أي سطر بيبدأ بعلامة الهاش `#` بيعتبر تعليق:"},{type:"code",language:"python",text:`# السطر ده كله تعليق، بايثون هيتجاهله

print("ده هيتطبع عادي") # ممكن كمان التعليق ييجي في آخر السطر كده

# فايدة التعليقات:
# - شرح الأجزاء الصعبة في الكود.
# - تذكير نفسك بحاجة معينة.
# - تعطيل جزء من الكود مؤقتاً من غير ما تمسحه.`},{type:"subheading",text:"تجربة أمر الطباعة أكتر:"},{type:"paragraph",text:"دالة `print()` مرنة جداً. ممكن تطبع بيها أكتر من حاجة في نفس السطر، وممكن تتحكم في الفاصل بينهم وفي نهاية السطر:"},{type:"code",language:"python",text:`print("اسمي", "محمد", "عمري", 30) # هيطبعهم جنب بعض بمسافة بينهم
# الناتج: اسمي محمد عمري 30

print("بايثون", "سهلة", "جداً", sep="---") # sep بتحدد الفاصل
# الناتج: بايثون---سهلة---جداً

print("أول سطر", end=" ") # end بتحدد إيه اللي يتطبع في الآخر (العادي بيكون سطر جديد)
print("ده تاني سطر بس على نفس الخط")
# الناتج: أول سطر ده تاني سطر بس على نفس الخط`},{type:"paragraph",text:"جرب بنفسك! كل ما تجرب أكتر كل ما هتفهم أكتر."}],quiz:[{id:"q_hw_1",text:"ما هو الأمر المستخدم لطباعة نص على الشاشة في بايثون؟",options:["display()","echo()","print()","show()"],correctAnswerIndex:2,explanation:"الدالة `print()` هي المستخدمة للطباعة في بايثون."},{id:"q_hw_2",text:"كيف تبدأ التعليقات المكونة من سطر واحد في بايثون؟",options:["// تعليق","/* تعليق */","# تعليق","-- تعليق"],correctAnswerIndex:2,explanation:"التعليقات في بايثون تبدأ بعلامة `#`."},{id:"q_hw_3",text:"ما هو امتداد الملفات التي تحتوي على كود بايثون عادةً؟",options:[".txt",".exe",".py",".python"],correctAnswerIndex:2,explanation:"ملفات كود بايثون تنتهي عادةً بامتداد `.py`."},{id:"q_hw_4",text:"لتشغيل ملف بايثون اسمه `my_script.py` من الترمنال، أي أمر تستخدم غالبًا؟",options:["run my_script.py","execute my_script.py","python my_script.py","start my_script.py"],correctAnswerIndex:2,explanation:"الأمر `python` متبوعًا باسم الملف يستخدم لتشغيل سكربتات بايثون."},{id:"q_hw_5",text:'إذا كتبت `print("مرحباً", "يا", "عالم", sep="-")`، ماذا سيكون الناتج؟',options:["مرحباً يا عالم","مرحباً-يا-عالم","مرحباً يا عالم-","خطأ في الكود"],correctAnswerIndex:1,explanation:"المعامل `sep` يحدد السلسلة النصية التي تفصل بين العناصر المطبوعة."},{id:"q_hw_6",text:'ماذا تفعل `end=" "` في دالة `print()` مثل `print("نص", end=" ")`؟',options:["تضيف مسافة في بداية النص","تنهي السطر بمسافة بدلاً من الانتقال لسطر جديد","تتسبب في خطأ","لا تفعل شيئًا"],correctAnswerIndex:1,explanation:"المعامل `end` يحدد ما سيتم طباعته في نهاية استدعاء `print()`، والقيمة الافتراضية هي الانتقال لسطر جديد (`\\n`)."},{id:"q_hw_7",text:"هل يتم تنفيذ التعليقات بواسطة مفسر بايثون؟",options:["نعم، يتم تنفيذها كأي كود آخر","لا، يتم تجاهلها تمامًا","يتم تنفيذها فقط إذا كانت بلغة معينة","أحيانًا يتم تنفيذها وأحيانًا لا"],correctAnswerIndex:1,explanation:"التعليقات هي للمبرمجين فقط ولا تؤثر على تنفيذ البرنامج."},{id:"q_hw_8",text:"أي من التالي يعتبر استخدامًا صحيحًا لدالة `print()` لطباعة رقم؟",options:["print(123)",'print("123")',"كلاهما صحيح","لا شيء مما سبق"],correctAnswerIndex:2,explanation:"يمكن طباعة الأرقام مباشرة، أو طباعتها كسلاسل نصية إذا كانت محاطة بعلامات تنصيص. النتيجة المرئية قد تكون متشابهة ولكن النوع مختلف."},{id:"q_hw_9",text:'ما الغرض الرئيسي من برنامج "أهلاً بالعالم!"؟',options:["تعليم كيفية عمل عمليات حسابية معقدة","التأكد من أن بيئة التطوير تعمل بشكل صحيح","إنشاء لعبة متكاملة","الاتصال بقاعدة بيانات"],correctAnswerIndex:1,explanation:'برنامج "أهلاً بالعالم!" هو اختبار أساسي للتأكد من أنك تستطيع كتابة وتشغيل الكود.'},{id:"q_hw_10",text:"لو كتبت كود بايثون في ملف نصي عادي بامتداد `.txt`، هل سيعمل بشكل صحيح عند محاولة تشغيله بـ `python file.txt`؟",options:["نعم، الامتداد لا يهم","لا، يجب أن يكون الامتداد `.py` ليتعرف عليه مفسر بايثون كملف بايثون","سيعمل ولكن ببطء","سيعمل فقط إذا كان الكود سطرًا واحدًا"],correctAnswerIndex:1,explanation:"على الرغم من أن المفسر قد يحاول قراءته، إلا أن الامتداد المتعارف عليه والموصى به هو `.py`."}]},{id:"l1-lesson-3",slug:"variables-and-data-types",title:"المتغيرات وأنواع البيانات",description:"فهم كيفية تخزين واستخدام البيانات في بايثون، وأنواع البيانات المختلفة.",content:[{type:"heading",text:"صناديق المعلومات: المتغيرات (Variables)!"},{type:"paragraph",text:'تخيل إنك بتطبخ وعايز تشيل شوية سكر أو دقيق عشان تستخدمهم بعدين. بتحطهم في علبة وتكتب عليها اسمها، صح؟ المتغيرات في البرمجة نفس الفكرة بالظبط! هي عبارة عن "أماكن" أو "صناديق" بنحجزها في ذاكرة الكمبيوتر عشان نخزن فيها قيم (بيانات) معينة، وبندي لكل صندوق اسم عشان نعرف نوصله ونستخدم القيمة اللي جواه بعد كده.'},{type:"paragraph",text:'في بايثون، عشان تعمل متغير، بتكتب اسمه وبعدين علامة يساوي `=` وبعدين القيمة اللي عايز تخزنها جواه. عملية دي بنسميها "إسناد قيمة لمتغير" (Assignment).'},{type:"code",language:"python",text:`# هنا بنعمل متغير اسمه "name" وبنخزن جواه النص "أحمد"
name = "أحمد"

# متغير اسمه "age" بنخزن جواه الرقم 25
age = 25

# متغير اسمه "height" بنخزن جواه الرقم العشري 175.5
height = 175.5

# متغير اسمه "is_student" بنخزن جواه قيمة منطقية (صح/غلط)
is_student = True`},{type:"paragraph",text:"بعد ما عملنا المتغيرات دي، نقدر نستخدمها في أي مكان في الكود. مثلاً، ممكن نطبع قيمتها:"},{type:"code",language:"python",text:`print(name)  # هيطبع: أحمد
print(age)   # هيطبع: 25`},{type:"subheading",text:"قواعد تسمية المتغيرات:"},{type:"list",text:"عشان الأسماء متتلخبطش، فيه شوية قواعد لازم نتبعها واحنا بنسمي المتغيرات:",items:["اسم المتغير ممكن يحتوي على حروف (إنجليزي طبعاً `a-z`, `A-Z`) وأرقام (`0-9`) وعلامة الشرطة السفلية (`_`).","مينفعش اسم المتغير يبدأ برقم.","الأسماء حساسة لحالة الحرف (Case-sensitive). يعني متغير اسمه `myVar` مختلف عن `myvar` ومختلف عن `MYVAR`.",'مينفعش تستخدم "الكلمات المحجوزة" (Keywords) في بايثون كأسماء للمتغيرات. دي كلمات ليها معنى خاص في اللغة زي `print`, `if`, `else`, `for`, `while` وغيرها. (هنتعرف عليهم بالتفصيل بعدين).',"من الأفضل (وده المتعارف عليه أو Convention) إن أسماء المتغيرات تكون معبرة عن الحاجة اللي بتخزنها جواها (مثلاً `user_name` أحسن من `x`). ولو الاسم مكون من كذا كلمة، بنفصل بينهم بشرطة سفلية (دي طريقة اسمها `snake_case` زي `first_name`, `total_score`)."]},{type:"subheading",text:"أنواع البيانات الأساسية (Basic Data Types):"},{type:"paragraph",text:'القيم اللي بنخزنها في المتغيرات ليها أنواع مختلفة. بايثون لغة "ديناميكية التنميط" (Dynamically Typed)، يعني مش لازم تحدد نوع البيانات بنفسك وانت بتعمل المتغير، هي بتعرف النوع لوحدها من القيمة اللي خزنتها. أهم أنواع البيانات الأساسية هي:'},{type:"list",text:"",items:['**النصوص (Strings - `str`):** أي كلام أو حروف أو رموز بنحطها بين علامتين تنصيص مزدوجتين `""` أو مفردتين `\'\'`. مثال: `"محمد"`, `\'Bod Code123\'`, `"مرحباً يا عالم!"`.',"**الأرقام الصحيحة (Integers - `int`):** الأرقام الكاملة اللي مفيهاش كسور، سواء موجبة أو سالبة أو صفر. مثال: `10`, `-5`, `0`, `12345`.","**الأرقام العشرية (Floating-Point Numbers - `float`):** الأرقام اللي فيها علامة عشرية (كسور). مثال: `3.14`, `-0.5`, `2.718`, `10.0`. (لاحظ إن `10.0` ده float لكن `10` ده int).","**القيم المنطقية (Booleans - `bool`):** نوع بيانات خاص ليه قيمتين اتنين بس: `True` (صح) أو `False` (غلط). (لازم أول حرف يكون كابيتال). بنستخدمها كتير في الشروط واتخاذ القرارات. مثال: `is_active = True`, `has_error = False`."]},{type:"subheading",text:"معرفة نوع المتغير (Checking Variable Type):"},{type:"paragraph",text:"لو عايز تعرف نوع البيانات اللي متخزنة في متغير معين، ممكن تستخدم دالة جاهزة اسمها `type()`. "},{type:"code",language:"python",text:`message = "أهلاً"
count = 100
pi_value = 3.14159
is_done = False

print(type(message))    # هيطبع: <class 'str'>
print(type(count))      # هيطبع: <class 'int'>
print(type(pi_value))   # هيطبع: <class 'float'>
print(type(is_done))    # هيطبع: <class 'bool'>`},{type:"subheading",text:"تحويل أنواع البيانات (Type Casting/Conversion):"},{type:"paragraph",text:"أحياناً بنحتاج نحول قيمة من نوع بيانات لنوع تاني. بايثون بتقدملك دوال عشان تعمل كده:"},{type:"list",text:"أشهر دوال التحويل:",items:["`int(x)`: بتحاول تحول `x` لرقم صحيح. لو `x` نص فيه حروف مش أرقام، هيحصل خطأ.","`float(x)`: بتحاول تحول `x` لرقم عشري.","`str(x)`: بتحول `x` لنص (string).",'`bool(x)`: بتحول `x` لقيمة منطقية. معظم القيم بتتحول لـ `True` ماعدا القيم "الفاضية" زي `0`, `0.0`, `""` (نص فاضي), `None`, وقايم فاضية (هنعرفها بعدين) بتتحول لـ `False`.']},{type:"code",language:"python",text:`num_str = "123"          # ده نص
num_int = int(num_str)     # حولناه لرقم صحيح
print(num_int + 7)       # الناتج: 130 (عملية جمع حسابي)

num_float = float("3.14")  # نص حولناه لرقم عشري
print(num_float * 2)     # الناتج: 6.28

age_str = str(30)          # رقم حولناه لنص
print("عمري هو: " + age_str) # الناتج: عمري هو: 30 (عملية دمج نصوص)

print(bool(0))      # False
print(bool(10))     # True
print(bool(""))     # False
print(bool("Hi"))   # True`},{type:"paragraph",text:"المتغيرات وأنواع البيانات هي حجر الأساس في أي لغة برمجة. فهمهم كويس هيسهل عليك الدروس الجاية كتير!"}],quiz:[{id:"q3-1",text:"لو عايز أخزن اسم شخص، أستخدم متغير من نوع إيه؟",options:["Integer","Float","String","Boolean"],correctAnswerIndex:2,explanation:"الأسماء والنصوص عمومًا تُخزن كـ Strings."},{id:"q3-2",text:"قيمة المتغير `x = 10.5` نوعها إيه؟",options:["Integer","Float","String","Boolean"],correctAnswerIndex:1,explanation:"الأرقام التي تحتوي على علامة عشرية هي من نوع Float."},{id:"q3-3",text:"أي من أسماء المتغيرات التالية يعتبر اسم صالح في بايثون؟",options:["1stName","first-name","firstName","first_name"],correctAnswerIndex:3,explanation:"أسماء المتغيرات لا يمكن أن تبدأ برقم، ولا تحتوي على شرطة (-). `firstName` (camelCase) صالح لكن `first_name` (snake_case) هو المتعارف عليه في بايثون."},{id:"q3-4",text:"ما هي القيمة التي سيطبعها الكود التالي: `print(type(True))`؟",options:["<class 'bool'>","<class 'str'>","<class 'int'>","True"],correctAnswerIndex:0,explanation:"`True` هي قيمة منطقية (Boolean) في بايثون."},{id:"q3-5",text:'ماذا سيحدث لو حاولت تنفيذ `age = "سني " + 25`؟',options:['سيتم تخزين "سني 25" في age',"سيحدث خطأ (TypeError)","سيتم تخزين 25 في age",'سيتم تخزين "سني " في age'],correctAnswerIndex:1,explanation:'لا يمكن دمج نص (string) مع رقم صحيح (integer) مباشرة باستخدام `+`. يجب تحويل الرقم إلى نص أولاً: `age = "سني " + str(25)`.'},{id:"q3-6",text:'ما هي نتيجة `int("20.7")`؟',options:["20.7","20","21","خطأ (ValueError)"],correctAnswerIndex:3,explanation:'الدالة `int()` لا تستطيع تحويل نص يمثل رقم عشري مباشرة. يجب تحويله لـ `float` أولاً ثم لـ `int` إذا أردت الجزء الصحيح: `int(float("20.7"))` والذي سيعطي `20`.'},{id:"q3-7",text:"هل `myVar` و `myvar` يعتبران نفس المتغير في بايثون؟",options:["نعم، بايثون لا تهتم بحالة الأحرف","لا، بايثون حساسة لحالة الأحرف (case-sensitive)","يعتمد على نوع البيانات","فقط إذا كانا يخزنان نفس القيمة"],correctAnswerIndex:1,explanation:"بايثون لغة حساسة لحالة الأحرف، لذا `myVar` و `myvar` هما متغيران مختلفان."},{id:"q3-8",text:"أي من القيم التالية يعتبرها `bool()` كقيمة `False`؟",options:['"False"',"1","0",'["a"]'],correctAnswerIndex:2,explanation:'الرقم `0` (و `0.0`)، والنصوص الفارغة `""`، و `None`، والمجموعات الفارغة (مثل قائمة فارغة `[]`) تعتبر `False` عند تحويلها إلى Boolean. النص `"False"` ليس فارغًا فيعتبر `True`.'},{id:"q3-9",text:"ماذا تسمى عملية إعطاء قيمة لمتغير مثل `x = 100`؟",options:["تعريف (Definition)","إسناد (Assignment)","مقارنة (Comparison)","استدعاء (Calling)"],correctAnswerIndex:1,explanation:"استخدام علامة `=` لإعطاء قيمة لمتغير يسمى عملية إسناد."},{id:"q3-10",text:'إذا كان لديك `a = 10` و `b = "5"`. ما ناتج `str(a) + b`؟',options:["15",'"105"',"خطأ",'"10" + "5"'],correctAnswerIndex:1,explanation:'`str(a)` يحول الرقم `10` إلى النص `"10"`. ثم يتم دمج النص `"10"` مع النص `"5"` ليصبح `"105"`.'}]},{id:"l1-lesson-ops",slug:"operators-in-python",title:"العمليات في بايثون",description:"تعلم كيفية إجراء العمليات الحسابية، المقارنات، والعمليات المنطقية في بايثون.",content:[{type:"heading",text:"الآلات الحاسبة السحرية: العمليات (Operators)!"},{type:"paragraph",text:"العمليات في بايثون هي الرموز الخاصة اللي بتخلينا نعمل حاجات على البيانات بتاعتنا، زي ما بنستخدم الجمع والطرح في الرياضة. بايثون فيها أنواع مختلفة من العمليات، وكل نوع ليه استخداماته."},{type:"subheading",text:"1. العمليات الحسابية (Arithmetic Operators):"},{type:"paragraph",text:"دي العمليات اللي بنستخدمها عشان نعمل حسابات رياضية على الأرقام:"},{type:"list",text:"أشهر العمليات الحسابية:",items:["`+` (الجمع): `5 + 3` الناتج `8`","`-` (الطرح): `5 - 3` الناتج `2`","`*` (الضرب): `5 * 3` الناتج `15`","`/` (القسمة): `10 / 3` الناتج `3.333...` (الناتج دايماً float)","`//` (القسمة الصحيحة - Floor Division): `10 // 3` الناتج `3` (بياخد الجزء الصحيح بس من ناتج القسمة ويهمل الكسر)","`%` (باقي القسمة - Modulus): `10 % 3` الناتج `1` (الباقي من قسمة 10 على 3)","`**` (الأس - Exponentiation): `5 ** 2` الناتج `25` (يعني 5 أُس 2)"]},{type:"code",language:"python",text:`x = 10
y = 3

print("الجمع:", x + y)        # 13
print("الضرب:", x * y)        # 30
print("القسمة:", x / y)        # 3.333...
print("القسمة الصحيحة:", x // y) # 3
print("باقي القسمة:", x % y)   # 1
print("الأس:", y ** 2)          # 9 (يعني 3*3)`},{type:"subheading",text:"2. عمليات المقارنة (Comparison Operators):"},{type:"paragraph",text:"بنستخدمها عشان نقارن بين قيمتين. نتيجة المقارنة بتكون دايماً قيمة منطقية (`True` أو `False`)."},{type:"list",text:"أشهر عمليات المقارنة:",items:["`==` (يساوي): `5 == 5` (هل 5 تساوي 5؟) الناتج `True`. `5 == 3` الناتج `False`. (لاحظ إنها اتنين يساوي مش واحدة!)","`!=` (لا يساوي): `5 != 3` (هل 5 لا تساوي 3؟) الناتج `True`.","`>` (أكبر من): `5 > 3` الناتج `True`.","`<` (أصغر من): `5 < 3` الناتج `False`.","`>=` (أكبر من أو يساوي): `5 >= 5` الناتج `True`.","`<=` (أصغر من أو يساوي): `3 <= 5` الناتج `True`."]},{type:"code",language:"python",text:`a = 10
b = 5

print("هل a تساوي b؟", a == b)       # False
print("هل a لا تساوي b؟", a != b)     # True
print("هل a أكبر من b؟", a > b)       # True
print("هل a أصغر من أو تساوي b؟", a <= b) # False`},{type:"subheading",text:"3. العمليات المنطقية (Logical Operators):"},{type:"paragraph",text:"بنستخدمها عشان نربط بين أكتر من شرط (تعبير منطقي). بتشتغل على قيم منطقية (`True` أو `False`) وبترجع قيمة منطقية."},{type:"list",text:"أشهر العمليات المنطقية:",items:["`and` (وَ): بترجع `True` لو كل الشروط اللي بتربط بينهم `True`. لو شرط واحد بس `False`، يبقى الناتج كله `False`.","`or` (أو): بترجع `True` لو فيه شرط واحد على الأقل من الشروط اللي بتربط بينهم `True`. بترجع `False` بس لو كل الشروط `False`.","`not` (ليس/النفي): بتعكس القيمة المنطقية. `not True` تبقى `False`، و `not False` تبقى `True`."]},{type:"code",language:"python",text:`age = 25
has_license = True

# هل الشخص ده ينفع يسوق؟ (لازم يكون سنه أكبر من أو يساوي 18 ويكون معاه رخصة)
can_drive = (age >= 18) and (has_license == True)
print("هل يمكنه القيادة؟", can_drive)  # True

is_weekend = False
is_holiday = True

# هل النهاردة أجازة ممكن أسافر فيها؟ (يا إما ويك إند أو أجازة رسمية)
can_travel = is_weekend or is_holiday
print("هل يمكن السفر؟", can_travel)  # True

print("نفي True هو:", not True)    # False`},{type:"subheading",text:"4. عمليات الإسناد (Assignment Operators):"},{type:"paragraph",text:"إحنا بالفعل استخدمنا أشهر عملية إسناد وهي علامة اليساوي `=` عشان نخزن قيمة في متغير. فيه عمليات إسناد تانية مختصرة بتجمع بين عملية حسابية وعملية الإسناد:"},{type:"list",text:"",items:["`x = 5` (إسناد عادي)","`x += 3` (مكافئة لـ `x = x + 3`)","`x -= 2` (مكافئة لـ `x = x - 2`)","`x *= 4` (مكافئة لـ `x = x * 4`)","`x /= 2` (مكافئة لـ `x = x / 2`)","`x %= 3` (مكافئة لـ `x = x % 3`)"]},{type:"code",language:"python",text:`counter = 0
counter += 1  # counter بقت 1
counter += 1  # counter بقت 2
print("العداد وصل:", counter) # 2

total = 100
total -= 10   # total بقت 90
print("الإجمالي:", total)   # 90`},{type:"subheading",text:"أولوية العمليات (Operator Precedence):"},{type:"paragraph",text:"زي الرياضة بالظبط، بايثون ليها ترتيب معين بتنفذ بيه العمليات لو جم مع بعض في سطر واحد. مثلاً، الضرب والقسمة ليهم أولوية أعلى من الجمع والطرح. الأقواس `()` ليها أعلى أولوية وبتستخدم عشان نغير ترتيب التنفيذ أو نخليه أوضح."},{type:"code",language:"python",text:`result = 5 + 2 * 3  # الضرب الأول (2*3=6)، بعدين الجمع (5+6=11)
print(result)         # 11

result_with_parens = (5 + 2) * 3 # الأقواس الأول (5+2=7)، بعدين الضرب (7*3=21)
print(result_with_parens) # 21`},{type:"paragraph",text:"العمليات دي هي الأدوات اللي بتخلي برامجنا تفكر وتتخذ قرارات وتعمل حسابات. جربهم بنفسك كتير عشان تستوعبهم كويس!"}],quiz:[{id:"q_op_1",text:"ما هو ناتج `10 // 3` في بايثون؟",options:["3.333","3","1","خطأ"],correctAnswerIndex:1,explanation:"`//` هي عملية القسمة الصحيحة (Floor Division) التي تعطي الجزء الصحيح من ناتج القسمة."},{id:"q_op_2",text:'أي من عمليات المقارنة التالية تتحقق من "عدم المساواة"؟',options:["==","!=","<>","><"],correctAnswerIndex:1,explanation:'`!=` هي عملية "لا يساوي".'},{id:"q_op_3",text:"إذا كانت `a = True` و `b = False`، فما هو ناتج `a and b`؟",options:["True","False","يعتمد","خطأ"],correctAnswerIndex:1,explanation:"عملية `and` تكون `True` فقط إذا كان كلا الطرفين `True`."},{id:"q_op_4",text:"ما هي العملية المكافئة لـ `x = x + 5`؟",options:["x += 5","x =+ 5","x + 5 = x","x = 5 + x"],correctAnswerIndex:0,explanation:"`+=` هي عملية إسناد مختصرة للجمع ثم الإسناد."},{id:"q_op_5",text:"ما هو ناتج `10 % 4`؟",options:["2.5","2","0.5","40"],correctAnswerIndex:1,explanation:"`%` هي عملية باقي القسمة. 10 قسمة 4 تساوي 2 والباقي 2."},{id:"q_op_6",text:"ماذا ستكون قيمة `result` بعد تنفيذ الكود التالي: `result = (5 > 3) or (10 == 9)`؟",options:["True","False","5","10"],correctAnswerIndex:0,explanation:"`(5 > 3)` هي `True`. `(10 == 9)` هي `False`. `True or False` الناتج `True`."},{id:"q_op_7",text:"أي عملية لها أعلى أولوية في التنفيذ في بايثون (بدون أقواس)؟",options:["الجمع (+)","الضرب (*)","الأس (**)","المقارنة (==)"],correctAnswerIndex:2,explanation:"الأس `**` له أولوية أعلى من الضرب والقسمة، والتي بدورها أعلى من الجمع والطرح. العمليات الحسابية عمومًا لها أولوية أعلى من المقارنات والمنطقية (ما لم تستخدم الأقواس)."},{id:"q_op_8",text:"ما هو ناتج `not (5 == 5)`؟",options:["True","False","5","خطأ"],correctAnswerIndex:1,explanation:"`(5 == 5)` هي `True`. `not True` هي `False`."},{id:"q_op_9",text:"إذا كانت `x = 15`. بعد تنفيذ `x /= 3`، ما هي قيمة `x`؟",options:["15","5.0","5","خطأ"],correctAnswerIndex:1,explanation:"عملية القسمة `/` (أو `/=`) تنتج دائمًا رقمًا عشريًا (float) في بايثون 3."},{id:"q_op_10",text:"ما هو ناتج `2 * 3 ** 2`؟",options:["36 (2*3=6, 6^2=36)","18 (3^2=9, 2*9=18)","12 (2*3=6, 6*2=12)","خطأ"],correctAnswerIndex:1,explanation:"عملية الأس `**` لها أولوية أعلى من الضرب `*`. لذا `3 ** 2` (تساوي 9) تُنفذ أولاً، ثم `2 * 9` (تساوي 18)."}]},{id:"l1-lesson-5",slug:"conditional-statements",title:"الجمل الشرطية",description:"كيف تجعل برنامجك يتخذ قرارات بناءً على شروط معينة باستخدام `if`, `elif`, `else`.",content:[{type:"heading",text:"البرنامج بيفكر: الجمل الشرطية (Conditional Statements)"},{type:"paragraph",text:'في حياتنا اليومية، بناخد قرارات طول الوقت بناءً على شروط معينة. مثلاً: "لو الجو حر، هشغل التكييف. وإلا (لو مش حر)، هفتح الشباك." البرامج كمان محتاجة تعمل كده! محتاجة تفكر وتتصرف بشكل مختلف حسب الموقف. هنا بتيجي فايدة الجمل الشرطية.'},{type:"paragraph",text:"في بايثون، بنستخدم الكلمات المفتاحية `if` (لو)، `elif` (اختصار لـ else if، يعني وإلا لو)، و `else` (وإلا) عشان نخلي البرنامج ينفذ أوامر معينة فقط لو شرط معين اتحقق."},{type:"subheading",text:"1. جملة `if` البسيطة:"},{type:"paragraph",text:"بنستخدم `if` لما نكون عايزين ننفذ مجموعة أوامر لو شرط معين كان `True`. لو الشرط كان `False`، البرنامج هيتجاهل الأوامر دي ويكمل عادي."},{type:"paragraph",text:"الصيغة العامة بتاعتها:"},{type:"code",language:"python",text:`if condition:  # الشرط لازم يكون تعبير نتيجته True أو False
    # الأوامر اللي هتتنفذ لو الشرط True
    # (لاحظ المسافة البادئة قبل الأوامر دي، مهمة جداً!)
    statement1
    statement2

# باقي الكود (بيتنفذ سواء الشرط True أو False)`},{type:"paragraph",text:"**ملاحظة مهمة جداً:** المسافة البادئة (Indentation) اللي قبل `statement1` و `statement2` دي أساسية في بايثون. هي اللي بتعرف بايثون إن الأوامر دي تابعة لجملة `if`. المسافة دي عادة بتكون 4 مسافات (أو تاب واحدة). لو مكتبتهاش صح، هيحصل خطأ."},{type:"code",language:"python",text:`temperature = 35

if temperature > 30:
    print("الجو حر جداً!")
    print("شغل التكييف.")

print("يومك سعيد!") # دي هتتطبع في كل الأحوال`},{type:"subheading",text:"2. جملة `if...else`:"},{type:"paragraph",text:"ساعات بنكون عايزين ننفذ مجموعة أوامر لو الشرط `True`، وننفذ مجموعة أوامر تانية مختلفة لو الشرط كان `False`. هنا بنستخدم `else`."},{type:"code",language:"python",text:`if condition:
    # الأوامر اللي هتتنفذ لو الشرط True
    statement_A1
    statement_A2
else:
    # الأوامر اللي هتتنفذ لو الشرط False
    statement_B1
    statement_B2`},{type:"code",language:"python",text:`age = 16

if age >= 18:
    print("أنت بالغ ويمكنك التصويت.")
else:
    print("أنت قاصر ولا يمكنك التصويت بعد.")
    print(f"فاضلك {18 - age} سنين عشان تقدر تصوت.")`},{type:"subheading",text:"3. جملة `if...elif...else` (شروط متعددة):"},{type:"paragraph",text:"لو عندك أكتر من شرط وعايز تختبرهم بالترتيب، بتستخدم `elif`. بايثون بيمشي على الشروط من فوق لتحت. أول شرط بيلاقيه `True` بينفذ الأوامر بتاعته وبيتجاهل باقي الـ `elif` والـ `else` اللي بعده. لو ولا شرط من `if` أو `elif` كان `True`، بينفذ الأوامر بتاعة `else` (لو موجودة)."},{type:"code",language:"python",text:`grade = 85

if grade >= 90:
    print("ممتاز!")
elif grade >= 80:  # هيتنفذ لو الشرط الأول False وده True
    print("جيد جداً.")
elif grade >= 70:
    print("جيد.")
elif grade >= 60:
    print("مقبول.")
else: # هيتنفذ لو كل الشروط اللي فوق False
    print("محتاج تذاكر أكتر.")`},{type:"subheading",text:"شروط متداخلة (Nested `if` statements):"},{type:"paragraph",text:"ممكن تحط جملة `if` جوه جملة `if` تانية. ده بيخليك تعمل شروط معقدة أكتر."},{type:"code",language:"python",text:`num = 15

if num > 0:
    print("الرقم موجب.")
    if num % 2 == 0: # شرط داخلي
        print("وهو رقم زوجي.")
    else:
        print("وهو رقم فردي.")
else:
    print("الرقم سالب أو صفر.")`},{type:"subheading",text:'القيم الـ "Truthy" والـ "Falsy":'},{type:"paragraph",text:'مش لازم الشرط في جملة `if` يكون ناتج عملية مقارنة صريحة (زي `age > 18`). بايثون بيعتبر بعض القيم "صحيحة ضمنياً" (Truthy) وبعضها "خاطئة ضمنياً" (Falsy).'},{type:"list",text:"أمثلة على قيم Falsy:",items:["`False` (القيمة المنطقية نفسها)",'`None` (قيمة خاصة بتعبر عن "لا شيء")',"الأرقام صفر: `0`, `0.0`","النصوص الفارغة: `\"\"`, `''`","المجموعات الفارغة زي القوائم `[]` والقواميس `{}` (هنعرفهم بعدين)"]},{type:"paragraph",text:"أي قيمة تانية غير دول بتعتبر Truthy."},{type:"code",language:"python",text:`name = ""
if name: # هنا name "" تعتبر Falsy
    print(f"أهلاً يا {name}")
else:
    print("لم يتم إدخال اسم.") # ده اللي هيتطبع

my_list = [1, 2]
if my_list: # my_list مش فاضية، تعتبر Truthy
    print("القائمة تحتوي على عناصر.") # ده اللي هيتطبع`},{type:"paragraph",text:"الجمل الشرطية هي اللي بتدي برامجك القدرة على التكيف مع المواقف المختلفة. تدرب عليها كويس لأنها من أهم أساسيات البرمجة!"}],quiz:[{id:"q_cond_1",text:"أي كلمة مفتاحية تستخدم للتحقق من شرط إضافي إذا لم يتحقق الشرط الأول في جملة `if`؟",options:["then","elseif","elif","otherwise"],correctAnswerIndex:2,explanation:"`elif` (اختصار لـ else if) تستخدم لاختبار شروط إضافية."},{id:"q_cond_2",text:`ماذا سيطبع الكود التالي إذا كانت \`x = 10\`؟
\`if x > 10:
  print("A")
elif x == 10:
  print("B")
else:
  print("C")\``,options:["A","B","C","لن يطبع شيئًا"],correctAnswerIndex:1,explanation:"بما أن `x` تساوي 10، فإن شرط `x == 10` في `elif` هو الذي سيتحقق."},{id:"q_cond_3",text:"هل المسافة البادئة (Indentation) مهمة في جمل `if` في بايثون؟",options:["لا، هي فقط لتجميل شكل الكود","نعم، هي التي تحدد الأوامر التابعة للشرط","مهمة فقط في جمل `else`","مهمة فقط إذا كان هناك `elif`"],correctAnswerIndex:1,explanation:"المسافة البادئة ضرورية في بايثون لتحديد نطاق الكتل البرمجية التابعة للجمل الشرطية والحلقات والدوال وغيرها."},{id:"q_cond_4",text:"إذا كان لديك `if condition1: ... elif condition2: ... else: ...` متى يتم تنفيذ الجزء الخاص بـ `else`؟",options:["دائمًا","فقط إذا كان `condition1` صحيحًا","فقط إذا كان `condition2` صحيحًا","فقط إذا كان كل من `condition1` و `condition2` خاطئين"],correctAnswerIndex:3,explanation:"جزء `else` ينفذ فقط إذا كانت جميع شروط `if` و `elif` السابقة له خاطئة."},{id:"q_cond_5",text:'أي من القيم التالية تعتبر "Falsy" في بايثون (أي تعامل كـ `False` في سياق شرطي)؟',options:['"False" (النص)',"0 (الرقم صفر)","-1 (الرقم سالب واحد)","[1, 2] (قائمة غير فارغة)"],correctAnswerIndex:1,explanation:'الرقم صفر (`0` و `0.0`)، والنصوص الفارغة (`""`)، و`None`، والمجموعات الفارغة تعتبر Falsy.'},{id:"q_cond_6",text:`ماذا سيطبع الكود التالي؟
\`name = "Bod"
if name:
  print("Hello")
else:
  print("No name")\``,options:["Hello","No name","لن يطبع شيئًا","خطأ"],correctAnswerIndex:0,explanation:'النص غير الفارغ `"Bod"` يعتبر "Truthy"، لذا سيتحقق الشرط.'},{id:"q_cond_7",text:"هل يمكن وضع جملة `if` داخل جملة `if` أخرى (شروط متداخلة)؟",options:["نعم، بدون أي قيود","لا، هذا غير مسموح به في بايثون","نعم، ولكن بحد أقصى تداخل واحد","نعم، ولكن فقط إذا كان الشرط الخارجي `else`"],correctAnswerIndex:0,explanation:"يمكن تداخل جمل `if` لإنشاء منطق شرطي معقد."},{id:"q_cond_8",text:"ما هو الخطأ الشائع عند كتابة `if a = 5:` بدلاً من `if a == 5:`؟",options:["لا يوجد خطأ، كلاهما صحيح","الأولى تقوم بإسناد قيمة (assignment) بدلاً من المقارنة (comparison)","الثانية هي التي تسبب خطأ","الأولى أسرع في التنفيذ"],correctAnswerIndex:1,explanation:"`a = 5` هي عملية إسناد، بينما `a == 5` هي عملية مقارنة. جمل `if` تحتاج إلى تعبير ينتج عنه `True` أو `False` (مثل المقارنة)."},{id:"q_cond_9",text:"إذا كان لديك عدة `elif` بعد `if`، هل يتم اختبار كل شروط `elif` حتى لو تحقق شرط `if` الأول؟",options:["نعم، يتم اختبار جميع الشروط دائمًا","لا، بمجرد تحقق شرط `if` أو `elif`، يتم تجاهل الباقي","يتم اختبارهم فقط إذا كان شرط `if` الأول خاطئًا","يتم اختبارهم بشكل عشوائي"],correctAnswerIndex:1,explanation:"بايثون يختبر الشروط بالترتيب، وبمجرد العثور على شرط `True`، ينفذ كتلته ويتجاهل بقية `elif` و `else` في نفس السلسلة."},{id:"q_cond_10",text:"ماذا سيحدث إذا لم تضع مسافة بادئة صحيحة للأوامر داخل جملة `if`؟",options:["سيتم تنفيذ الأوامر بشكل طبيعي","سيظهر تحذير ولكن الكود سيعمل","سيحدث خطأ في بناء الجملة (IndentationError)","سيتجاهل بايثون جملة `if` بالكامل"],correctAnswerIndex:2,explanation:"عدم وجود مسافة بادئة صحيحة يؤدي إلى `IndentationError` لأن بايثون تعتمد عليها لتحديد الكتل البرمجية."}]},{id:"l1-lesson-loops",slug:"loops-in-python",title:"حلقات التكرار (for, while)",description:"تعلم كيف تجعل برنامجك يكرر تنفيذ مجموعة من الأوامر عدة مرات باستخدام حلقات `for` و `while`.",content:[{type:"heading",text:"البرنامج النشيط: حلقات التكرار (Loops)!"},{type:"paragraph",text:'تخيل إنك عايز تطبع كلمة "مرحباً" 100 مرة. هل هتقعد تكتب أمر الطباعة 100 مرة؟ أكيد لأ! هنا بتيجي فايدة حلقات التكرار. الحلقات بتخلينا ننفذ جزء معين من الكود أكتر من مرة بشكل تلقائي، وده بيوفر علينا وقت ومجهود كبير وبيخلي الكود بتاعنا أنضف وأصغر.'},{type:"paragraph",text:"بايثون فيها نوعين أساسيين من حلقات التكرار: `for` و `while`."},{type:"subheading",text:"1. حلقة `for` (التكرار المحدد):"},{type:"paragraph",text:"بنستخدم حلقة `for` لما نكون عارفين عدد المرات اللي عايزين نكرر فيها الكود، أو لما نكون عايزين نمر على كل عنصر في مجموعة من العناصر (زي قائمة أو نص)."},{type:"paragraph",text:"أشهر استخدام لحلقة `for` هو مع دالة `range()` اللي بتنشئ سلسلة من الأرقام:"},{type:"code",language:"python",text:`# range(5) بتنشئ الأرقام من 0 لحد 4 (يعني 0, 1, 2, 3, 4)
for i in range(5):  # في كل لفة، المتغير i هياخد قيمة جديدة من السلسلة
    print(f"مرحباً للمرة رقم: {i}")

# ممكن نحدد بداية ونهاية وخطوة للـ range
# range(start, stop, step) - stop مش بتدخل معانا
for num in range(2, 10, 2): # الأرقام: 2, 4, 6, 8
    print(num)`},{type:"paragraph",text:"ممكن كمان نستخدم `for` عشان نمر على حروف نص أو عناصر قائمة (هنتكلم عن القوائم بالتفصيل بعدين):"},{type:"code",language:"python",text:`name = "BodCode"
for char in name: # char هياخد قيمة كل حرف بالترتيب
    print(char)

fruits = ["تفاح", "موز", "فراولة"]
for fruit in fruits:
    print(f"أنا بحب الـ {fruit}")`},{type:"subheading",text:"2. حلقة `while` (التكرار المشروط):"},{type:"paragraph",text:'بنستخدم حلقة `while` لما نكون عايزين نكرر الكود طالما شرط معين متحقق (`True`). الحلقة بتفضل شغالة لحد ما الشرط ده يبقى `False`. مهم جداً إننا نتأكد إن الشرط ده هيتغير في وقت ما جوه الحلقة ويصبح `False`، وإلا الحلقة هتفضل شغالة للأبد (بنسميها "حلقة لا نهائية" - Infinite Loop) والبرنامج هيعلق!'},{type:"code",language:"python",text:`count = 0
while count < 5:  # طالما count أصغر من 5، كمل
    print(f"العداد حالياً: {count}")
    count += 1    # مهم جداً نغير قيمة count عشان الشرط ميفضلش True للأبد

print("خلصنا العد!")`},{type:"paragraph",text:"لو نسيت السطر بتاع `count += 1`، الـ `count` هتفضل بصفر على طول والشرط `count < 5` هيفضل `True` إلى ما لا نهاية."},{type:"subheading",text:"3. التحكم في الحلقات: `break` و `continue`:"},{type:"paragraph",text:"ساعات بنحتاج نتحكم في سير الحلقة بشكل أدق:"},{type:"list",text:"",items:["`break`: بتستخدم عشان تكسر الحلقة وتخرج منها فوراً، حتى لو شرط الحلقة لسه متحقق (في `while`) أو لسه فيه عناصر (في `for`).","`continue`: بتستخدم عشان تتجاهل باقي الأوامر اللي جوه اللفة الحالية من الحلقة، وتبدأ اللفة اللي بعدها على طول."]},{type:"code",language:"python",text:`# مثال على break
for i in range(10):
    if i == 5:
        print("لقينا 5، هنخرج من الحلقة!")
        break # اخرج من الحلقة فوراً
    print(i)

print("-" * 20)

# مثال على continue
for num in range(1, 6): # الأرقام من 1 لـ 5
    if num == 3:
        print("تجاهلنا رقم 3")
        continue # روح للفة الجاية على طول، متكملش اللي تحت
    print(f"الرقم هو: {num}")`},{type:"subheading",text:"4. جملة `else` مع الحلقات:"},{type:"paragraph",text:"بايثون فيها ميزة مش موجودة في لغات كتير، وهي إنك ممكن تستخدم جملة `else` مع حلقات `for` و `while`. الجزء بتاع `else` بيتنفذ فقط لو الحلقة خلصت بشكل طبيعي (يعني مخرجتش منها باستخدام `break`)."},{type:"code",language:"python",text:`for i in range(3):
    print(f"محاولة رقم {i}")
else:
    print("الحلقة خلصت بشكل طبيعي من غير break.")

print("-" * 20)

count = 0
while count < 3:
    print(f"العداد: {count}")
    count += 1
    # if count == 1: break # لو شيلت التعليق من هنا، الـ else مش هيتنفذ
else:
    print("حلقة while خلصت طبيعي.")`},{type:"paragraph",text:"حلقات التكرار من أقوى الأدوات في البرمجة. بتخليك تعمل حاجات معقدة بكمية كود قليلة. جرب تعمل بيها برامج صغيرة بتكرر مهام معينة!"}],quiz:[{id:"q_loop_1",text:"أي نوع من حلقات التكرار يُستخدم عادةً عندما تعرف مسبقًا عدد مرات التكرار المطلوبة؟",options:["while","for","if","repeat"],correctAnswerIndex:1,explanation:"حلقة `for` مناسبة للتكرار لعدد محدد من المرات أو للمرور على عناصر متتابعة."},{id:"q_loop_2",text:"ماذا ستطبع الدالة `range(3)` عند استخدامها في حلقة `for` (مثل `for i in range(3): print(i)`)؟",options:["1, 2, 3","0, 1, 2","0, 1, 2, 3","لن تطبع شيئًا"],correctAnswerIndex:1,explanation:"`range(n)` تولد أرقامًا من 0 حتى `n-1`."},{id:"q_loop_3",text:"ما هي وظيفة الكلمة المفتاحية `break` داخل حلقة التكرار؟",options:["توقف التنفيذ الحالي وتنتقل إلى التكرار التالي","تنهي حلقة التكرار فورًا وتنتقل إلى الكود الذي يلي الحلقة","تتسبب في حدوث خطأ","تعيد تشغيل الحلقة من البداية"],correctAnswerIndex:1,explanation:"`break` تستخدم للخروج من الحلقة بشكل كامل."},{id:"q_loop_4",text:"في حلقة `while condition: # code`، متى تتوقف الحلقة عن التكرار؟",options:["بعد عدد معين من التكرارات يتم تحديده تلقائيًا","عندما يصبح الشرط `condition` قيمته `False`","عندما يصبح الشرط `condition` قيمته `True`","لا تتوقف أبدًا"],correctAnswerIndex:1,explanation:"حلقة `while` تستمر في التكرار طالما كان الشرط `True`، وتتوقف عندما يصبح `False`."},{id:"q_loop_5",text:"ماذا تفعل الكلمة المفتاحية `continue` داخل حلقة التكرار؟",options:["تنهي حلقة التكرار فورًا","تتجاهل ما تبقى من الكود في التكرار الحالي وتنتقل إلى بداية التكرار التالي","توقف البرنامج بالكامل","تطبع رسالة خطأ"],correctAnswerIndex:1,explanation:"`continue` تتخطى بقية الأوامر في اللفة الحالية وتنتقل إلى اللفة التالية من الحلقة."},{id:"q_loop_6",text:"ماذا سيحدث إذا كان شرط حلقة `while` دائمًا `True` ولم يتغير أبدًا داخل الحلقة؟",options:["ستعمل الحلقة مرة واحدة فقط","لن تعمل الحلقة أبدًا","ستنشأ حلقة لا نهائية (Infinite Loop)","سيقوم بايثون بإيقافها تلقائيًا بعد فترة"],correctAnswerIndex:2,explanation:"إذا لم يتغير الشرط ليصبح `False`، ستستمر حلقة `while` في العمل بلا نهاية."},{id:"q_loop_7",text:"متى يتم تنفيذ الجزء الخاص بـ `else` في حلقة `for...else`؟",options:["دائمًا بعد انتهاء الحلقة","فقط إذا انتهت الحلقة بشكل طبيعي (بدون `break`)","فقط إذا تم استخدام `break` للخروج من الحلقة","فقط إذا كانت الحلقة فارغة ولم تنفذ أي تكرار"],correctAnswerIndex:1,explanation:"جملة `else` الملحقة بالحلقة تنفذ إذا أكملت الحلقة جميع تكراراتها دون أن يتم مقاطعتها بـ `break`."},{id:"q_loop_8",text:"ماذا ستكون قيمة `i` بعد انتهاء الحلقة التالية؟ `for i in range(5): pass`",options:["4","5","0","غير معرفة خارج الحلقة (حسب طريقة الاستخدام لكن عادة آخر قيمة)"],correctAnswerIndex:0,explanation:"المتغير `i` سيأخذ القيم 0, 1, 2, 3, 4. بعد انتهاء الحلقة، ستبقى `i` على آخر قيمة تم إسنادها إليها وهي 4 (في هذا السياق البسيط)."},{id:"q_loop_9",text:'للمرور على كل حرف في كلمة "Python"، أي حلقة هي الأنسب؟',options:['`while char != "n":`','`for char in "Python":`','`for i in range(len("Python")-1):`',"`while True:`"],correctAnswerIndex:1,explanation:"يمكن استخدام حلقة `for` مباشرة للمرور على عناصر سلسلة نصية (أو قائمة، أو tuple)."},{id:"q_loop_10",text:"الكود التالي `count = 5; while count > 0: print(count); # لا يوجد تحديث لـ count` ماذا سينتج؟",options:["يطبع 5 4 3 2 1","يطبع 5 فقط","لا يطبع شيئًا","حلقة لا نهائية تطبع 5 بشكل متكرر"],correctAnswerIndex:3,explanation:"بما أن قيمة `count` لا تتغير داخل الحلقة، فإن الشرط `count > 0` سيظل دائمًا `True`، مما يؤدي إلى حلقة لا نهائية."}]},{id:"l1-lesson-functions",slug:"functions-in-python",title:"الدوال (Functions)",description:"تعلم كيف تنظم الكود الخاص بك في وحدات قابلة لإعادة الاستخدام تسمى الدوال، وكيفية تمرير البيانات إليها والحصول على نتائج منها.",content:[{type:"heading",text:"الكود المنظم: الدوال (Functions)!"},{type:"paragraph",text:`تخيل إنك بتعمل كيكة، وفيه خطوات معينة بتكررها كل مرة زي خفق البيض أو تسخين الفرن. بدل ما تكتب الخطوات دي كل مرة في الوصفة، ممكن تعمل "وصفة فرعية" صغيرة اسمها "طريقة خفق البيض" وتستخدمها كل ما تحتاجها. الدوال في البرمجة نفس الفكرة! هي عبارة عن مجموعة من الأوامر بنجمعهم مع بعض تحت اسم واحد، عشان نقدر ننفذهم كلهم مرة واحدة عن طريق استدعاء الاسم ده بس. ده بيخلي الكود بتاعنا منظم أكتر، وسهل القراءة، وكمان بيقلل التكرار (مبدأ DRY: Don't Repeat Yourself - لا تكرر نفسك).`},{type:"subheading",text:"1. تعريف الدالة (Defining a Function):"},{type:"paragraph",text:"عشان تعمل دالة في بايثون، بتستخدم الكلمة المفتاحية `def` (اختصار لـ define) وبعدها اسم الدالة اللي بتختاره، وبعدين قوسين `()`، وبعدين نقطتين فوق بعض `:`."},{type:"paragraph",text:"الأوامر اللي جوه الدالة لازم تكون داخلة لجوه بمسافة بادئة (Indentation)، زي ما عملنا مع جمل `if` والحلقات."},{type:"code",language:"python",text:`def greet():  # تعريف دالة بسيطة اسمها greet
    print("أهلاً بك في Bod Code!")
    print("نتمنى لك يوماً سعيداً.")

# لحد هنا إحنا بس عرفنا الدالة، لكن منفذناش الأوامر اللي جواها.`},{type:"subheading",text:"2. استدعاء الدالة (Calling a Function):"},{type:"paragraph",text:'بعد ما عرفت الدالة، عشان تشغل الأوامر اللي جواها، لازم "تستدعيها" (Call it) عن طريق كتابة اسمها متبوعاً بالقوسين `()`.'},{type:"code",language:"python",text:`def say_hello():
    print("مرحباً!")

say_hello()  # هنا بنستدعي الدالة، فهيطبع "مرحباً!"
say_hello()  # ممكن نستدعيها أكتر من مرة`},{type:"subheading",text:"3. المعاملات (Parameters) والوسائط (Arguments):"},{type:"paragraph",text:'ساعات بنكون عايزين الدالة بتاعتنا تكون مرنة أكتر وتقدر تتعامل مع بيانات مختلفة كل مرة بنستدعيها فيها. هنا بتيجي فايدة "المعاملات" (Parameters). المعاملات دي عبارة عن متغيرات بنعرفها جوه القوسين `()` في تعريف الدالة. لما بنيجي نستدعي الدالة، بنمررلها قيم للمعاملات دي، والقيم دي بنسميها "وسائط" (Arguments).'},{type:"code",language:"python",text:`def greet_person(name): # name هنا هو المعامل (parameter)
    print(f"أهلاً يا {name}!")

greet_person("أحمد")    # "أحمد" هنا هو الوسيط (argument)
greet_person("سارة")    # "سارة" وسيط تاني

def add_numbers(x, y): # دالة بتاخد معاملين
    result = x + y
    print(f"مجموع {x} و {y} هو: {result}")

add_numbers(5, 3)       # 5 و 3 هما الوسائط
add_numbers(100, 200)`},{type:"subheading",text:"4. القيم المُرجعة (Return Values):"},{type:"paragraph",text:"مش كل الدوال بتطبع حاجة على الشاشة بس. ساعات بنكون عايزين الدالة تعمل عملية حسابية معينة وترجعلنا الناتج عشان نستخدمه في مكان تاني في الكود. هنا بنستخدم الكلمة المفتاحية `return`."},{type:"paragraph",text:"لما بايثون بيوصل لأمر `return` جوه دالة، الدالة بتخلص شغلها فوراً وبترجع القيمة اللي بعد `return` للمكان اللي تم استدعاء الدالة منه."},{type:"code",language:"python",text:`def multiply_numbers(a, b):
    product = a * b
    return product  # الدالة هترجع قيمة product

result1 = multiply_numbers(4, 5) # قيمة product (اللي هي 20) هتتخزن في result1
print(f"النتيجة الأولى: {result1}") # هيطبع 20

result2 = multiply_numbers(10, 2) + multiply_numbers(3, 3)
# multiply_numbers(10,2) هترجع 20
# multiply_numbers(3,3) هترجع 9
# result2 هتبقى 20 + 9 = 29
print(f"النتيجة الثانية: {result2}") # هيطبع 29

def is_adult(age):
    if age >= 18:
        return True
    else:
        return False

if is_adult(22):
    print("الشخص ده بالغ.")
else:
    print("الشخص ده قاصر.")`},{type:"paragraph",text:"لو الدالة موصلتش لأمر `return` (أو لو كان فيها `return` من غير قيمة بعدها)، هي بترجع قيمة خاصة اسمها `None` بشكل افتراضي."},{type:"subheading",text:"5. القيم الافتراضية للمعاملات (Default Parameter Values):"},{type:"paragraph",text:"ممكن ندي للمعاملات قيم افتراضية في تعريف الدالة. لو المستخدم مستدعاش الدالة ومررش قيمة للمعامل ده، بايثون هيستخدم القيمة الافتراضية."},{type:"code",language:"python",text:`def greet_with_message(name, message="أهلاً بك"): # message ليها قيمة افتراضية
    print(f"{message}, يا {name}!")

greet_with_message("علي") # هيستخدم القيمة الافتراضية لـ message
# الناتج: أهلاً بك, يا علي!

greet_with_message("فاطمة", "صباح الخير") # هنا مررنا قيمة لـ message
# الناتج: صباح الخير, يا فاطمة!`},{type:"subheading",text:"6. توثيق الدوال (Docstrings):"},{type:"paragraph",text:`من العادات الكويسة إنك تكتب "سلسلة توثيق" (Docstring) للدوال بتاعتك. دي عبارة عن نص متعدد الأسطر (بيتحط بين تلات علامات تنصيص مزدوجة \`""" """\` أو مفردة \`''' '''\`) بيكون أول حاجة بعد سطر تعريف الدالة. بيشرح الدالة دي بتعمل إيه، إيه المعاملات اللي بتاخدها، وإيه اللي بترجعه.`},{type:"code",language:"python",text:`def calculate_area(length, width):
    """
    تحسب مساحة مستطيل.

    Args:
        length (float or int): طول المستطيل.
        width (float or int): عرض المستطيل.

    Returns:
        float or int: مساحة المستطيل.
    """
    if length < 0 or width < 0:
        return "الأبعاد لا يمكن أن تكون سالبة"
    return length * width

# ممكن تطبع الـ docstring بتاع أي دالة باستخدام help() أو .__doc__
help(calculate_area)
print(calculate_area.__doc__)`},{type:"subheading",text:"نطاق المتغيرات (Variable Scope) - فكرة مبدئية:"},{type:"paragraph",text:'المتغيرات اللي بتتعرف جوه دالة (زي `product` في دالة `multiply_numbers`) بنسميها "متغيرات محلية" (Local Variables). دي بتكون مرئية ومعروفة جوه الدالة دي بس، ومش ممكن نستخدمها بره الدالة. المتغيرات اللي بتتعرف بره كل الدوال بنسميها "متغيرات عامة" (Global Variables) وممكن نستخدمها في أي مكان. (هنتكلم عن النطاق بالتفصيل أكتر بعدين).'},{type:"paragraph",text:"الدوال هي عصب البرمجة المنظمة. هتستخدمها في كل برامجك تقريباً. حاول تعمل دوال صغيرة بتعمل وظيفة واحدة محددة، ده هيخلي كودك أسهل في الفهم والصيانة!"}],quiz:[{id:"q_func_1",text:"ما هي الكلمة المفتاحية المستخدمة لتعريف دالة في بايثون؟",options:["function","def","define","fun"],correctAnswerIndex:1,explanation:"`def` هي الكلمة المفتاحية لتعريف الدوال."},{id:"q_func_2",text:"كيف يتم استدعاء دالة اسمها `my_function` لا تأخذ أي معاملات؟",options:["call my_function","my_function()","my_function","execute my_function()"],correctAnswerIndex:1,explanation:"يتم استدعاء الدالة بكتابة اسمها متبوعًا بقوسين `()`."},{id:"q_func_3",text:"ماذا تسمى القيم التي يتم تمريرها إلى الدالة عند استدعائها؟",options:["معاملات (Parameters)","وسائط (Arguments)","نتائج (Results)","متغيرات داخلية (Internal Variables)"],correctAnswerIndex:1,explanation:"القيم الفعلية التي تمررها للدالة عند الاستدعاء تسمى وسائط (Arguments)."},{id:"q_func_4",text:"ما هي الكلمة المفتاحية المستخدمة لإرجاع قيمة من الدالة؟",options:["give","send","return","output"],correctAnswerIndex:2,explanation:"`return` تستخدم لإرجاع قيمة من الدالة."},{id:"q_func_5",text:"إذا لم تحتوِ الدالة على جملة `return` صريحة، ماذا تُرجع بشكل افتراضي؟",options:["0","True","False","None"],correctAnswerIndex:3,explanation:"الدوال التي لا تحتوي على `return` أو تحتوي على `return` بدون قيمة، ترجع `None`."},{id:"q_func_6",text:'في تعريف الدالة `def greet(name="Guest"):`، ماذا يمثل `"Guest"`؟',options:["وسيط إجباري","قيمة افتراضية للمعامل name","نوع بيانات المعامل name","اسم آخر للدالة"],correctAnswerIndex:1,explanation:'`"Guest"` هي القيمة الافتراضية التي سيتم استخدامها للمعامل `name` إذا لم يتم تمرير وسيط له عند استدعاء الدالة.'},{id:"q_func_7",text:"ما هو الـ Docstring في سياق الدوال؟",options:["سلسلة نصية تستخدم لتوثيق وشرح عمل الدالة","نوع خاص من الأخطاء في الدوال","اسم بديل للدالة","متغير يتم إرجاعه تلقائيًا"],correctAnswerIndex:0,explanation:"الـ Docstring هو نص يوضع في بداية الدالة لشرح وظيفتها ومعاملاتها وما ترجعه."},{id:"q_func_8",text:"إذا تم تعريف متغير داخل دالة، هل يمكن الوصول إليه من خارج هذه الدالة مباشرة؟",options:["نعم، دائمًا","لا، المتغيرات المعرفة داخل الدوال تكون محلية (local) بشكل افتراضي","فقط إذا كان المتغير رقميًا","فقط إذا كانت الدالة ترجع هذا المتغير"],correctAnswerIndex:1,explanation:"المتغيرات المعرفة داخل الدالة لها نطاق محلي، أي لا يمكن الوصول إليها مباشرة من خارج الدالة."},{id:"q_func_9",text:'ماذا سيطبع الكود التالي؟ `def test(): print("A"); return "B"; print("C")\nresult = test()\nprint(result)`',options:["A B C B","A B","A C B","A"],correctAnswerIndex:1,explanation:'الدالة `test` ستطبع "A"، ثم عند `return "B"` ستتوقف وتعيد "B". `print("C")` لن يتم تنفيذها. `result` ستكون "B"، ثم يتم طباعة `result`.'},{id:"q_func_10",text:"ما الفائدة الرئيسية من استخدام الدوال في البرمجة؟",options:["جعل الكود أطول وأكثر تعقيدًا","تنظيم الكود، تقليل التكرار، وجعله قابل لإعادة الاستخدام","زيادة سرعة تنفيذ البرنامج بشكل كبير دائمًا","تشفير الكود لمنع سرقته"],correctAnswerIndex:1,explanation:"الدوال تساعد على تنظيم الكود، تجنب تكرار نفس الأوامر، وتسهيل صيانة وتحديث البرنامج."}]}],ve=({className:t="w-6 h-6"})=>e.jsx("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",strokeWidth:1.5,stroke:"currentColor",className:t,children:e.jsx("path",{strokeLinecap:"round",strokeLinejoin:"round",d:"M10.5 21l5.25-11.25L21 21m-9-3h7.5M3 5.621a48.474 48.474 0 016-.371m0 0c1.12 0 2.233.038 3.334.114M9 5.25V3m3.334 2.364C11.176 10.658 7.69 15.08 3 17.502m9.334-12.138c.896.061 1.785.147 2.666.257m-4.589 8.495a18.023 18.023 0 01-3.827-5.802"})}),ae=({className:t="w-6 h-6"})=>e.jsx("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",strokeWidth:1.5,stroke:"currentColor",className:t,children:e.jsx("path",{strokeLinecap:"round",strokeLinejoin:"round",d:"M9.813 15.904L9 18.75l-.813-2.846a4.5 4.5 0 00-3.09-3.09L1.25 12l2.846-.813a4.5 4.5 0 003.09-3.09L9 5.25l.813 2.846a4.5 4.5 0 003.09 3.09L15.75 12l-2.846.813a4.5 4.5 0 00-3.09 3.09zM18.25 12L17 13.75M17 13.75L15.75 15M17 13.75L18.25 15M17 13.75L15.75 12m6.5-6.5L21.25 7M21.25 7L20 5.5M21.25 7l1.25-1.5M21.25 7L20 8.5"})}),se=({className:t="w-6 h-6"})=>e.jsx("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",strokeWidth:1.5,stroke:"currentColor",className:t,children:e.jsx("path",{strokeLinecap:"round",strokeLinejoin:"round",d:"M12 6.042A8.967 8.967 0 006 3.75c-1.052 0-2.062.18-3 .512v14.25A8.987 8.987 0 016 18c2.305 0 4.408.867 6 2.292m0-14.25a8.966 8.966 0 016-2.292c1.052 0 2.062.18 3 .512v14.25A8.987 8.987 0 0018 18a8.967 8.967 0 00-6 2.292m0-14.25v14.25"})}),ie=({className:t="w-6 h-6"})=>e.jsx("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",strokeWidth:1.5,stroke:"currentColor",className:t,children:e.jsx("path",{strokeLinecap:"round",strokeLinejoin:"round",d:"M15 19.128a9.38 9.38 0 002.625.372 9.337 9.337 0 004.121-.952 4.125 4.125 0 00-7.533-2.493M15 19.128v-.003c0-1.113-.285-2.16-.786-3.07M15 19.128v.106A12.318 12.318 0 018.624 21c-2.331 0-4.512-.645-6.374-1.766l-.001-.109a6.375 6.375 0 0111.964-3.07M12 6.375a3.375 3.375 0 11-6.75 0 3.375 3.375 0 016.75 0zm8.25 2.25a2.625 2.625 0 11-5.25 0 2.625 2.625 0 015.25 0z"})}),Ie=({className:t="w-6 h-6"})=>e.jsx("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",strokeWidth:1.5,stroke:"currentColor",className:t,children:e.jsx("path",{strokeLinecap:"round",strokeLinejoin:"round",d:"M12 7.5h1.5m-1.5 3h1.5m-7.5 3h7.5m-7.5 3h7.5m3-9h3.375c.621 0 1.125.504 1.125 1.125V18a2.25 2.25 0 01-2.25 2.25H5.25A2.25 2.25 0 013 18V7.875c0-.621.504-1.125 1.125-1.125H6.75M12 7.5V9m0 3V9m0 3v2.25m0 3v-2.25m0 0V15m0-6.75V9m0 3h.008v.008H12v-.008zm0 3h.008v.008H12v-.008zm0 3h.008v.008H12v-.008z"})}),oe=({className:t})=>e.jsx("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 20 20",fill:"currentColor",className:t,children:e.jsx("path",{d:"M10.5 2a.5.5 0 00-1 0v1.336a3.002 3.002 0 00-2.14 1.018l-.002.002-.002.002A3.002 3.002 0 004 6.85V10a2 2 0 002 2h8a2 2 0 002-2V6.85a3.002 3.002 0 00-2.356-2.494l-.002-.002-.002-.002A3.002 3.002 0 0010.5 3.336V2zM4.432 4.908A4.5 4.5 0 0110 3.5c1.912 0 3.599.941 4.568 2.408L10 8.216 4.432 4.908zM15 10.5a.5.5 0 01-.5.5h-9a.5.5 0 01-.5-.5V8.21a.5.5 0 01.276-.447l4.5-2.25a.5.5 0 01.448 0l4.5 2.25a.5.5 0 01.276.447v2.29zM13 13.5a1 1 0 100-2H7a1 1 0 100 2h6z"})}),je=({className:t})=>e.jsx("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 20 20",fill:"currentColor",className:t,children:e.jsx("path",{fillRule:"evenodd",d:"M2 4a1 1 0 011-1h14a1 1 0 110 2H3a1 1 0 01-1-1zm0 4a1 1 0 011-1h14a1 1 0 110 2H3a1 1 0 01-1-1zm0 4a1 1 0 011-1h14a1 1 0 110 2H3a1 1 0 01-1-1zm3 4a1 1 0 011-1h8a1 1 0 110 2H7a1 1 0 01-1-1z",clipRule:"evenodd"})}),G=[`ابدأ رحلتك في عالم الأكواد مع ${N}!`,"كل سطر كود تكتبه هو خطوة نحو الإبداع.","لا تخف من الأخطاء، فهي جزء أساسي من التعلم.","بايثون هي بوابتك لعالم مليء بالاحتمالات اللانهائية.",`${N}، البرمجة أصبحت أسهل وأكثر متعة.`,"استمر في التعلم، استمر في النمو، استمر في الإبداع.","العالم يحتاج إلى مبرمجين مثلك!","حول أفكارك إلى واقع ملموس مع قوة البرمجة.","الكود هو لغة المستقبل، ابدأ في تعلمها اليوم.",`${N}: طريقك المختصر لاحتراف بايثون باللغة العربية.`],ke=70,Ae=40,Se=2e3,Ne=300,K=[{id:"wf1",icon:ve,title:"تعلم بالعربية المصرية",description:"محتوى مُعد خصيصًا باللهجة المصرية لتسهيل الفهم والاستيعاب لمتحدثي العربية كلغة أم. وداعاً لعناء ترجمة المصطلحات!"},{id:"wf2",icon:ae,title:"دروس تفاعلية واختبارات",description:"دروس مشروحة بطريقة مبسطة مع اختبارات تفاعلية بعد كل درس لقياس مدى فهمك وتثبيت المعلومة. تعلم بالممارسة!"},{id:"wf3",icon:D,title:"ساحة أكواد متكاملة",description:"جرب كتابة أكواد بايثون مباشرة في متصفحك وشاهد النتائج الفورية مع شرح من الذكاء الاصطناعي. لا حاجة لتثبيت أي برامج."},{id:"wf4",icon:oe,title:"خطة تعلم منظمة",description:"منهج تعليمي متدرج يأخذك من مستوى المبتدئين خطوة بخطوة حتى تصل إلى مفاهيم متقدمة. تقدم بثقة في رحلتك البرمجية."}],Y=re.slice(0,3).map(t=>({id:t.id,slug:t.slug,levelSlug:"beginner",icon:se,title:t.title,description:t.description.substring(0,100)+"..."})),X=[{id:"t1",name:"أحمد خالد",avatarText:"أخ",quote:`"${N} ساعدني أفهم بايثون بسهولة وبطريقة ممتعة جداً. الشرح باللهجة المصرية كان ممتاز!"`},{id:"t2",name:"سارة علي",avatarText:"سع",quote:'"أخيراً لقيت مكان أتعلم فيه برمجة بالعربي وبأسلوب مبسط. ساحة الأكواد فكرة عبقرية!"'},{id:"t3",name:"محمد فتحي",avatarText:"مف",quote:`"خطة التعلم والاختبارات ساعدتني أتابع تقدمي وأعرف نقاط ضعفي. شكراً ${N}."`}],ee=[{id:"n1",icon:ae,title:"إطلاق المستوى المتقدم الجديد!",description:"يسرنا الإعلان عن إضافة دروس المستوى المتقدم لتغطية مفاهيم احترافية في بايثون. اكتشفها الآن!"},{id:"n2",icon:ie,title:"انضم إلى مجتمعنا على Discord",description:`تم إطلاق سيرفر Discord الخاص بـ ${N} للتواصل مع المتعلمين الآخرين وطرح الأسئلة. انضم إلينا!`},{id:"n3",icon:D,title:"تحديثات جديدة في ساحة الأكواد",description:"تم تحسين أداء ساحة الأكواد وإضافة دعم لمزيد من المكتبات. جربها اليوم واكتشف الجديد!"}],H=(t,r,i=50,s=2e5,o=100)=>{var h;const[n,l]=u.useState(0),[p,m]=u.useState({}),[c,_]=u.useState({});return u.useEffect(()=>{if(!t.length||t.length===0)return;const f=t[n];if(!f||!f.id)return;const y=f[r]||"",b=p[f.id]||"";if(c[f.id]||b.length===y.length){if(b.length===y.length&&!c[f.id]&&(m(a=>({...a,[f.id]:y})),_(a=>({...a,[f.id]:!0}))),c[f.id]&&n<t.length-1){const a=setTimeout(()=>{l(g=>g+1)},o);return()=>clearTimeout(a)}return}const v=setTimeout(()=>{m(a=>{var g;return{...a,[f.id]:y.substring(0,(((g=a[f.id])==null?void 0:g.length)||0)+1)}})},i);return()=>clearTimeout(v)},[p,n,t,r,i,s,o,c]),{typedTexts:p,currentItemId:(h=t[n])==null?void 0:h.id}},Te=()=>{const t="w-full sm:w-auto font-bold py-3.5 px-8 rounded-lg text-lg transition-all duration-300 ease-in-out transform hover:scale-105 shadow-lg hover:shadow-xl focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-900 flex items-center justify-center space-x-3 rtl:space-x-reverse",[r,i]=u.useState(0),[s,o]=u.useState(""),[n,l]=u.useState(!1);u.useEffect(()=>{let a;const g=G[r];return n?s.length>0?a=window.setTimeout(()=>{o(g.substring(0,s.length-1))},Ae):(l(!1),a=window.setTimeout(()=>{i(M=>(M+1)%G.length)},Ne)):s.length<g.length?a=window.setTimeout(()=>{o(g.substring(0,s.length+1))},ke):a=window.setTimeout(()=>{l(!0)},Se),()=>window.clearTimeout(a)},[s,n,r]);const{typedTexts:p,currentItemId:m}=H(K,"description"),{typedTexts:c,currentItemId:_}=H(Y,"description"),{typedTexts:h,currentItemId:f}=H(X,"quote"),{typedTexts:y,currentItemId:b}=H(ee,"description"),v=({title:a,icon:g})=>e.jsxs("div",{className:"flex items-center justify-center mb-8 sm:mb-10",children:[g&&e.jsx(g,{className:"w-8 h-8 sm:w-10 sm:h-10 text-sky-400 mr-3 rtl:ml-3 rtl:mr-0"}),e.jsx("h2",{className:"text-3xl sm:text-4xl font-bold text-sky-400 text-center",children:a})]});return e.jsxs("div",{className:"text-center py-12 sm:py-16",children:[e.jsxs("div",{className:"animate-fadeInUpSlight mb-16 sm:mb-20",children:[e.jsx(V,{className:"w-28 h-28 sm:w-32 sm:h-32 text-sky-400 mx-auto mb-6 transition-all duration-500 ease-in-out hover:animate-pulse hover:drop-shadow-[0_0_15px_rgba(56,189,248,0.5)]"}),e.jsxs("h1",{className:"text-4xl sm:text-5xl font-bold text-sky-400 mb-4",children:["أهلاً بك في ",N,"!"]}),e.jsx("p",{className:"text-lg sm:text-xl text-gray-400 mb-6 max-w-3xl mx-auto leading-relaxed",children:"منصتك الشاملة والمبسطة لتعلم لغة بايثون باللهجة المصرية، من الصفر وحتى الاحتراف، مع تطبيقات عملية ومشاريع ممتعة."})]}),e.jsx("div",{className:"min-h-[60px] sm:min-h-[70px] mb-10 sm:mb-12 flex items-center justify-center animate-fadeInUpSlight animation-delay-200",children:e.jsxs("p",{className:"text-xl sm:text-2xl text-teal-300 font-mono tracking-wide",children:[e.jsx("span",{className:"inline-block min-h-[1.5em]",children:s}),s!==G[r]&&!n||n&&s.length>0?e.jsx("span",{className:"blinking-cursor"}):e.jsx("span",{className:"blinking-cursor opacity-0"})]})}),e.jsxs("div",{className:"space-y-4 sm:space-y-0 sm:space-x-4 rtl:sm:space-x-reverse flex flex-col sm:flex-row justify-center items-center animate-fadeInUpSlight animation-delay-400 mb-20 sm:mb-24",children:[e.jsxs(S,{to:d.LEARNING_PLAN,className:`${t} bg-sky-500 hover:bg-sky-400 text-white focus:ring-sky-400`,children:[e.jsx(oe,{className:"w-6 h-6"}),e.jsx("span",{children:"ابدأ خطة التعلم"})]}),e.jsxs(S,{to:d.CURRICULUM,className:`${t} bg-slate-700 hover:bg-slate-600 text-gray-100 focus:ring-slate-500`,children:[e.jsx(je,{className:"w-6 h-6"}),e.jsx("span",{children:"تصفح كل الدروس"})]})]}),e.jsxs("section",{className:"py-12 sm:py-16 bg-slate-800/30 rounded-xl shadow-xl mb-16 sm:mb-20 animate-fadeInUpSlight animation-delay-600","aria-labelledby":"why-choose-us-title",children:[e.jsx(v,{title:`لماذا تختار ${N}؟`,icon:ne}),e.jsx("div",{className:"grid grid-cols-1 md:grid-cols-2 gap-6 sm:gap-8 px-4 sm:px-8",children:K.map(a=>{var g;return e.jsxs("div",{className:"bg-slate-700/60 p-6 rounded-lg shadow-lg border border-slate-600/70 transition-all duration-300 hover:shadow-sky-500/20 hover:border-sky-500/50 hover:-translate-y-1",children:[e.jsx(a.icon,{className:"w-10 h-10 text-sky-400 mx-auto mb-4"}),e.jsx("h3",{className:"text-xl font-semibold text-sky-300 mb-2 text-center",children:a.title}),e.jsxs("p",{className:"text-sm text-gray-300 leading-relaxed min-h-[4.5em]",children:[p[a.id]||"",a.id===m&&(((g=p[a.id])==null?void 0:g.length)||0)<a.description.length&&e.jsx("span",{className:"blinking-cursor"})]})]},a.id)})})]}),e.jsxs("section",{className:"py-12 sm:py-16 mb-16 sm:mb-20 animate-fadeInUpSlight animation-delay-800","aria-labelledby":"featured-lessons-title",children:[e.jsx(v,{title:"ابدأ رحلتك من هنا",icon:se}),e.jsx("div",{className:"grid grid-cols-1 md:grid-cols-3 gap-6 sm:gap-8 px-4 sm:px-8",children:Y.map(a=>{var g;return e.jsxs("div",{className:"bg-slate-800/70 p-6 rounded-xl shadow-lg border border-slate-700/80 transition-all duration-300 hover:shadow-teal-500/20 hover:border-teal-500/60 hover:scale-105 flex flex-col",children:[e.jsx(a.icon,{className:"w-10 h-10 text-teal-400 mx-auto mb-4"}),e.jsx("h3",{className:"text-xl font-semibold text-teal-300 mb-2 text-center flex-grow",children:a.title}),e.jsxs("p",{className:"text-sm text-gray-400 leading-relaxed mb-4 min-h-[4em] flex-grow",children:[c[a.id]||"",a.id===_&&(((g=c[a.id])==null?void 0:g.length)||0)<a.description.length&&e.jsx("span",{className:"blinking-cursor"})]}),e.jsx(S,{to:d.LESSON_DETAILS.replace(":levelSlug",a.levelSlug).replace(":lessonSlug",a.slug),className:"mt-auto w-full bg-teal-500 hover:bg-teal-400 text-white font-medium py-2.5 px-4 rounded-md text-sm transition-all duration-300 ease-in-out transform hover:scale-105 shadow-md hover:shadow-lg focus:outline-none focus:ring-2 focus:ring-teal-400 focus:ring-offset-2 focus:ring-offset-gray-900",children:"ابدأ الدرس"})]},a.id)})})]}),e.jsxs("section",{className:"py-12 sm:py-16 bg-slate-800/30 rounded-xl shadow-xl mb-16 sm:mb-20 animate-fadeInUpSlight animation-delay-1000","aria-labelledby":"testimonials-title",children:[e.jsx(v,{title:"ماذا يقول طلابنا؟",icon:ie}),e.jsx("div",{className:"grid grid-cols-1 md:grid-cols-3 gap-6 sm:gap-8 px-4 sm:px-8",children:X.map(a=>{var g;return e.jsxs("div",{className:"bg-slate-700/60 p-6 rounded-lg shadow-lg border border-slate-600/70 text-center",children:[e.jsx("div",{className:"w-16 h-16 rounded-full bg-sky-500 text-white flex items-center justify-center text-2xl font-bold mx-auto mb-4 shadow-md",children:a.avatarText}),e.jsxs("p",{className:"text-md text-gray-300 italic mb-3 min-h-[5em]",children:[h[a.id]||"",a.id===f&&(((g=h[a.id])==null?void 0:g.length)||0)<a.quote.length&&e.jsx("span",{className:"blinking-cursor"})]}),e.jsxs("p",{className:"text-sm font-semibold text-sky-400",children:["- ",a.name]})]},a.id)})})]}),e.jsxs("section",{className:"py-12 sm:py-16 animate-fadeInUpSlight animation-delay-1200","aria-labelledby":"news-title",children:[e.jsx(v,{title:"آخر الأخبار والتحديثات",icon:Ie}),e.jsx("div",{className:"space-y-6 px-4 sm:px-8 max-w-3xl mx-auto",children:ee.map(a=>{var g;return e.jsxs("div",{className:"bg-slate-800/70 p-5 rounded-lg shadow-lg border border-slate-700/80 flex items-start space-x-4 rtl:space-x-reverse hover:bg-slate-700/80 transition-colors duration-200",children:[e.jsx(a.icon,{className:"w-8 h-8 text-teal-400 mt-1 flex-shrink-0"}),e.jsxs("div",{children:[e.jsx("h3",{className:"text-lg font-semibold text-teal-300 mb-1",children:a.title}),e.jsxs("p",{className:"text-sm text-gray-400 leading-relaxed min-h-[2.5em]",children:[y[a.id]||"",a.id===b&&(((g=y[a.id])==null?void 0:g.length)||0)<a.description.length&&e.jsx("span",{className:"blinking-cursor"})]})]})]},a.id)})})]})]})},L=({items:t})=>e.jsx("nav",{"aria-label":"Breadcrumb",className:"mb-6 text-sm text-gray-400",children:e.jsx("ol",{className:"flex space-x-2 rtl:space-x-reverse",children:t.map((r,i)=>e.jsxs("li",{className:"flex items-center",children:[r.path?e.jsx(S,{to:r.path,className:"hover:text-sky-400 transition-colors",children:r.label}):e.jsx("span",{className:"text-gray-200",children:r.label}),i<t.length-1&&e.jsx("svg",{xmlns:"http://www.w3.org/2000/svg",className:"h-4 w-4 mx-1 rtl:hidden",fill:"none",viewBox:"0 0 24 24",stroke:"currentColor",children:e.jsx("path",{strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"2",d:"M9 5l7 7-7 7"})}),i<t.length-1&&e.jsx("svg",{xmlns:"http://www.w3.org/2000/svg",className:"h-4 w-4 mx-1 ltr:hidden",fill:"none",viewBox:"0 0 24 24",stroke:"currentColor",children:e.jsx("path",{strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"2",d:"M15 19l-7-7 7-7"})})]},i))})}),$=({className:t="w-5 h-5"})=>e.jsx("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 20 20",fill:"currentColor",className:t,children:e.jsx("path",{fillRule:"evenodd",d:"M10 1a4.5 4.5 0 00-4.5 4.5V9H5a2 2 0 00-2 2v6a2 2 0 002 2h10a2 2 0 002-2v-6a2 2 0 00-2-2h-.5V5.5A4.5 4.5 0 0010 1zm3 8V5.5a3 3 0 10-6 0V9h6z",clipRule:"evenodd"})}),le=({className:t="w-5 h-5"})=>e.jsx("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 20 20",fill:"currentColor",className:t,children:e.jsx("path",{fillRule:"evenodd",d:"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z",clipRule:"evenodd"})}),pe="bodCodeCompletedLessons",de=()=>{const t=localStorage.getItem(pe);return t?JSON.parse(t):[]},Ee=t=>{const r=de();r.includes(t)||(r.push(t),localStorage.setItem(pe,JSON.stringify(r)))},W=(t,r)=>r.includes(t),U=(t,r,i,s)=>{const o=i.findIndex(p=>p.slug===t);if(o===-1)return!1;const n=i[o],l=n.lessons.findIndex(p=>p.slug===r);if(l===-1)return!1;if(o===0&&l===0)return!0;if(l===0&&o>0)return i[o-1].lessons.every(m=>s.includes(m.slug));if(l>0){const p=n.lessons[l-1];return s.includes(p.slug)}return!1},ce=({step:t,level:r,levels:i,completedLessons:s})=>{var v;const[o,n]=u.useState(r<1),l=J(),p=r===0,m=t.subSteps&&t.subSteps.length>0;let c=!0,_=!1,h;if(t.relatedLessonSlug&&t.relatedLevelSlug)h=d.LESSON_DETAILS.replace(":levelSlug",t.relatedLevelSlug).replace(":lessonSlug",t.relatedLessonSlug),c=U(t.relatedLevelSlug,t.relatedLessonSlug,i,s),_=W(t.relatedLessonSlug,s);else if(m){const a=((v=t.subSteps)==null?void 0:v.filter(g=>g.relatedLessonSlug&&g.relatedLevelSlug))||[];a.length>0&&(_=a.every(g=>W(g.relatedLessonSlug,s)),c=a.some(g=>U(g.relatedLevelSlug,g.relatedLessonSlug,i,s)))}const f=()=>{h&&c?l(h):m&&n(!o)},y="p-4 rounded-lg shadow-lg transition-all duration-300 ease-in-out",b=c&&(m||h)?"cursor-pointer bg-slate-800/80 hover:bg-slate-700/90 border border-slate-700/70 hover:border-sky-500/80 hover:shadow-sky-500/10 focus-within:ring-2 focus-within:ring-sky-500 focus-within:ring-offset-2 focus-within:ring-offset-gray-900":"bg-slate-800/50 border border-slate-700/50 opacity-70 cursor-not-allowed";return e.jsxs("div",{className:`my-2.5 ${r>0?"mr-3 rtl:ml-3 rtl:mr-0":""}`,children:[e.jsxs("div",{className:`${y} ${b}`,onClick:f,role:c&&(m||h)?"button":"listitem","aria-expanded":m?o:void 0,"aria-disabled":!c,tabIndex:c&&(m||h)?0:-1,onKeyDown:a=>{c&&(a.key==="Enter"||a.key===" ")&&(m||h)&&(a.preventDefault(),f())},children:[e.jsxs("div",{className:"flex justify-between items-center",children:[e.jsxs("div",{className:"flex items-center",children:[_&&h&&e.jsx(le,{className:"w-5 h-5 text-green-400 ml-2 rtl:mr-2 rtl:ml-0 flex-shrink-0"}),!c&&h&&e.jsx($,{className:"w-5 h-5 text-yellow-500 ml-2 rtl:mr-2 rtl:ml-0 flex-shrink-0"}),c&&h&&!_&&e.jsx(D,{className:"w-5 h-5 text-sky-400 ml-2 rtl:mr-2 rtl:ml-0 flex-shrink-0"}),e.jsx("h3",{className:`text-lg font-semibold ${h&&c?"text-sky-400 group-hover:text-sky-300":c?"text-gray-100":"text-gray-500"}`,children:t.title})]}),m&&e.jsx("svg",{xmlns:"http://www.w3.org/2000/svg",className:`h-5 w-5 transform transition-transform duration-300 ease-out ${o?"rotate-90":"rotate-0"} ${c?"text-sky-400":"text-gray-600"}`,fill:"none",viewBox:"0 0 24 24",stroke:"currentColor",strokeWidth:"2.5",children:e.jsx("path",{strokeLinecap:"round",strokeLinejoin:"round",d:"M9 5l7 7-7 7"})})]}),e.jsx("p",{className:`text-sm mt-1.5 pr-1 rtl:pl-1 ${c?"text-gray-400":"text-gray-500"}`,children:t.description}),h&&c&&!m&&e.jsx("p",{className:"text-xs text-sky-500 hover:text-sky-400 mt-2.5",children:"🔗 الانتقال إلى الدرس"})]}),o&&t.subSteps&&e.jsx("div",{className:`mt-2 ${r>0?"pl-3 rtl:pr-3":"pl-1.5 rtl:pr-1.5"} border-l-2 rtl:border-r-2 rtl:border-l-0 ${c||p?"border-sky-600/70":"border-gray-600/70"}`,children:t.subSteps.map(a=>e.jsx(ce,{step:a,level:r+1,levels:i,completedLessons:s},a.id))})]})},Le=({learningPlan:t,levels:r,completedLessons:i})=>{const s=[{label:"الرئيسية",path:d.HOME},{label:"خطة التعلم"}];return e.jsxs("div",{className:"max-w-4xl mx-auto",children:[e.jsx(L,{items:s}),e.jsx("h1",{className:"text-4xl font-bold text-sky-400 mb-6 text-center",children:"خطة تعلم بايثون الشاملة"}),e.jsx("p",{className:"text-lg text-gray-300 mb-10 text-center max-w-3xl mx-auto",children:"اتبع هذه الخطة المنظمة خطوة بخطوة لتتقن لغة بايثون من الأساسيات وحتى المفاهيم المتقدمة. كل خطوة مصممة لتبني على ما قبلها."}),e.jsx("div",{className:"space-y-1",children:t.map(o=>e.jsx(ce,{step:o,level:0,levels:r,completedLessons:i},o.id))})]})},Ce=({levels:t})=>{const r=[{label:"الرئيسية",path:d.HOME},{label:"الدروس"}];return e.jsxs("div",{children:[e.jsx(L,{items:r}),e.jsx("h1",{className:"text-4xl font-bold text-sky-400 mb-8 text-center",children:"مناهج تعلم بايثون"}),e.jsx("p",{className:"text-lg text-gray-300 mb-10 text-center max-w-2xl mx-auto",children:"اختر المستوى الذي يناسبك وابدأ رحلتك في تعلم بايثون. كل مستوى يحتوي على مجموعة من الدروس والاختبارات المصممة بعناية."}),e.jsx("div",{className:"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 sm:gap-8",children:t.map(i=>e.jsxs(S,{to:d.LEVEL_DETAILS.replace(":levelSlug",i.slug),className:`block p-6 bg-slate-800/80 rounded-xl shadow-lg hover:shadow-xl hover:shadow-sky-500/20 hover:bg-slate-700/90 
                       transition-all duration-300 ease-in-out transform hover:-translate-y-1.5 
                       border border-slate-700/80 hover:border-sky-500/70 
                       focus:outline-none focus:ring-2 focus:ring-sky-500 focus:ring-opacity-75 focus:ring-offset-2 focus:ring-offset-gray-900`,children:[e.jsx("div",{className:"flex items-center justify-center mb-5 h-16",children:i.icon?O.cloneElement(i.icon,{className:"w-16 h-16 transition-transform duration-300 group-hover:scale-110"}):e.jsx("div",{className:"w-16 h-16 bg-sky-500/30 rounded-full flex items-center justify-center text-sky-400 text-3xl",children:"?"})}),e.jsx("h2",{className:"text-2xl font-semibold text-sky-400 mb-3 text-center group-hover:text-sky-300 transition-colors duration-300",children:i.title}),e.jsx("p",{className:"text-gray-400 text-center text-sm leading-relaxed",children:i.description})]},i.id))})]})},qe=({levels:t,completedLessons:r})=>{const{levelSlug:i}=Q(),s=t.find(n=>n.slug===i);if(!s)return e.jsx(F,{to:d.CURRICULUM,replace:!0});const o=[{label:"الرئيسية",path:d.HOME},{label:"الدروس",path:d.CURRICULUM},{label:s.title}];return e.jsxs("div",{children:[e.jsx(L,{items:o}),e.jsxs("div",{className:"text-center mb-12",children:[s.icon&&e.jsx("div",{className:"flex justify-center mb-4 h-24",children:O.cloneElement(s.icon,{className:"w-20 h-20 sm:w-24 sm:h-24 drop-shadow-[0_0_10px_rgba(56,189,248,0.4)]"})}),e.jsx("h1",{className:"text-4xl sm:text-5xl font-bold text-sky-400 mb-4",children:s.title}),e.jsx("p",{className:"text-lg text-gray-300 max-w-xl mx-auto",children:s.description})]}),e.jsx("div",{className:"space-y-5",children:s.lessons.map((n,l)=>{const p=U(s.slug,n.slug,t,r),m=W(n.slug,r),c=e.jsx("div",{className:`block p-5 sm:p-6 rounded-lg shadow-lg transition-all duration-300 ease-in-out group border 
                         ${p?"bg-slate-800/80 hover:bg-slate-700/90 border-slate-700/80 hover:border-sky-500/70 hover:shadow-sky-500/10 focus:outline-none focus:ring-2 focus:ring-sky-500 focus:ring-opacity-60 focus:ring-offset-2 focus:ring-offset-gray-900":"bg-slate-800/50 border-slate-700/50 opacity-60 cursor-not-allowed"}`,children:e.jsxs("div",{className:"flex items-center justify-between",children:[e.jsxs("div",{className:"flex-grow",children:[e.jsxs("h3",{className:`text-xl font-semibold mb-1.5 transition-colors duration-300 ${p?"text-sky-400 group-hover:text-sky-300":"text-gray-500"}`,children:["الدرس ",l+1,": ",n.title]}),e.jsx("p",{className:`text-sm ${p?"text-gray-400":"text-gray-500"}`,children:n.description})]}),e.jsxs("div",{className:"flex items-center flex-shrink-0 ml-4 rtl:mr-4 rtl:ml-0",children:[m&&e.jsx(le,{className:"w-6 h-6 text-green-400 mr-2 rtl:ml-2 rtl:mr-0"}),!p&&e.jsx($,{className:"w-6 h-6 text-yellow-500"}),p&&!m&&e.jsxs("span",{className:"text-sky-400 transform transition-all duration-300 group-hover:text-sky-300 group-hover:translate-x-1 rtl:group-hover:-translate-x-1 flex items-center group-hover:scale-105",children:["ابدأ الدرس",e.jsx("svg",{xmlns:"http://www.w3.org/2000/svg",className:"h-5 w-5 ml-1.5 rtl:mr-1.5 rtl:ml-0 rtl:rotate-180",fill:"none",viewBox:"0 0 24 24",stroke:"currentColor",strokeWidth:"2",children:e.jsx("path",{strokeLinecap:"round",strokeLinejoin:"round",d:"M13 7l5 5m0 0l-5 5m5-5H6"})})]})]})]})});return p?e.jsx(S,{to:d.LESSON_DETAILS.replace(":levelSlug",s.slug).replace(":lessonSlug",n.slug),"aria-label":`الانتقال إلى درس ${n.title}`,children:c},n.id):e.jsx("div",{"aria-label":`درس ${n.title} (مقفل)`,children:c},n.id)})}),s.lessons.length===0&&e.jsx("p",{className:"text-center text-gray-400 text-lg mt-10 bg-slate-800/70 p-6 rounded-lg shadow-md border border-slate-700/80",children:"لا توجد دروس متاحة في هذا المستوى حاليًا. نعمل على إضافتها قريبًا، تابعنا!"})]})},Pe=({code:t,language:r="python"})=>{const[i,s]=O.useState(!1),o=()=>{navigator.clipboard.writeText(t).then(()=>{s(!0),setTimeout(()=>s(!1),2e3)})};return e.jsxs("div",{className:"bg-slate-800/70 rounded-xl shadow-lg my-6 relative group border border-slate-700/80",children:[e.jsxs("div",{className:"bg-slate-700/80 px-4 py-2 rounded-t-xl flex justify-between items-center border-b border-slate-600/70",children:[e.jsx("span",{className:"text-xs text-gray-300 font-mono select-none",children:r}),e.jsx("button",{onClick:o,className:`text-xs font-medium px-3 py-1.5 rounded-md transition-all duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-slate-700
            ${i?"bg-green-500 text-white hover:bg-green-600 focus:ring-green-400 shadow-md":"bg-sky-600 text-gray-100 hover:bg-sky-500 focus:ring-sky-400 hover:shadow-md"}`,"aria-label":i?"تم نسخ الكود":"نسخ الكود",children:i?"تم النسخ!":"نسخ"})]}),e.jsx("pre",{className:"p-4 overflow-x-auto bg-gray-900/80 rounded-b-xl",children:e.jsx("code",{className:`language-${r} text-sm text-gray-200 block whitespace-pre-wrap`,children:t.trim()})})]})},Re=(t,r)=>{var i;switch(t.type){case"heading":return e.jsx("h2",{className:"text-3xl font-semibold text-sky-300 mt-10 mb-5 border-b border-slate-700/80 pb-3",children:t.text},r);case"subheading":return e.jsx("h3",{className:"text-2xl font-semibold text-sky-400 mt-8 mb-4",children:t.text},r);case"paragraph":return e.jsx("p",{className:"text-gray-300 leading-relaxed my-4 text-lg whitespace-pre-line",children:t.text},r);case"code":return e.jsx(Pe,{code:t.text,language:t.language||"python"},r);case"list":return e.jsxs("div",{className:"my-5",children:[t.text&&e.jsx("p",{className:"text-lg text-gray-200 mb-2 font-medium",children:t.text}),e.jsx("ul",{className:"list-disc list-inside text-gray-300 pl-6 rtl:pr-6 space-y-2 text-lg",children:(i=t.items)==null?void 0:i.map((s,o)=>e.jsx("li",{className:"leading-relaxed",children:s},o))})]},r);default:return null}},Oe=({levels:t,completedLessons:r})=>{const{levelSlug:i,lessonSlug:s}=Q(),o=J(),n=t.find(_=>_.slug===i),l=n==null?void 0:n.lessons.find(_=>_.slug===s);if(!n||!l)return e.jsx(F,{to:d.CURRICULUM,replace:!0});const p=U(n.slug,l.slug,t,r),m=[{label:"الرئيسية",path:d.HOME},{label:"الدروس",path:d.CURRICULUM},{label:n.title,path:d.LEVEL_DETAILS.replace(":levelSlug",n.slug)},{label:l.title}];if(!p)return e.jsxs("div",{children:[e.jsx(L,{items:m.slice(0,-1)})," ",e.jsxs("div",{className:"text-center bg-slate-800/80 p-8 sm:p-12 rounded-xl shadow-2xl border border-yellow-500/70 backdrop-blur-sm my-10",children:[e.jsx($,{className:"w-16 h-16 text-yellow-400 mx-auto mb-6"}),e.jsx("h1",{className:"text-3xl sm:text-4xl font-bold text-yellow-400 mb-5",children:"الدرس مقفل"}),e.jsx("p",{className:"text-lg text-gray-300 mb-8 max-w-md mx-auto",children:"يجب عليك إكمال الدروس السابقة في هذا المستوى أو المستويات السابقة لفتح هذا الدرس."}),e.jsx("button",{onClick:()=>o(d.LEVEL_DETAILS.replace(":levelSlug",n.slug)),className:"bg-sky-500 hover:bg-sky-400 text-white font-bold py-3 px-8 rounded-lg text-md transition-all duration-300 ease-in-out transform hover:scale-105 shadow-lg hover:shadow-sky-500/30",children:"العودة إلى دروس المستوى"})]})]});const c=d.LESSON_QUIZ.replace(":levelSlug",n.slug).replace(":lessonSlug",l.slug);return e.jsxs("div",{children:[e.jsx(L,{items:m}),e.jsxs("article",{className:"bg-slate-800/80 p-6 sm:p-10 rounded-xl shadow-2xl border border-slate-700/80 backdrop-blur-sm",children:[e.jsxs("header",{className:"mb-8 border-b border-slate-700/80 pb-8",children:[e.jsx("h1",{className:"text-4xl sm:text-5xl font-bold text-sky-400 mb-4",children:l.title}),e.jsx("p",{className:"text-lg text-gray-400",children:l.description})]}),e.jsx("div",{className:`prose prose-invert max-w-none 
                        prose-p:text-gray-300 prose-p:text-lg prose-p:leading-relaxed prose-p:my-4 prose-p:whitespace-pre-line
                        prose-headings:text-sky-400 
                        prose-h2:text-sky-300 prose-h2:border-b prose-h2:border-slate-700/80 prose-h2:pb-3
                        prose-h3:text-sky-400
                        prose-strong:text-sky-300 
                        prose-a:text-sky-400 hover:prose-a:text-sky-300
                        prose-ul:list-disc prose-ul:list-inside prose-ul:pl-6 prose-ul:rtl:pr-6 prose-ul:space-y-2 prose-ul:text-lg prose-ul:leading-relaxed
                        prose-li:text-gray-300 
                        prose-code:bg-slate-700/80 prose-code:text-sky-300 prose-code:p-1 prose-code:px-1.5 prose-code:rounded-md prose-code:text-base prose-code:font-mono`,children:l.content.map(Re)}),l.quiz&&l.quiz.length>0&&e.jsx("div",{className:"mt-12 pt-8 border-t border-slate-700/80 text-center",children:e.jsxs(S,{to:c,className:`inline-block bg-teal-500 hover:bg-teal-400 text-white font-bold py-3.5 px-10 rounded-lg text-lg 
                         transition-all duration-300 ease-in-out transform hover:scale-105 shadow-lg hover:shadow-xl
                         focus:outline-none focus:ring-2 focus:ring-teal-400 focus:ring-offset-2 focus:ring-offset-slate-800`,children:["ابدأ الاختبار (",l.quiz.length," أسئلة)"]})})]})]})},Fe=({className:t})=>e.jsx("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24",fill:"currentColor",className:t,children:e.jsx("path",{fillRule:"evenodd",d:"M12 2.25c-5.385 0-9.75 4.365-9.75 9.75s4.365 9.75 9.75 9.75 9.75-4.365 9.75-9.75S17.385 2.25 12 2.25Zm-1.72 6.97a.75.75 0 1 0-1.06 1.06L10.94 12l-1.72 1.72a.75.75 0 1 0 1.06 1.06L12 13.06l1.72 1.72a.75.75 0 1 0 1.06-1.06L13.06 12l1.72-1.72a.75.75 0 1 0-1.06-1.06L12 10.94l-1.72-1.72Z",clipRule:"evenodd"})}),De=({levels:t,onQuizComplete:r,completedLessons:i})=>{var T,Z;const{levelSlug:s,lessonSlug:o}=Q();J();const n=t.find(w=>w.slug===s),l=n==null?void 0:n.lessons.find(w=>w.slug===o),p=(l==null?void 0:l.quiz)||[],[m,c]=u.useState(0),[_,h]=u.useState({}),[f,y]=u.useState(!1),[b,v]=u.useState(0);if(u.useEffect(()=>{c(0),h({}),y(!1),v(0)},[s,o]),!n||!l)return e.jsx(F,{to:d.CURRICULUM,replace:!0});if(!U(n.slug,l.slug,t,i)&&!i.includes(l.slug))return e.jsx(F,{to:d.LESSON_DETAILS.replace(":levelSlug",n.slug).replace(":lessonSlug",l.slug),replace:!0});if(p.length===0)return e.jsx(F,{to:d.LESSON_DETAILS.replace(":levelSlug",n.slug).replace(":lessonSlug",l.slug),replace:!0});const g=(w,k)=>{f||h(I=>({...I,[w]:k}))},M=()=>{let w=0;p.forEach(I=>{_[I.id]===I.correctAnswerIndex&&w++}),v(w),y(!0),w/p.length*100>=70&&r(l.slug)},x=()=>{m<p.length-1?c(w=>w+1):M()},C=()=>{c(0),h({}),y(!1),v(0)},A=p[m],R=d.LESSON_DETAILS.replace(":levelSlug",n.slug).replace(":lessonSlug",l.slug),j=[{label:"الرئيسية",path:d.HOME},{label:"الدروس",path:d.CURRICULUM},{label:n.title,path:d.LEVEL_DETAILS.replace(":levelSlug",n.slug)},{label:l.title,path:R},{label:"الاختبار"}],q=(T=t[t.findIndex(w=>w.slug===n.slug)+1])==null?void 0:T.slug,P=(Z=n.lessons[n.lessons.findIndex(w=>w.slug===l.slug)+1])==null?void 0:Z.slug;if(f){const w=b/p.length*100,k=w>=70;return e.jsxs("div",{className:"max-w-2xl mx-auto",children:[e.jsx(L,{items:j}),e.jsxs("div",{className:"text-center bg-slate-800/80 p-6 sm:p-10 rounded-xl shadow-2xl border border-slate-700/80 backdrop-blur-sm",children:[e.jsx("h1",{className:"text-3xl sm:text-4xl font-bold text-sky-400 mb-6",children:"نتائج الاختبار"}),e.jsxs("div",{className:`p-6 sm:p-8 rounded-lg shadow-xl mb-8 border ${k?"bg-green-500/20 border-green-500/50":"bg-red-500/20 border-red-500/50"}`,children:[e.jsxs("p",{className:"text-5xl sm:text-6xl font-bold mb-2 text-gray-100",children:[b," ",e.jsxs("span",{className:"text-3xl sm:text-4xl text-gray-400",children:["/ ",p.length]})]}),e.jsxs("p",{className:`text-xl sm:text-2xl font-semibold ${k?"text-green-300":"text-red-300"}`,children:["(",w.toFixed(0),"%) ",k?"رائع! لقد اجتزت الاختبار بنجاح.":"للأسف، لم تجتز الاختبار هذه المرة."]}),k&&e.jsx("p",{className:"mt-2.5 text-base text-green-400/90",children:"استمر في التقدم، أنت على الطريق الصحيح!"}),!k&&e.jsx("p",{className:"mt-2.5 text-base text-red-400/90",children:"لا تيأس! راجع الدرس وحاول مرة أخرى. يمكنك فعلها!"})]}),e.jsx("div",{className:"my-8 space-y-4 text-right rtl:text-right",children:p.map((I,ue)=>e.jsxs("div",{className:`p-4 rounded-lg border ${_[I.id]===I.correctAnswerIndex?"bg-green-600/20 border-green-600/40":"bg-red-600/20 border-red-600/40"}`,children:[e.jsxs("p",{className:"font-semibold text-lg text-gray-100",children:[ue+1,". ",I.text]}),e.jsxs("div",{className:"flex items-center mt-2",children:[_[I.id]===I.correctAnswerIndex?e.jsx(ne,{className:"w-5 h-5 text-green-400 ml-2 rtl:mr-2 rtl:ml-0 flex-shrink-0"}):e.jsx(Fe,{className:"w-5 h-5 text-red-400 ml-2 rtl:mr-2 rtl:ml-0 flex-shrink-0"}),e.jsxs("p",{className:"text-sm text-gray-300",children:["إجابتك: ",e.jsx("span",{className:"font-medium",children:I.options[_[I.id]]??"لم تجب"})]})]}),_[I.id]!==I.correctAnswerIndex&&e.jsxs("p",{className:"text-sm font-bold text-green-300/90 mt-1.5",children:["الإجابة الصحيحة: ",I.options[I.correctAnswerIndex]]}),I.explanation&&e.jsx("p",{className:"text-xs text-gray-400 mt-2.5 bg-slate-700/60 p-2 rounded-md",children:I.explanation})]},I.id))}),e.jsxs("div",{className:"flex flex-col sm:flex-row justify-center items-center space-y-3 sm:space-y-0 sm:space-x-4 rtl:sm:space-x-reverse",children:[e.jsx("button",{onClick:C,className:"w-full sm:w-auto bg-sky-500 hover:bg-sky-600 text-white font-bold py-3 px-6 rounded-lg transition-all duration-150 ease-in-out transform hover:scale-105 shadow-md focus:outline-none focus:ring-2 focus:ring-sky-400 focus:ring-offset-2 focus:ring-offset-slate-800",children:"إعادة الاختبار"}),e.jsx(S,{to:R,className:"w-full sm:w-auto bg-slate-600 hover:bg-slate-700 text-white font-bold py-3 px-6 rounded-lg transition-all duration-150 ease-in-out transform hover:scale-105 shadow-md focus:outline-none focus:ring-2 focus:ring-slate-500 focus:ring-offset-2 focus:ring-offset-slate-800",children:"العودة للدرس"}),k&&P&&e.jsx(S,{to:d.LESSON_DETAILS.replace(":levelSlug",n.slug).replace(":lessonSlug",P),className:"w-full sm:w-auto bg-green-500 hover:bg-green-600 text-white font-bold py-3 px-6 rounded-lg transition-all duration-150 ease-in-out transform hover:scale-105 shadow-md",children:"الدرس التالي"}),k&&!P&&q&&e.jsx(S,{to:d.LEVEL_DETAILS.replace(":levelSlug",q),className:"w-full sm:w-auto bg-teal-500 hover:bg-teal-600 text-white font-bold py-3 px-6 rounded-lg transition-all duration-150 ease-in-out transform hover:scale-105 shadow-md",children:"المستوى التالي"})]})]})]})}return e.jsxs("div",{className:"max-w-2xl mx-auto",children:[e.jsx(L,{items:j}),e.jsxs("div",{className:"bg-slate-800/80 p-6 sm:p-8 rounded-xl shadow-2xl border border-slate-700/80 backdrop-blur-sm",children:[e.jsxs("h1",{className:"text-2xl sm:text-3xl font-bold text-sky-400 mb-2 text-center",children:["اختبار درس: ",l.title]}),e.jsxs("p",{className:"text-center text-gray-400 mb-8",children:["السؤال ",m+1," من ",p.length]}),e.jsxs("div",{children:[e.jsx("p",{className:"text-xl font-semibold text-gray-100 mb-6 min-h-[60px] text-right rtl:text-right",children:A.text}),e.jsx("div",{className:"space-y-3",children:A.options.map((w,k)=>e.jsx("button",{onClick:()=>g(A.id,k),className:`w-full text-right rtl:text-right p-4 rounded-lg border-2 transition-all duration-200 ease-in-out transform hover:scale-[1.02]
                  focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-slate-800
                  ${_[A.id]===k?"bg-sky-500 border-sky-400 text-white ring-sky-300 shadow-lg":"bg-slate-700/70 border-slate-600/80 hover:bg-slate-600/80 hover:border-sky-500/70 text-gray-200 focus:ring-sky-500/80 focus:border-sky-500/80"}`,"aria-pressed":_[A.id]===k,children:w},k))}),e.jsx("div",{className:"mt-10 text-center",children:e.jsx("button",{onClick:x,disabled:_[A.id]===void 0,className:`bg-green-500 hover:bg-green-600 text-white font-bold py-3 px-10 rounded-lg text-lg 
                         transition-all duration-300 ease-in-out transform hover:scale-105 shadow-lg hover:shadow-xl
                         disabled:bg-gray-500/70 disabled:cursor-not-allowed disabled:transform-none disabled:shadow-none 
                         focus:outline-none focus:ring-2 focus:ring-green-400 focus:ring-offset-2 focus:ring-offset-slate-800`,children:m<p.length-1?"السؤال التالي":"إنهاء وعرض النتيجة"})})]})]})]})},Me=async t=>({inlineData:{data:await new Promise(i=>{const s=new FileReader;s.onloadend=()=>i(s.result.split(",")[1]),s.readAsDataURL(t)}),mimeType:t.type}}),ze=()=>{const[t,r]=u.useState([]),[i,s]=u.useState(""),[o,n]=u.useState(null),[l,p]=u.useState(null),[m,c]=u.useState(!1),[_,h]=u.useState(null),[f,y]=u.useState(null),b=u.useRef(null),v=u.useRef(null);u.useEffect(()=>{try{const C=new te({apiKey:"AIzaSyARVpPfEigrWISzW5NKKcNZGsrKGl5M4cc"}).chats.create({model:"gemini-2.5-flash-preview-04-17"});y(C)}catch(x){console.error("Error initializing GenAI or Chat:",x),h(`Failed to initialize AI chat. ${x instanceof Error?x.message:String(x)}`)}},[]),u.useEffect(()=>{var x;(x=v.current)==null||x.scrollIntoView({behavior:"smooth"})},[t]);const a=async()=>{if(!i.trim()&&!o||!f)return;const x=i.trim(),A={id:`user-${Date.now()}`,sender:"user",text:x||void 0,imageUrl:o&&l||void 0,timestamp:new Date};r(j=>[...j,A]),s(""),n(null),p(null),c(!0),h(null);const R=`ai-${Date.now()}`;r(j=>[...j,{id:R,sender:"ai",text:"يفكر البود...",timestamp:new Date,isLoading:!0}]);try{const j=[];o&&j.push(await Me(o)),x&&j.push({text:x});const q=await f.sendMessage({message:j});r(P=>P.map(T=>T.id===R?{...T,text:q.text,isLoading:!1}:T))}catch(j){console.error("Error sending message to AI:",j);const q=j instanceof Error?j.message:String(j);h(`فشل إرسال الرسالة للذكاء الاصطناعي: ${q}`),r(P=>P.map(T=>T.id===R?{...T,text:`خطأ: ${q}`,isLoading:!1,sender:"ai"}:T))}finally{c(!1)}},g=x=>{if(x.target.files&&x.target.files[0]){const C=x.target.files[0];if(C.size>4*1024*1024){h("حجم الصورة كبير جداً. الحد الأقصى 4 ميجا بايت.");return}n(C);const A=new FileReader;A.onloadend=()=>{p(A.result)},A.readAsDataURL(C),h(null)}},M=[{label:"الرئيسية",path:d.HOME},{label:"دردشة مع الذكاء الاصطناعي"}];return e.jsxs("div",{className:"max-w-4xl mx-auto h-full flex flex-col",style:{minHeight:"calc(100vh - 12rem)"},children:[e.jsx(L,{items:M}),e.jsx("h1",{className:"text-3xl sm:text-4xl font-bold text-sky-400 mb-6 text-center",children:"دردشة مع الذكاء الاصطناعي"}),_&&e.jsx("div",{role:"alert",className:"bg-red-500/20 border border-red-500/50 text-red-300 px-4 py-3 rounded-lg mb-4 text-center",children:e.jsx("p",{children:_})}),e.jsxs("div",{className:"flex-grow bg-slate-800/70 rounded-xl shadow-xl border border-slate-700/80 p-4 sm:p-6 overflow-y-auto mb-4",style:{maxHeight:"60vh"},children:[t.map(x=>e.jsx("div",{className:`mb-4 flex ${x.sender==="user"?"justify-end":"justify-start"}`,children:e.jsxs("div",{className:`max-w-xs md:max-w-md lg:max-w-lg p-3 rounded-xl shadow ${x.sender==="user"?"bg-sky-600 text-white rounded-br-none":"bg-slate-700 text-gray-200 rounded-bl-none"}`,children:[e.jsxs("div",{className:"flex items-center mb-1",children:[x.sender==="ai"?e.jsx(D,{className:"w-5 h-5 mr-2 rtl:ml-2 rtl:mr-0 text-teal-400 flex-shrink-0"}):e.jsx(V,{className:"w-5 h-5 mr-2 rtl:ml-2 rtl:mr-0 text-yellow-400 flex-shrink-0"}),e.jsxs("span",{className:"text-xs text-gray-400",children:[x.sender==="user"?"أنت":"الذكاء الاصطناعي"," - ",x.timestamp.toLocaleTimeString("ar-EG",{hour:"2-digit",minute:"2-digit"})]})]}),x.imageUrl&&e.jsx("img",{src:x.imageUrl,alt:"User upload preview",className:"rounded-lg my-2 max-w-full h-auto max-h-60 object-contain"}),x.text&&e.jsx("p",{className:"text-sm whitespace-pre-wrap",children:x.text}),x.isLoading&&e.jsx("div",{className:"text-xs text-gray-400 mt-1 animated-ellipsis"})]})},x.id)),e.jsx("div",{ref:v})]}),l&&e.jsxs("div",{className:"mb-3 p-2 border border-slate-600 rounded-lg bg-slate-700/50 w-fit mx-auto",children:[e.jsx("img",{src:l,alt:"Selected preview",className:"max-w-xs max-h-32 rounded object-contain"}),e.jsx("button",{onClick:()=>{n(null),p(null),b.current&&(b.current.value="")},className:"mt-1 text-xs text-red-400 hover:text-red-300","aria-label":"إلغاء الصورة المختارة",children:"إلغاء الصورة"})]}),e.jsxs("div",{className:"bg-slate-800/90 p-3 sm:p-4 rounded-xl shadow-inner border border-slate-700/90 flex items-center gap-2 sm:gap-3",children:[e.jsx("input",{type:"file",accept:"image/*",onChange:g,ref:b,className:"hidden",id:"imageUpload","aria-label":"اختيار صورة"}),e.jsx("button",{onClick:()=>{var x;return(x=b.current)==null?void 0:x.click()},className:"p-2.5 rounded-full text-sky-400 hover:text-sky-300 hover:bg-slate-700 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-sky-500","aria-label":"إرفاق صورة",title:"إرفاق صورة",children:e.jsx("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",strokeWidth:1.5,stroke:"currentColor",className:"w-6 h-6",children:e.jsx("path",{strokeLinecap:"round",strokeLinejoin:"round",d:"m2.25 15.75 5.159-5.159a2.25 2.25 0 0 1 3.182 0l5.159 5.159m-1.5-1.5 1.409-1.409a2.25 2.25 0 0 1 3.182 0l2.909 2.909m-18 3.75h16.5a1.5 1.5 0 0 0 1.5-1.5V6a1.5 1.5 0 0 0-1.5-1.5H3.75A1.5 1.5 0 0 0 2.25 6v12a1.5 1.5 0 0 0 1.5 1.5Zm10.5-11.25h.008v.008h-.008V8.25Zm.375 0a.375.375 0 1 1-.75 0 .375.375 0 0 1 .75 0Z"})})}),e.jsx("textarea",{value:i,onChange:x=>s(x.target.value),onKeyPress:x=>{x.key==="Enter"&&!x.shiftKey&&(x.preventDefault(),a())},placeholder:"اكتب رسالتك هنا... (اضغط Shift+Enter لسطر جديد)",className:"flex-grow p-2.5 bg-slate-700 border border-slate-600 rounded-lg text-gray-200 focus:ring-2 focus:ring-sky-500 focus:border-sky-500 resize-none placeholder-gray-500 text-sm",rows:1,style:{minHeight:"44px",maxHeight:"120px"},"aria-label":"صندوق إدخال الرسالة"}),e.jsx("button",{onClick:a,disabled:m||!i.trim()&&!o||!f,className:"p-2.5 rounded-full bg-sky-500 hover:bg-sky-600 text-white transition-all duration-200 disabled:bg-gray-500/70 disabled:cursor-not-allowed focus:outline-none focus:ring-2 focus:ring-sky-400 focus:ring-offset-2 focus:ring-offset-slate-800","aria-label":"إرسال الرسالة",title:"إرسال الرسالة",children:e.jsx("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",strokeWidth:1.5,stroke:"currentColor",className:"w-6 h-6 transform rotate-180 rtl:rotate-0",children:e.jsx("path",{strokeLinecap:"round",strokeLinejoin:"round",d:"M6 12 3.269 3.125A59.769 59.769 0 0 1 21.485 12 59.768 59.768 0 0 1 3.27 20.875L5.999 12Zm0 0h7.5"})})})]})]})},Be=()=>{const[t,r]=u.useState(`print("أهلاً بك في ساحة أكواد Bod Code!")

# جرب كتابة أي كود بايثون هنا
# مثال:
# for i in range(5):
#   print(f"الرقم هو: {i}")`),[i,s]=u.useState(""),[o,n]=u.useState(!1),[l,p]=u.useState(null),m=u.useRef(null),c=u.useRef(null);u.useEffect(()=>{try{m.current=new te({apiKey:"AIzaSyARVpPfEigrWISzW5NKKcNZGsrKGl5M4cc"})}catch(y){console.error("Error initializing GenAI:",y),p(`فشل في تهيئة Gemini API. ${y instanceof Error?y.message:String(y)}`)}},[]),u.useEffect(()=>{var y;(y=c.current)==null||y.scrollIntoView({behavior:"smooth"})},[i]);const _=async()=>{if(!m.current){p("Gemini API غير مُهيأ. لا يمكن تشغيل الكود.");return}if(!t.trim()){s("لا يوجد كود لتشغيله.");return}n(!0),p(null),s("");const y=`
أنت مساعد ذكاء اصطناعي متخصص في تفسير وتنفيذ أكواد بايثون.
بالنظر إلى كود بايثون التالي:
1. قم بمحاكاة تنفيذه وقدم المخرج القياسي (standard output) بالضبط كما سيظهر.
2. إذا كان هناك أي أخطاء وقت التشغيل (مثل NameError, TypeError, إلخ)، صف الخطأ وأين من المحتمل حدوثه. لا تحاول إصلاحه، فقط أبلغ عن الخطأ كما ستفعل بايثون.
3. بعد المخرج أو الخطأ، قدم شرحًا موجزًا وواضحًا لما يهدف إليه كود بايثون، أو ما يفعله حتى نقطة الخطأ.

كود بايثون:
\`\`\`python
${t}
\`\`\`

نظم ردك بوضوح، على سبيل المثال:

**المخرجات:**
\`\`\`
(مخرجات الكود هنا)
\`\`\`

**الشرح:**
(شرح الكود هنا)

في حالة حدوث خطأ:

**خطأ:**
\`\`\`
(رسالة خطأ شبيهة ببايثون وتتبع الخطأ إن أمكن)
\`\`\`

**الشرح:**
(شرح لما حدث خطأ وما كان الكود يحاول القيام به)
`;try{const b=await m.current.models.generateContent({model:"gemini-2.5-flash-preview-04-17",contents:y});s(b.text)}catch(b){console.error("Error running code with Gemini:",b);const v=b instanceof Error?b.message:String(b);p(`حدث خطأ أثناء تشغيل الكود مع Gemini: ${v}`),s(`خطأ في الاتصال بـ Gemini API أو معالجة الطلب:
${v}`)}finally{n(!1)}},h=()=>{s(""),p(null)},f=[{label:"الرئيسية",path:d.HOME},{label:"ساحة الأكواد"}];return e.jsxs("div",{className:"max-w-5xl mx-auto h-full flex flex-col",children:[e.jsx(L,{items:f}),e.jsxs("header",{className:"mb-6 text-center",children:[e.jsx("h1",{className:"text-3xl sm:text-4xl font-bold text-sky-400",children:"ساحة أكواد بايثون"}),e.jsx("p",{className:"text-md text-gray-400 mt-2",children:"اكتب كود بايثون الخاص بك هنا، وسيقوم الذكاء الاصطناعي بمحاكاة تنفيذه وتقديم شرح له."})]}),e.jsxs("div",{className:"grid grid-cols-1 md:grid-cols-2 gap-6 flex-grow",children:[e.jsxs("div",{className:"flex flex-col bg-slate-800/70 p-4 rounded-xl shadow-lg border border-slate-700/80",children:[e.jsx("label",{htmlFor:"codeInput",className:"text-lg font-semibold text-sky-300 mb-2",children:"أدخل كود بايثون هنا:"}),e.jsx("textarea",{id:"codeInput",value:t,onChange:y=>r(y.target.value),placeholder:"print('مرحباً بعالم بايثون!')",className:"flex-grow bg-gray-900 text-gray-200 border border-slate-600 rounded-md p-3 font-mono text-sm focus:ring-2 focus:ring-sky-500 focus:border-sky-500 resize-y",rows:15,spellCheck:"false","aria-label":"منطقة إدخال كود بايثون"}),e.jsx("button",{onClick:_,disabled:o||!1,className:"mt-4 w-full bg-green-500 hover:bg-green-600 text-white font-bold py-2.5 px-4 rounded-lg transition-colors duration-200 disabled:bg-gray-500/70 disabled:cursor-not-allowed flex items-center justify-center space-x-2 rtl:space-x-reverse",children:o?e.jsxs(e.Fragment,{children:[e.jsxs("svg",{className:"animate-spin -ml-1 mr-3 h-5 w-5 text-white",xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",children:[e.jsx("circle",{className:"opacity-25",cx:"12",cy:"12",r:"10",stroke:"currentColor",strokeWidth:"4"}),e.jsx("path",{className:"opacity-75",fill:"currentColor",d:"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"})]}),e.jsx("span",{children:"جاري التشغيل..."})]}):e.jsxs(e.Fragment,{children:[e.jsx("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 20 20",fill:"currentColor",className:"w-5 h-5",children:e.jsx("path",{fillRule:"evenodd",d:"M2 10a.75.75 0 01.75-.75h12.59l-2.1-1.95a.75.75 0 111.02-1.1l3.5 3.25a.75.75 0 010 1.1l-3.5 3.25a.75.75 0 11-1.02-1.1l2.1-1.95H2.75A.75.75 0 012 10z",clipRule:"evenodd"})}),e.jsx("span",{children:"شغل الكود"})]})})]}),e.jsxs("div",{className:"flex flex-col bg-slate-800/70 p-4 rounded-xl shadow-lg border border-slate-700/80",children:[e.jsxs("div",{className:"flex justify-between items-center mb-2",children:[e.jsx("h2",{className:"text-lg font-semibold text-sky-300",children:"المخرجات والشرح:"}),e.jsx("button",{onClick:h,disabled:o,className:"text-xs bg-slate-600 hover:bg-slate-500 text-gray-300 py-1 px-3 rounded-md transition-colors duration-200 disabled:opacity-50",children:"مسح المخرجات"})]}),l&&e.jsxs("div",{role:"alert",className:"bg-red-500/20 border border-red-500/50 text-red-300 px-3 py-2 rounded-md mb-3 text-sm",children:[e.jsx("p",{className:"font-semibold",children:"خطأ في الواجهة:"}),e.jsx("p",{children:l})]}),e.jsxs("div",{id:"outputArea",className:"flex-grow bg-gray-900 text-gray-200 border border-slate-600 rounded-md p-3 font-mono text-sm whitespace-pre-wrap overflow-auto","aria-live":"polite",children:[i||(o?"جاري معالجة الكود...":"سيتم عرض المخرجات والشرح هنا بعد تشغيل الكود."),e.jsx("div",{ref:c})]})]})]})]})},Ve=[{id:"l2-lesson-1",slug:"data-structures",title:"هياكل البيانات (Lists, Tuples, Dictionaries, Sets)",description:"طرق متقدمة لتنظيم مجموعات من البيانات والتعامل معها بكفاءة.",content:[{type:"heading",text:"تنظيم البيانات زي المحترفين: هياكل البيانات!"},{type:"paragraph",text:'لما يكون عندك بيانات كتير، زي مثلاً قايمة بأسماء طلاب أو درجاتهم، أو معلومات عن منتجات في متجر، بتحتاج طرق منظمة عشان تخزن البيانات دي وتتعامل معاها بسهولة. بايثون بتقدملك مجموعة قوية من "هياكل البيانات" (Data Structures) المدمجة اللي بتساعدك في المهمة دي. أشهرهم هم القوائم (Lists)، الصفوف (Tuples)، القواميس (Dictionaries)، والمجموعات (Sets).'},{type:"subheading",text:"1. القوائم (Lists - `list`):"},{type:"paragraph",text:"القائمة هي مجموعة مرتبة من العناصر، وممكن تغير فيها (Mutable) بعد ما تعملها. يعني تقدر تضيف عناصر، تمسح عناصر، أو تغير قيمة عنصر موجود. بتتعرف القائمة باستخدام أقواس مربعة `[]` والعناصر بتفصل بينهم بفاصلة `,`."},{type:"code",language:"python",text:`my_list = [1, "hello", 3.14, True] # القائمة ممكن تحتوي على أنواع بيانات مختلفة
empty_list = []

print(my_list)      # [1, 'hello', 3.14, True]
print(my_list[1])   # الوصول للعنصر التاني (الفهرسة بتبدأ من 0) -> hello

my_list[0] = "واحد" # تغيير قيمة عنصر
print(my_list)      # ['واحد', 'hello', 3.14, True]

my_list.append("جديد") # إضافة عنصر في الآخر
print(my_list)      # ['واحد', 'hello', 3.14, True, 'جديد']

my_list.insert(2, "مضاف") # إضافة عنصر في مكان محدد
print(my_list)

my_list.remove(True) # مسح أول ظهور لقيمة معينة
print(my_list)

last_item = my_list.pop() # مسح آخر عنصر وإرجاعه
print(f"العنصر المحذوف: {last_item}, القائمة الآن: {my_list}")

print(f"طول القائمة: {len(my_list)}") # معرفة عدد العناصر

numbers = [3, 1, 4, 1, 5, 9, 2]
numbers.sort() # ترتيب القائمة (تصاعدي)
print(numbers)`},{type:"paragraph",text:"القوائم مفيدة جداً لما تكون محتاج تخزن مجموعة عناصر بترتيب معين وممكن تحتاج تعدل عليها بعدين."},{type:"subheading",text:"التقطيع (Slicing) في القوائم والنصوص:"},{type:"paragraph",text:"التقطيع طريقة قوية عشان تاخد جزء من القائمة (أو النص). بتستخدم الأقواس المربعة مع تحديد نقطة البداية والنهاية (مش داخلة معانا) والخطوة (اختياري)."},{type:"code",language:"python",text:`numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

print(numbers[2:5])    # العناصر من الفهرس 2 إلى ما قبل 5 -> [2, 3, 4]
print(numbers[:3])     # من البداية إلى ما قبل 3 -> [0, 1, 2]
print(numbers[5:])     # من الفهرس 5 إلى النهاية -> [5, 6, 7, 8, 9]
print(numbers[-1])     # آخر عنصر -> 9
print(numbers[-3:])    # آخر 3 عناصر -> [7, 8, 9]
print(numbers[::2])    # كل العناصر مع خطوة 2 (يعني واحد آه وواحد لأ) -> [0, 2, 4, 6, 8]
print(numbers[::-1])   # عكس القائمة -> [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]`},{type:"subheading",text:"2. الصفوف (Tuples - `tuple`):"},{type:"paragraph",text:'الصف زي القائمة بالظبط من حيث إنه مجموعة مرتبة من العناصر، لكن الفرق الجوهري إن الصف "غير قابل للتغيير" (Immutable) بعد ما تعمله. يعني مينفعش تضيف أو تمسح أو تغير عناصر فيه. بتتعرف الصفوف باستخدام أقواس عادية `()`.'},{type:"code",language:"python",text:`my_tuple = (1, "hello", 3.14, True)
empty_tuple = ()
single_item_tuple = (5,) # لو صف فيه عنصر واحد، لازم تحط فاصلة بعده

print(my_tuple)
print(my_tuple[0]) # الوصول للعناصر زي القائمة بالظبط

# my_tuple[0] = "تغيير"  # السطر ده هيعمل خطأ (TypeError) لأن الصفوف immutable

print(len(my_tuple))

# ممكن تستخدم الصفوف كمفاتيح في القواميس (هنشوفها بعدين) لأنها immutable`},{type:"paragraph",text:"بنستخدم الصفوف لما نكون عايزين نخزن مجموعة بيانات مش هتتغير، أو لما نحتاج نضمن إن البيانات دي متتغيرش بالغلط."},{type:"subheading",text:"3. القواميس (Dictionaries - `dict`):"},{type:"paragraph",text:'القاموس هو مجموعة من العناصر غير مرتبة (في الإصدارات القديمة من بايثون، لكن من بايثون 3.7+ بقى بيحافظ على ترتيب الإدخال). كل عنصر في القاموس عبارة عن زوج من "مفتاح" (Key) و "قيمة" (Value) مرتبطة بيه. المفاتيح لازم تكون فريدة (Unique) وغير قابلة للتغيير (Immutable - زي النصوص والأرقام والصفوف). القيم ممكن تكون أي نوع بيانات. بنعرف القواميس باستخدام أقواس معقوفة `{}`.'},{type:"code",language:"python",text:`person = {
    "name": "أحمد",
    "age": 30,
    "city": "القاهرة",
    "is_student": False
}
empty_dict = {}

print(person)
print(person["name"]) # الوصول للقيمة عن طريق المفتاح -> أحمد
print(person.get("age")) # طريقة تانية للوصول، لو المفتاح مش موجود بترجع None بدل خطأ

person["email"] = "ahmed@example.com" # إضافة زوج جديد أو تعديل قيمة مفتاح موجود
print(person)

person["age"] = 31 # تعديل قيمة مفتاح موجود
print(person)

del person["city"] # مسح عنصر عن طريق المفتاح
# removed_value = person.pop("is_student") # مسح عنصر وإرجاع قيمته

print(person.keys())   # بيعرض كل المفاتيح
print(person.values()) # بيعرض كل القيم
print(person.items())  # بيعرض كل الأزواج (مفتاح، قيمة)

# المرور على عناصر القاموس
for key in person:
    print(f"{key}: {person[key]}")

for key, value in person.items():
    print(f"المفتاح {key} يحمل القيمة {value}")`},{type:"paragraph",text:"القواميس ممتازة لتخزين البيانات اللي ليها علاقة ببعضها، زي معلومات عن شخص أو منتج، وبتسمح بوصول سريع للقيم عن طريق المفاتيح."},{type:"subheading",text:"4. المجموعات (Sets - `set`):"},{type:"paragraph",text:"المجموعة هي مجموعة من العناصر غير مرتبة وغير قابلة للتكرار (Unique). يعني لو حاولت تضيف نفس العنصر أكتر من مرة، هيتخزن مرة واحدة بس. بتتعرف المجموعات باستخدام أقواس معقوفة `{}` زي القواميس، لكن من غير أزواج مفتاح وقيمة. أو باستخدام دالة `set()`."},{type:"code",language:"python",text:`my_set = {1, 2, 3, "hello", 2, 1} # الـ 1 والـ 2 المتكررين هيتخزنوا مرة واحدة بس
empty_set = set() # لعمل مجموعة فارغة، لازم تستخدم set() مش {} لأن {} بتعمل قاموس فاضي

print(my_set) # الترتيب ممكن يختلف كل مرة (في الإصدارات القديمة)

my_set.add(4)     # إضافة عنصر
my_set.add("hello") # "hello" موجودة بالفعل، مش هيحصل تغيير
print(my_set)

my_set.remove(1)  # مسح عنصر (لو مش موجود هيعمل خطأ KeyError)
my_set.discard(10) # مسح عنصر (لو مش موجود مش هيعمل حاجة)
print(my_set)

set1 = {1, 2, 3}
set2 = {3, 4, 5}

print("الاتحاد:", set1.union(set2))         # {1, 2, 3, 4, 5}
print("التقاطع:", set1.intersection(set2))  # {3}
print("الفرق:", set1.difference(set2))      # {1, 2} (العناصر اللي في set1 ومش في set2)`},{type:"paragraph",text:"المجموعات مفيدة لما تكون عايز تتأكد إن العناصر فريدة، أو لما تكون عايز تعمل عمليات رياضية على المجموعات زي الاتحاد والتقاطع والفرق."},{type:"paragraph",text:"كل هيكل من هياكل البيانات دي ليه مميزاته واستخداماته. اختيار الهيكل المناسب بيعتمد على طبيعة البيانات اللي عندك والعمليات اللي عايز تعملها عليها."}],quiz:[{id:"q4-1",text:"إيه الفرق الرئيسي بين الـ List والـ Tuple؟",options:["الـ List أسرع","الـ Tuple لا يمكن تغيير عناصرها بعد إنشائها (immutable)","الـ List لا يمكن تغيير عناصرها","مفيش فرق، بس الأقواس مختلفة"],correctAnswerIndex:1,explanation:"الـ Tuples غير قابلة للتغيير (immutable) بمجرد إنشائها، بينما الـ Lists قابلة للتغيير (mutable)."},{id:"q4-2",text:"أي من التالي يُستخدم لتعريف قاموس (Dictionary) في بايثون؟",options:["[]","()","{} أو dict()","<>"],correctAnswerIndex:2,explanation:"الأقواس المعقوفة `{}` تستخدم لتعريف القواميس (والمجموعات)، ولكن لقاموس فارغ أو لتعريف صريح نستخدم `dict()`."},{id:"q4-3",text:"ما هي الخاصية الأساسية للمفاتيح (Keys) في القاموس؟",options:["يجب أن تكون أرقامًا فقط","يمكن أن تتكرر","يجب أن تكون فريدة (unique) وغير قابلة للتغيير (immutable)","يجب أن تكون نصوصًا فقط"],correctAnswerIndex:2,explanation:"مفاتيح القاموس يجب أن تكون فريدة وغير قابلة للتغيير (مثل النصوص، الأرقام، أو الصفوف)."},{id:"q4-4",text:"إذا كان لديك قائمة `my_list = [10, 20, 30, 40]`، فماذا سيعرض `my_list[1:3]`؟",options:["[20, 30]","[10, 20]","[20, 30, 40]","[10, 20, 30]"],correctAnswerIndex:0,explanation:"التقطيع `[1:3]` يأخذ العناصر من الفهرس 1 حتى ما قبل الفهرس 3."},{id:"q4-5",text:"ما هي وظيفة دالة `.append()` عند استخدامها مع قائمة؟",options:["لحذف عنصر من القائمة","لإضافة عنصر في بداية القائمة","لإضافة عنصر في نهاية القائمة","لترتيب عناصر القائمة"],correctAnswerIndex:2,explanation:"`.append()` تضيف عنصرًا جديدًا إلى نهاية القائمة."}]},{id:"l2-lesson-2",slug:"object-oriented-programming",title:"مقدمة في البرمجة الشيئية (OOP)",description:"فهم المبادئ الأساسية للبرمجة الشيئية: الكائنات (Objects) والأصناف (Classes).",content:[{type:"heading",text:"بناء عالمك الخاص: البرمجة الشيئية (Object-Oriented Programming - OOP)"},{type:"paragraph",text:'البرمجة الشيئية (أو OOP اختصاراً) هي طريقة أو أسلوب في كتابة البرامج بيخلينا نفكر في البرنامج بتاعنا كأنه مكون من مجموعة من "الأشياء" أو "الكائنات" (Objects) اللي بتتفاعل مع بعضها. كل كائن من دول بيكون ليه "صفات" (Attributes) خاصة بيه، وبيقدر يعمل "أفعال" (Methods) معينة.'},{type:"paragraph",text:'تخيل مثلاً إنك بتعمل برنامج عن العربيات. في البرمجة الشيئية، كل عربية هتكون "كائن". الكائن ده ليه صفات زي اللون، الموديل، السرعة الحالية، وبيقدر يعمل أفعال زي "يمشي"، "يقف"، "يزود سرعته".'},{type:"subheading",text:"1. الأصناف (Classes): المخطط أو القالب"},{type:"paragraph",text:'قبل ما نعمل أي كائن (عربية مثلاً)، لازم يكون عندنا "مخطط" أو "قالب" (Blueprint) بيوصف شكل العربية دي عامل إزاي وإيه الصفات والأفعال اللي ممكن تكون عندها. المخطط ده بنسميه في البرمجة "الصنف" (Class).'},{type:"code",language:"python",text:`class Car:  # تعريف صنف (Class) اسمه Car
    pass # pass يعني "مفيش حاجة هنا دلوقتي"`},{type:"subheading",text:"2. الكائنات (Objects): النسخ الفعلية من الصنف"},{type:"paragraph",text:'بعد ما عملنا الصنف (المخطط)، نقدر نعمل منه أي عدد من "الكائنات" (Objects). كل كائن بيكون "نسخة" (Instance) من الصنف ده.'},{type:"code",language:"python",text:`class Dog:
    pass 

my_dog1 = Dog() 
my_dog2 = Dog() 

print(type(my_dog1)) 
print(my_dog1)`},{type:"subheading",text:"3. المُنشِئ (Constructor) - دالة `__init__`:"},{type:"paragraph",text:"لما بنعمل كائن جديد، ساعات بنكون عايزين نديله شوية قيم أولية لصفاته على طول. هنا بنستخدم دالة خاصة جوه الصنف اسمها `__init__`. أول معامل فيها بيكون اسمه `self` وبيشير للكائن نفسه."},{type:"code",language:"python",text:`class Car:
    def __init__(self, color, model):
        self.color = color
        self.model = model
        self.speed = 0
        print(f"تم إنشاء عربية {self.color} موديل {self.model}!")

car1 = Car("أحمر", "فيراري")
print(f"لون العربية: {car1.color}")`},{type:"subheading",text:"4. الأفعال أو الطرق (Methods):"},{type:"paragraph",text:"الأفعال هي الدوال اللي بنعرفها جوه الصنف، وبتمثل الحاجات اللي الكائن يقدر يعملها. أول معامل فيها لازم يكون `self`."},{type:"code",language:"python",text:`class Car:
    def __init__(self, color, model):
        self.color = color
        self.model = model
        self.speed = 0

    def accelerate(self, amount):
        self.speed += amount
        print(f"العربية {self.model} سرعتها زادت وبقت {self.speed} كم/ساعة.")

my_car = Car("أسود", "مرسيدس")
my_car.accelerate(50)`}],quiz:[{id:"q5-1",text:"في البرمجة الشيئية، الـ Class يعتبر إيه؟",options:["مثال من كائن (Instance of an object)","مخطط أو قالب لإنشاء الكائنات (Blueprint for creating objects)","دالة جاهزة (Built-in function)","متغير (Variable)"],correctAnswerIndex:1,explanation:"الـ Class هو المخطط أو القالب الذي يتم استخدامه لإنشاء كائنات لها نفس التركيب والسلوك."},{id:"q5-2",text:"ماذا يسمى الكائن (Object) بالنسبة للصنف (Class)؟",options:["أب (Parent)","ابن (Child)","نسخة أو مثيل (Instance)","وظيفة (Function)"],correctAnswerIndex:2,explanation:"الكائن هو نسخة أو مثيل (Instance) من الصنف."},{id:"q5-3",text:"ما هي الدالة الخاصة التي يتم استدعاؤها تلقائيًا عند إنشاء كائن جديد من صنف في بايثون؟",options:["`__create__()`","`__main__()`","`__init__()`","`__object__()`"],correctAnswerIndex:2,explanation:"دالة `__init__` هي المُنشِئ (Constructor) الذي يتم استدعاؤه عند إنشاء كائن جديد."},{id:"q5-4",text:"ما هو المعامل الأول الذي يجب أن يُمرر دائمًا إلى أي Method داخل Class في بايثون (ويشير إلى الكائن نفسه)؟",options:["`object`","`instance`","`this`","`self`"],correctAnswerIndex:3,explanation:"`self` هو المعامل المتعارف عليه الذي يشير إلى الكائن الحالي داخل الصنف."},{id:"q5-5",text:"ماذا تسمى الدوال المعرفة داخل الصنف (Class)؟",options:["وظائف (Functions)","إجراءات (Procedures)","طرق (Methods)","وحدات (Modules)"],correctAnswerIndex:2,explanation:"الدوال المعرفة داخل الصنف تسمى طرق (Methods) وهي تمثل سلوكيات الكائن."}]},{id:"l2-lesson-3",slug:"list-comprehensions",title:"فهم List Comprehensions لإنشاء قوائم فعالة",description:"تعلم كيف تستخدم List Comprehensions لكتابة كود بايثون أكثر إيجازًا وقراءة لإنشاء القوائم.",content:[{type:"heading",text:"ما هي List Comprehensions؟ طريقة بايثونية مختصرة!"},{type:"paragraph",text:"تخيل إنك عايز تعمل قايمة جديدة بناءً على قايمة موجودة. الطريقة التقليدية هي إنك تعمل حلقة `for` فاضية وتضيف فيها العناصر. List Comprehensions بتقدملك طريقة تانية، شيك ومختصرة، عشان تعمل كل ده في سطر واحد بس!"},{type:"paragraph",text:"البناء الأساسي بتاعها بيكون كده: `[expression for item in iterable if condition]`"},{type:"code",language:"python",text:`# الطريقة التقليدية
squares_loop = []
for x in range(5):
    squares_loop.append(x**2)
print(f"بالحلقة: {squares_loop}")

# باستخدام List Comprehension
squares_comp = [x**2 for x in range(5)]
print(f"بالـ Comprehension: {squares_comp}")`},{type:"paragraph",text:"ممكن كمان تضيف شرط `if` للفلترة."},{type:"code",language:"python",text:`evens_comp = [x for x in range(10) if x % 2 == 0]
print(f"الأرقام الزوجية: {evens_comp}")

# ممكن تعمل بيها حاجات أعقد شوية، زي list of lists
matrix = [[j for j in range(3)] for i in range(2)]
print(f"ماتريكس: {matrix}") # [[0, 1, 2], [0, 1, 2]]

# أو تستخدم تعبير شرطي في الـ expression نفسها
results = ["زوجي" if num % 2 == 0 else "فردي" for num in range(5)]
print(results) # ['زوجي', 'فردي', 'زوجي', 'فردي', 'زوجي']`},{type:"subheading",text:"فيه كمان Dictionary Comprehensions و Set Comprehensions:"},{type:"paragraph",text:"بنفس الفكرة، ممكن تعمل قواميس ومجموعات بطريقة مختصرة:"},{type:"code",language:"python",text:`# Dictionary Comprehension
squares_dict = {x: x**2 for x in range(5)}
print(f"قاموس التربيعات: {squares_dict}") # {0: 0, 1: 1, 2: 4, 3: 9, 4: 16}

# Set Comprehension (بتعمل مجموعة فيها عناصر فريدة)
unique_letters = {char.lower() for char in "BodCodeIsAwesome" if char.isalpha()}
print(f"الحروف الفريدة (صغيرة): {unique_letters}")`},{type:"paragraph",text:"الـ Comprehensions طريقة قوية ومحبوبة في بايثون عشان بتخلي الكود بتاعك أنضف وأقصر وممكن يكون أسرع في بعض الحالات."}],quiz:[{id:"q_lc_1",text:"ما هي الفائدة الرئيسية من استخدام List Comprehensions؟",options:["جعل الكود أطول","زيادة تعقيد الكود","كتابة كود أكثر إيجازًا وقراءة لإنشاء القوائم","تبطئ تنفيذ البرنامج"],correctAnswerIndex:2,explanation:"List Comprehensions تجعل الكود أكثر إيجازًا وأسهل في القراءة."},{id:"q_lc_2",text:"أي من التالي هو بناء جملة صحيح لـ List Comprehension بسيطة؟",options:["`[for item in iterable expression]`","`(expression for item in iterable)`","`{item for item in iterable: expression}`","`[expression for item in iterable]`"],correctAnswerIndex:3,explanation:"الصيغة الأساسية هي `[expression for item in iterable]`."},{id:"q_lc_3",text:"ماذا سيكون ناتج `[x * 2 for x in [1, 2, 3] if x % 2 == 0]`؟",options:["`[2, 4, 6]`","`[4]`","`[2]`","`[1, 2, 3, 2, 4, 6]`"],correctAnswerIndex:1,explanation:"الشرط `x % 2 == 0` يتحقق فقط للرقم 2. ثم يتم ضربه في 2 ليصبح الناتج `[4]`."},{id:"q_lc_4",text:"هل يمكن استخدام تعبير شرطي (if/else) داخل الـ expression في List Comprehension؟",options:["نعم، باستخدام `[value_if_true if condition else value_if_false for item in iterable]`","لا، هذا غير ممكن","فقط إذا كانت القائمة تحتوي على أرقام","فقط مع Set Comprehensions"],correctAnswerIndex:0,explanation:"نعم، يمكن استخدام تعبير شرطي في جزء الـ `expression` مثل `[x if x > 0 else 0 for x in numbers]`."},{id:"q_lc_5",text:"لإنشاء Set comprehension، أي نوع من الأقواس تستخدم؟",options:["`[]` (مربعة)","`()` (دائرية)","`{}` (معقوفة)","`< >` (زاوية)"],correctAnswerIndex:2,explanation:"Set comprehensions (وكذلك Dictionary comprehensions) تستخدم الأقواس المعقوفة `{}`."}]},{id:"l2-lesson-4",slug:"lambda-map-filter",title:"الدوال المجهولة `lambda` مع `map` و `filter`",description:"اكتشف قوة دوال `lambda` الصغيرة والمجهولة، وكيفية استخدامها مع دوال `map` و `filter` لمعالجة البيانات بكفاءة.",content:[{type:"heading",text:"الدوال السريعة: `lambda`, `map`, و `filter`"},{type:"paragraph",text:'في بايثون، ساعات بنحتاج نعمل دالة بسيطة بتعمل حاجة واحدة ومش هنستخدمها غير في مكان واحد بس. بدل ما نعمل دالة كاملة بـ `def` واسم وكده، ممكن نستخدم "دالة لامدا" (Lambda Function). دالة لامدا هي دالة صغيرة، "مجهولة الاسم" (Anonymous)، بتتكتب في سطر واحد، وبترجع نتيجة تعبير (expression) واحد بس.'},{type:"subheading",text:"1. دوال `lambda`:"},{type:"paragraph",text:"البناء بتاعها بيكون كده: `lambda arguments: expression`."},{type:"list",text:"",items:["`lambda`: الكلمة المفتاحية اللي بتعرف إن دي دالة لامدا.","`arguments`: المعاملات (parameters) اللي الدالة بتاخدها، ممكن تكون واحد أو أكتر، بتفصل بينهم بفاصلة (زي `x`, `x, y`).","`expression`: تعبير واحد بس بيتم حسابه وإرجاع قيمته. مينفعش تحط أوامر متعددة أو جمل `if` معقدة هنا (بس ممكن تستخدم تعبير شرطي بسيط)."]},{type:"code",language:"python",text:`# دالة لامدا بسيطة بتاخد معامل واحد وبتزود عليه واحد
add_one = lambda x: x + 1
print(add_one(5))  # الناتج: 6

# دالة لامدا بتاخد معاملين وبترجع مجموعهم
sum_two = lambda a, b: a + b
print(sum_two(10, 20)) # الناتج: 30

# ممكن نستخدمها مباشرة من غير ما نخزنها في متغير (بس ده مش شائع أوي إلا مع دوال تانية)
print((lambda x, y: x * y)(4, 5)) # الناتج: 20`},{type:"paragraph",text:"أكبر فايدة لدوال لامدا بتظهر لما بنستخدمها مع دوال تانية بتقبل دوال كـ arguments، زي `map` و `filter` و `sorted`."},{type:"subheading",text:"2. دالة `map()`:"},{type:"paragraph",text:'دالة `map(function, iterable)` دي بتاخد دالة معينة (`function`) ومجموعة بيانات قابلة للتكرار (`iterable` زي قايمة أو tuple). وظيفتها إنها بتطبق الدالة دي على "كل عنصر" من عناصر الـ iterable، وبترجع "مُكرِّر" (iterator) فيه النتايج الجديدة. عشان نشوف النتايج دي كقايمة، لازم نحول المُكرِّر ده لقايمة باستخدام `list()`.'},{type:"code",language:"python",text:`numbers = [1, 2, 3, 4, 5]

# عايزين نعمل قايمة جديدة فيها تربيع كل رقم في القايمة الأصلية
# باستخدام دالة عادية
def square(n):
    return n**2
squared_numbers_loop = list(map(square, numbers))
print(f"باستخدام دالة عادية: {squared_numbers_loop}") # [1, 4, 9, 16, 25]

# باستخدام دالة لامدا مع map (أكثر اختصاراً)
squared_numbers_lambda = list(map(lambda x: x**2, numbers))
print(f"باستخدام لامدا: {squared_numbers_lambda}") # [1, 4, 9, 16, 25]

names = ["أحمد", "علي", "سارة"]
uppercased_names = list(map(str.upper, names)) # ممكن نمرر دوال مدمجة زي str.upper
print(uppercased_names) # ['أَحْمَد', 'عَلِي', 'سَارَة'] (لاحظ إنها قلبت الحروف العربية لحروف متصلة في بعض الأنظمة)`},{type:"subheading",text:"3. دالة `filter()`:"},{type:"paragraph",text:"دالة `filter(function, iterable)` دي برضه بتاخد دالة ومجموعة بيانات. الدالة اللي بنمررها لـ `filter` لازم تكون دالة بترجع قيمة منطقية (`True` أو `False`). وظيفة `filter` إنها بتمر على كل عنصر في الـ iterable، وبتطبق عليه الدالة. لو الدالة رجعت `True` للعنصر ده، العنصر بيعدي وبيبقى جزء من الناتج. لو رجعت `False`، العنصر بيتم تجاهله. `filter` برضه بترجع مُكرِّر، فبنحتاج نحوله لقايمة أو أي هيكل تاني لو عايزين نشوف العناصر."},{type:"code",language:"python",text:`numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# عايزين نفلتر الأرقام الزوجية بس
# باستخدام دالة عادية
def is_even(n):
    return n % 2 == 0
even_numbers_loop = list(filter(is_even, numbers))
print(f"الأرقام الزوجية (دالة عادية): {even_numbers_loop}") # [2, 4, 6, 8, 10]

# باستخدام دالة لامدا مع filter
even_numbers_lambda = list(filter(lambda x: x % 2 == 0, numbers))
print(f"الأرقام الزوجية (لامدا): {even_numbers_lambda}") # [2, 4, 6, 8, 10]

# مثال تاني: فلترة الكلمات اللي طولها أكبر من 3 حروف
words = ["بيت", "سيارة", "قط", "كمبيوتر", "شمس"]
long_words = list(filter(lambda w: len(w) > 3, words))
print(long_words) # ['سيارة', 'كمبيوتر']`},{type:"paragraph",text:"دوال `lambda`, `map`, و `filter` أدوات قوية جداً بتساعدك تكتب كود وظيفي (Functional Style) أكتر في بايثون. بيخلوا الكود بتاعك مختصر وواضح لما بتكون بتعمل عمليات بسيطة على مجموعات بيانات. ممكن كمان تجمعهم مع List Comprehensions عشان تعمل حاجات معقدة بشكل أنيق."}],quiz:[{id:"q_lmf_1",text:"ما هي دالة lambda في بايثون؟",options:["دالة كبيرة متعددة الأسطر","دالة مجهولة وصغيرة يمكن تعريفها في سطر واحد","اسم آخر لدالة `print`","طريقة لإنشاء كلاس"],correctAnswerIndex:1,explanation:"دوال lambda هي دوال صغيرة ومجهولة (بدون اسم رسمي) تستخدم عادة لعمليات بسيطة."},{id:"q_lmf_2",text:"ماذا تفعل دالة `map(function, iterable)`؟",options:["تقوم بتصفية عناصر الـ iterable بناءً على الـ function","تقوم بتطبيق الـ function على كل عنصر في الـ iterable وتعيد النتائج (كمُكرِّر)","تجمع كل عناصر الـ iterable في قيمة واحدة","تعيد الـ iterable كما هو"],correctAnswerIndex:1,explanation:"دالة `map` تطبق دالة معينة على كل عنصر من عناصر iterable وتعيد مُكرِّرًا بالنتائج."},{id:"q_lmf_3",text:"ماذا سيكون ناتج `list(filter(lambda x: x > 2, [1, 2, 3, 4, 0]))`؟",options:["`[1, 2, 0]`","`[3, 4]`","`[False, False, True, True, False]`","`[1, 2, 3, 4, 0]`"],correctAnswerIndex:1,explanation:"`filter` ستعيد العناصر التي يكون الشرط (`x > 2`) لها `True`."},{id:"q_lmf_4",text:"ما هو بناء جملة دالة lambda بسيطة تأخذ معاملين `x` و `y` وتعيد مجموعهما؟",options:["`def lambda(x, y): return x + y`","`lambda x, y: x + y`","`function (x, y) => x + y`","`lambda (x, y) return x + y`"],correctAnswerIndex:1,explanation:"الصيغة الصحيحة هي `lambda arguments: expression`."},{id:"q_lmf_5",text:"هل يمكن لدالة lambda أن تحتوي على أكثر من تعبير (expression) واحد؟",options:["نعم، يمكن أن تحتوي على عدة تعبيرات مفصولة بفاصلة منقوطة","لا، دالة lambda يجب أن تحتوي على تعبير واحد فقط","نعم، إذا تم استخدام كلمة `return`","فقط إذا لم تأخذ أي معاملات"],correctAnswerIndex:1,explanation:"دوال lambda مصممة لتكون بسيطة ومقتصرة على تعبير واحد. القيمة الناتجة عن هذا التعبير هي التي يتم إرجاعها."}]},{id:"l2-lesson-5",slug:"working-with-json",title:"التعامل مع بيانات JSON: قراءة وكتابة",description:"تعلم كيفية التعامل مع تنسيق JSON الشهير في بايثون، بما في ذلك قراءة ملفات JSON وتحويل بيانات بايثون إلى JSON.",content:[{type:"heading",text:"لغة البيانات العالمية: التعامل مع JSON"},{type:"paragraph",text:'JSON (بتتنطق "جيسون" أو "جايسون"، واختصار لـ JavaScript Object Notation) هو تنسيق خفيف جداً ومشهور لتبادل البيانات بين البرامج، خصوصاً على الويب. الناس بتحبه عشان سهل القراءة للبشر وسهل للكمبيوتر إنه يحلله (parse) ويعمله (generate). بايثون عنده موديول مدمج اسمه `json` مخصوص عشان تتعامل مع البيانات دي.'},{type:"code",language:"python",text:"import json"},{type:"subheading",text:"تحويل بيانات بايثون إلى نص JSON (Serialization/Encoding):"},{type:"paragraph",text:'لو عندك بيانات في بايثون (زي قاموس أو قايمة) وعايز تحولها لنص بصيغة JSON عشان تبعتها لـ API أو تحفظها في ملف، بتستخدم دالة `json.dumps()` (الـ "s" في الآخر اختصار لـ string).'},{type:"code",language:"python",text:`data_dict = {
    "name": "Bod Code Course",
    "students": 250,
    "topics": ["Python Basics", "Data Structures", "OOP"],
    "is_active": True,
    "instructor": None # None في بايثون بتتحول لـ null في JSON
}

# تحويل القاموس لنص JSON
json_string = json.dumps(data_dict)
print("JSON String (مضغوط):")
print(json_string)

# ممكن نخليه شكله منظم أكتر (pretty-print) باستخدام indent
# و ensure_ascii=False عشان الحروف العربية متتحولش لرموز غريبة
formatted_json_string = json.dumps(data_dict, indent=4, ensure_ascii=False, sort_keys=True)
print("\\nJSON String (منظم ومع دعم عربي):")
print(formatted_json_string)`},{type:"subheading",text:"تحويل نص JSON إلى بيانات بايثون (Deserialization/Decoding):"},{type:"paragraph",text:'لو عندك نص بصيغة JSON (مثلاً جالك من API أو قريته من ملف) وعايز تحوله لهيكل بيانات بايثون (عادةً قاموس أو قايمة)، بتستخدم دالة `json.loads()` (الـ "s" هنا برضه اختصار لـ string).'},{type:"code",language:"python",text:`json_text_from_api = '{"title": "درس جديد في بايثون", "duration_minutes": 60, "published": true, "tags": ["python", "intermediate"]}'

python_data = json.loads(json_text_from_api)

print("\\nبيانات بايثون بعد التحويل:")
print(python_data)
print(f"عنوان الدرس: {python_data['title']}")
print(f"أول تاج: {python_data['tags'][0]}")`},{type:"subheading",text:"التعامل مع ملفات JSON:"},{type:"paragraph",text:"موديول `json` بيوفر كمان دالتين عشان تتعامل مع ملفات JSON مباشرة:"},{type:"list",text:"",items:["`json.dump(data, file_object, indent=4, ensure_ascii=False)`: عشان تكتب بيانات بايثون (زي قاموس) في ملف بصيغة JSON. بتاخد البيانات وكائن الملف (file object) اللي فتحته للكتابة.","`json.load(file_object)`: عشان تقرا بيانات JSON من ملف وتحولها لبيانات بايثون. بتاخد كائن الملف اللي فتحته للقراءة."]},{type:"code",language:"python",text:`# بيانات عايزين نحفظها في ملف JSON
config_data = {
    "app_name": "My BodCode Editor",
    "version": "1.2.0",
    "settings": {
        "theme": "dark",
        "font_size": 14
    }
}

file_path = "config.json"

# كتابة البيانات في ملف JSON
try:
    with open(file_path, "w", encoding="utf-8") as f_out:
        json.dump(config_data, f_out, indent=4, ensure_ascii=False)
    print(f"\\nتم حفظ الإعدادات في ملف '{file_path}'")
except IOError as e:
    print(f"حصل خطأ أثناء الكتابة للملف: {e}")

# قراءة البيانات من ملف JSON
try:
    with open(file_path, "r", encoding="utf-8") as f_in:
        loaded_config = json.load(f_in)
    print("\\nالإعدادات اللي قريناها من الملف:")
    print(loaded_config)
    print(f"اسم التطبيق من الملف: {loaded_config['app_name']}")
    print(f"حجم الخط: {loaded_config['settings']['font_size']}")
except FileNotFoundError:
    print(f"الملف '{file_path}' مش موجود.")
except json.JSONDecodeError as e:
    print(f"الملف '{file_path}' مش بصيغة JSON سليمة: {e}")
except IOError as e:
    print(f"حصل خطأ أثناء القراءة من الملف: {e}")`},{type:"paragraph",text:"تنسيق JSON بسيط جداً ومرن. أنواع البيانات الأساسية في JSON هي النصوص (strings)، الأرقام (numbers)، القيم المنطقية (booleans - `true`/`false`)، الكائنات (objects - اللي بتتحول لقواميس بايثون)، المصفوفات (arrays - اللي بتتحول لقوايم بايثون)، والقيمة `null` (اللي بتتحول لـ `None` في بايثون). التعامل معاه مهارة أساسية لأي مبرمج بايثون بيشتغل مع الويب أو بيتبادل بيانات بين أنظمة مختلفة."}],quiz:[{id:"q_json_1",text:"ما هي الوحدة (module) التي توفرها بايثون للتعامل مع بيانات JSON؟",options:["`xml`","`json`","`pickle`","`csv`"],correctAnswerIndex:1,explanation:"وحدة `json` هي الوحدة القياسية في بايثون للتعامل مع JSON."},{id:"q_json_2",text:"أي دالة تستخدم لتحويل قاموس بايثون إلى سلسلة نصية بتنسيق JSON؟",options:["`json.load()`","`json.loads()`","`json.dump()`","`json.dumps()`"],correctAnswerIndex:3,explanation:"`json.dumps()` (dump string) تحول كائن بايثون إلى سلسلة JSON."},{id:"q_json_3",text:"عند قراءة بيانات JSON من ملف، أي دالة تستخدم عادةً؟",options:["`json.read_file()`","`json.load()`","`json.loads()`","`json.get_from_file()`"],correctAnswerIndex:1,explanation:"`json.load()` تستخدم لتحميل (تحويل) بيانات JSON من كائن يشبه الملف (مثل ملف مفتوح)."},{id:"q_json_4",text:"ما هو الغرض من المعامل `ensure_ascii=False` عند استخدام `json.dumps()` مع نصوص عربية؟",options:["للتأكد من أن كل الحروف يتم تحويلها إلى ASCII","لمنع تحويل الحروف غير الـ ASCII (مثل العربية) إلى تسلسلات \\uXXXX والسماح بظهورها كما هي","لزيادة سرعة التحويل","لتجاهل النصوص العربية بالكامل"],correctAnswerIndex:1,explanation:"`ensure_ascii=False` يسمح بظهور الحروف غير الـ ASCII (مثل العربية) مباشرة في سلسلة JSON الناتجة بدلاً من ترميزها."},{id:"q_json_5",text:'إذا كان لديك سلسلة JSON: `\'{"name": "Book", "pages": 100}\'`، فما نوع كائن بايثون الذي ستحصل عليه بعد استخدام `json.loads()`؟',options:["List (قائمة)","Tuple (صف)","Dictionary (قاموس)","Set (مجموعة)"],correctAnswerIndex:2,explanation:"كائنات JSON (المحاطة بـ `{}`) يتم تحويلها إلى قواميس بايثون. مصفوفات JSON (المحاطة بـ `[]`) يتم تحويلها إلى قوائم بايثون."}]},{id:"l2-lesson-6",slug:"file-handling",title:"التعامل مع الملفات: قراءة وكتابة البيانات",description:"تعلم كيف يقرأ برنامجك من الملفات ويكتب فيها، وهي مهارة أساسية لتخزين البيانات واسترجاعها.",content:[{type:"heading",text:"كنز البيانات الدائم: التعامل مع الملفات"},{type:"paragraph",text:"في كتير من الأحيان، بنحتاج برامجنا تحفظ بيانات بشكل دائم عشان نقدر نرجع لها بعدين حتى لو قفلنا البرنامج، أو نقرا بيانات موجودة بالفعل من ملفات على الجهاز. بايثون بتقدملك طرق سهلة جداً عشان تتعامل مع الملفات دي."},{type:"subheading",text:"1. فتح الملف باستخدام `open()`:"},{type:"paragraph",text:'أول خطوة عشان تتعامل مع ملف هي إنك "تفتحه". بنستخدم دالة `open()` المدمجة. الدالة دي بتاخد على الأقل معاملين:'},{type:"list",text:"",items:['**اسم الملف (File Path):** ده مسار الملف اللي عايز تفتحه (مثلاً `"my_document.txt"` أو `"data/report.csv"`).',"**وضع الفتح (Mode):** ده بيحدد إنت عايز تعمل إيه بالملف ده. أشهر الأوضاع هي:","  - `'r'` (Read - للقراءة فقط): ده الوضع الافتراضي. لو حاولت تكتب في الملف وهو مفتوح بالوضع ده هيحصل خطأ. لو الملف مش موجود، هيحصل خطأ `FileNotFoundError`.","  - `'w'` (Write - للكتابة فقط): لو الملف موجود، \"هيمسح كل اللي فيه\" ويبدأ يكتب من الأول. لو الملف مش موجود، هيعمل ملف جديد بالاسم ده. لو حاولت تقرا من الملف وهو مفتوح بالوضع ده هيحصل خطأ.","  - `'a'` (Append - للإضافة فقط): لو الملف موجود، الكتابة هتبدأ من \"آخر الملف\" من غير ما تمسح اللي كان موجود. لو الملف مش موجود، هيعمل ملف جديد. لو حاولت تقرا هيحصل خطأ.","  - `'r+'` (Read and Write - للقراءة والكتابة): الملف لازم يكون موجود. ممكن تقرا منه وتكتب فيه.","  - `'w+'` (Write and Read - للكتابة والقراءة): زي `w` بس ممكن تقرا منه بعد ما تكتب.","  - `'a+'` (Append and Read - للإضافة والقراءة): زي `a` بس ممكن تقرا منه.","  - `'rb'`, `'wb'`, `'ab'`, etc.: الأوضاع اللي فيها حرف `b` (binary) بتستخدم للتعامل مع الملفات الثنائية (زي الصور أو الملفات التنفيذية) مش الملفات النصية."]},{type:"paragraph",text:'دالة `open()` بترجع "كائن ملف" (File Object) بنستخدمه عشان نعمل عمليات القراءة والكتابة.'},{type:"code",language:"python",text:`# مثال لفتح ملف للقراءة
# try:
#     file_object = open("example.txt", "r", encoding="utf-8") # encoding مهم للملفات العربية
#     # ... نعمل عمليات على الملف ...
# finally:
#     if file_object:
#         file_object.close() # مهم جداً نقفل الملف بعد ما نخلص`},{type:"subheading",text:"2. استخدام `with open(...)` (الطريقة المفضلة):"},{type:"paragraph",text:"الطريقة اللي فوق بتاعة `try...finally` عشان تقفل الملف شغالة، بس ممكن تكون مملة شوية وممكن ننسى نقفل الملف. بايثون بتقدملنا طريقة أنضف وأأمن باستخدام جملة `with`. جملة `with` بتضمن إن الملف هيتقفل تلقائياً بعد ما البلوك بتاعها يخلص، حتى لو حصل خطأ جوه البلوك!"},{type:"code",language:"python",text:`try:
    with open("example.txt", "r", encoding="utf-8") as f_obj: # f_obj هو كائن الملف
        # الكود اللي بيتعامل مع الملف بيكون هنا
        content = f_obj.read()
        print("محتوى الملف كامل:")
        print(content)
    # أول ما نخرج من البلوك ده، الملف f_obj بيتقفل لوحده
except FileNotFoundError:
    print("الملف example.txt مش موجود!")
except Exception as e:
    print(f"حصل خطأ تاني: {e}")`},{type:"subheading",text:"3. القراءة من الملفات النصية:"},{type:"list",text:"كائن الملف بيوفر كذا دالة للقراءة:",items:["`file.read(size)`: بتقرا `size` عدد من الحروف (أو البايتات لو ملف ثنائي). لو محددتش `size` أو كانت قيمة سالبة، بتقرا الملف كله مرة واحدة (خلي بالك لو الملف كبير جداً ده ممكن يستهلك ذاكرة كتير).","`file.readline()`: بتقرا سطر واحد بس من الملف، لحد ما توصل لرمز السطر الجديد (`\\n`) أو نهاية الملف.","`file.readlines()`: بتقرا كل السطور اللي فاضلة في الملف وبترجعهم كقايمة (list) من النصوص، كل نص فيها بيمثل سطر (وبيكون معاه رمز `\\n` في آخره).","**الطريقة الأفضل لقراءة الملف سطر بسطر (خصوصاً للملفات الكبيرة):** إنك تعمل حلقة `for` على كائن الملف نفسه. بايثون هيتعامل مع الموضوع ده بكفاءة ويجيبلك كل سطر لوحده."]},{type:"code",language:"python",text:`# نعمل ملف الأول عشان نقراه
with open("sample_read.txt", "w", encoding="utf-8") as f_write:
    f_write.write("السطر الأول من الملف.\\n")
    f_write.write("ده السطر الثاني.\\n")
    f_write.write("وهنا السطر الأخير خالص.")

print("\\n--- قراءة الملف سطر بسطر (الطريقة المفضلة) ---")
try:
    with open("sample_read.txt", "r", encoding="utf-8") as f:
        for line_number, line_content in enumerate(f, 1):
            print(f"سطر {line_number}: {line_content.strip()}") # .strip() بتشيل المسافات الزيادة و 
 من الأطراف
except FileNotFoundError:
    print("ملف sample_read.txt مش لاقيينه.")`},{type:"subheading",text:"4. الكتابة في الملفات النصية:"},{type:"list",text:"بنستخدم الدوال دي:",items:["`file.write(string)`: بتكتب النص `string` في الملف. مش بتضيف سطر جديد (`\\n`) في الآخر لوحدها، لازم تضيفه إنت لو عايزه.","`file.writelines(list_of_strings)`: بتاخد قايمة من النصوص وبتكتبهم كلهم ورا بعض في الملف. برضه مش بتضيف سطور جديدة تلقائياً بين النصوص."]},{type:"code",language:"python",text:`lines_to_write = [
    "أهلاً بك في ملف جديد.\\n",
    "تم إنشاؤه بواسطة Bod Code.\\n",
    "بايثون ممتع جداً!\\n"
]

try:
    with open("new_output.txt", "w", encoding="utf-8") as f_out:
        f_out.write("ده أول سطر كتبناه لوحدنا.\\n")
        f_out.writelines(lines_to_write)
    print("\\nتمت الكتابة في ملف new_output.txt بنجاح.")

    # نجرب وضع الإضافة 'a'
    with open("new_output.txt", "a", encoding="utf-8") as f_append:
        f_append.write("سطر إضافي تم إلحاقه في الآخر.\\n")
    print("تم إضافة سطر جديد للملف.")
except Exception as e:
    print(f"حصل خطأ أثناء الكتابة: {e}")`},{type:"subheading",text:"تحديد مكان المؤشر (Seeking - أقل استخداماً مع الملفات النصية):"},{type:"paragraph",text:"كائن الملف بيكون عنده مؤشر داخلي بيقول هو واقف فين في الملف. ممكن تستخدم دالة `file.seek(offset, whence)` عشان تحرك المؤشر ده. `offset` هو عدد البايتات اللي عايز تتحركها، و `whence` بتحدد هتبدأ منين (0 من بداية الملف، 1 من المكان الحالي، 2 من نهاية الملف). ودالة `file.tell()` بترجعلك مكان المؤشر الحالي. دي بتكون مفيدة أكتر مع الملفات الثنائية."},{type:"paragraph",text:"التعامل مع الملفات مهارة أساسية جداً. سواء بتقرا ملفات إعدادات، أو بتسجل نتائج، أو بتعالج بيانات، هتحتاج تتعامل مع الملفات كتير في شغلك كمبرمج بايثون."}],quiz:[{id:"q_fh_1",text:"ما هو وضع الفتح (mode) الذي تستخدمه إذا أردت القراءة من ملف وإذا لم يكن الملف موجودًا يحدث خطأ؟",options:['`"w"`','`"r"`','`"a"`','`"r+"`'],correctAnswerIndex:1,explanation:'الوضع `"r"` (read) هو للقراءة فقط، ويسبب خطأ إذا لم يكن الملف موجودًا.'},{id:"q_fh_2",text:"ماذا تفعل الدالة `file.write(text)`؟",options:["تقرأ نصًا من الملف","تكتب النص `text` في الملف","تحذف الملف","تغلق الملف"],correctAnswerIndex:1,explanation:"`file.write(text)` تقوم بكتابة السلسلة النصية `text` في الملف المفتوح."},{id:"q_fh_3",text:"ما هي الفائدة الرئيسية لاستخدام جملة `with open(...) as f:` عند التعامل مع الملفات؟",options:["تجعل الملف يفتح بشكل أسرع","تضمن أن الملف سيتم إغلاقه تلقائيًا حتى لو حدث خطأ","تسمح بكتابة أنواع بيانات غير النصوص","تقوم بضغط الملف تلقائيًا"],correctAnswerIndex:1,explanation:"جملة `with` تضمن إغلاق الملف بشكل صحيح وآمن (cleanup) حتى في حالة حدوث استثناءات."},{id:"q_fh_4",text:'إذا فتحت ملفًا للكتابة بالوضع `"w"` وكان الملف موجودًا بالفعل وبه محتوى، ماذا سيحدث لمحتواه القديم؟',options:["سيتم إضافة المحتوى الجديد إلى نهاية المحتوى القديم","سيحدث خطأ ولن تتم الكتابة","سيتم مسح المحتوى القديم بالكامل وكتابة المحتوى الجديد من البداية","سيتم سؤالك إذا كنت تريد استبدال المحتوى"],correctAnswerIndex:2,explanation:'الوضع `"w"` (write) يقوم بمسح (overwrite) محتويات الملف إذا كان موجودًا، أو ينشئ ملفًا جديدًا إذا لم يكن موجودًا.'},{id:"q_fh_5",text:"ما هو الترميز (encoding) الذي يُنصح باستخدامه بشكل عام عند التعامل مع ملفات نصية تحتوي على اللغة العربية في بايثون؟",options:['`"ascii"`','`"latin-1"`','`"utf-8"`','`"cp1252"`'],correctAnswerIndex:2,explanation:'`"utf-8"` هو ترميز قياسي يدعم معظم اللغات بما في ذلك العربية، وهو الخيار المفضل للملفات النصية.'}]},{id:"l2-lesson-7",slug:"exception-handling",title:"مواجهة المفاجآت: التعامل مع الأخطاء والاستثناءات",description:"تعلم كيف تجعل برنامجك أكثر قوة ويتعامل برشاقة مع الأخطاء غير المتوقعة (الاستثناءات).",content:[{type:"heading",text:"لما البرنامج يكح: الأخطاء والاستثناءات (Exception Handling)"},{type:"paragraph",text:"مفيش برنامج مثالي! الأخطاء جزء طبيعي من عملية البرمجة. فيه نوعين من الأخطاء ممكن تقابلهم:"},{type:"list",text:"",items:["**الأخطاء النحوية (Syntax Errors):** دي أخطاء في كتابة الكود نفسه، زي إنك تنسى نقطتين `:` بعد `if` أو تكتب اسم متغير غلط. بايثون بيكتشف الأخطاء دي قبل ما البرنامج يشتغل أصلاً ومش بيخليه يشتغل لحد ما تصلحها.","**الاستثناءات (Exceptions) أو أخطاء وقت التشغيل (Runtime Errors):** دي أخطاء بتحصل والبرنامج شغال. الكود بيكون مكتوب صح نحوياً، بس بيحصل موقف غير متوقع بيخلي البرنامج مش قادر يكمل. مثلاً، لو حاولت تقسم على صفر، أو تفتح ملف مش موجود، أو تحول نص مفيهوش أرقام لرقم. لو متعاملتش مع الاستثناءات دي، البرنامج هيقف فجأة ويطلع رسالة خطأ (Traceback) للمستخدم."]},{type:"paragraph",text:"عشان نخلي برامجنا قوية ومتقفش فجأة في وش المستخدم، بايثون بيوفرلنا طريقة للتعامل مع الاستثناءات دي بشكل أنيق باستخدام جملة `try...except`."},{type:"subheading",text:"1. جملة `try...except` الأساسية:"},{type:"paragraph",text:'الفكرة بسيطة: بنحط الكود اللي "ممكن" يعمل استثناء جوه بلوك `try`. لو حصل استثناء جوه البلوك ده، بايثون هيوقف تنفيذ اللي فاضل في `try` وهيدور على بلوك `except` مناسب يتعامل مع نوع الاستثناء اللي حصل.'},{type:"code",language:"python",text:`try:
    # الكود اللي ممكن يسبب مشكلة
    x = int(input("دخل رقم عشان نقسم 10 عليه: "))
    result = 10 / x
    print(f"نتيجة قسمة 10 على {x} هي: {result}")
except ZeroDivisionError: # لو حصل خطأ القسمة على صفر
    print("مينفعش تقسم على صفر يا صاحبي!")
except ValueError: # لو المستخدم دخل حاجة مش رقم (فـ int() هتعمل ValueError)
    print("القيمة اللي دخلتها دي مش رقم صحيح أصلاً!")

print("البرنامج كمل شغله عادي بعد الـ try-except.")`},{type:"subheading",text:"2. التعامل مع أنواع مختلفة من الاستثناءات:"},{type:"paragraph",text:"ممكن يكون عندك أكتر من بلوك `except` عشان تتعامل مع كل نوع استثناء بشكل مختلف. بايثون هيختار أول بلوك `except` بيطابق نوع الاستثناء اللي حصل."},{type:"paragraph",text:"ممكن كمان تعمل بلوك `except` عام يمسك أي نوع استثناء معرفتوش بشكل خاص، وده بيكون باستخدام `except Exception as e:`. المتغير `e` هنا هيحتوي على معلومات عن الاستثناء اللي حصل. بس خلي بالك، استخدام `except Exception` لوحده ممكن يخفي أخطاء مكنتش متوقعها، فالأفضل دايماً تحاول تتعامل مع أنواع الاستثناءات اللي إنت متوقعها بشكل محدد الأول."},{type:"code",language:"python",text:`numerator = 10
denominators = [2, 0, "a", 5]

for d in denominators:
    try:
        quotient = numerator / d
        print(f"{numerator} / {d} = {quotient}")
    except ZeroDivisionError:
        print(f"لا يمكن القسمة على صفر ({d})")
    except TypeError:
        print(f"لا يمكن القسمة على نوع بيانات خاطئ ({d} من نوع {type(d).__name__})")
    except Exception as general_error:
        print(f"حصل خطأ غير متوقع آخر مع {d}: {general_error}")`},{type:"subheading",text:"3. بلوك `else` مع `try...except`:"},{type:"paragraph",text:'ممكن تضيف بلوك `else` بعد كل بلوكات `except`. الكود اللي جوه `else` بيتنفذ "فقط" لو بلوك `try` خلص شغله كله من غير ما يحصل فيه أي استثناء.'},{type:"code",language:"python",text:`try:
    user_input = input("دخل رقم صحيح: ")
    number = int(user_input)
except ValueError:
    print(f"'{user_input}' ده مش رقم صحيح.")
else:
    # الكود ده هيتنفذ بس لو int(user_input) نجحت
    print(f"الرقم اللي دخلته هو: {number}. شكراً!")`},{type:"subheading",text:"4. بلوك `finally`:"},{type:"paragraph",text:'ساعات بنكون عايزين ننفذ جزء معين من الكود "في كل الأحوال"، سواء حصل استثناء أو محصلش، وسواء تم التعامل مع الاستثناء ده أو لأ. هنا بنستخدم بلوك `finally`. ده بيكون مفيد جداً لعمليات "التنظيف" (Cleanup) زي إنك تقفل ملف فتحته أو تقفل اتصال بقاعدة بيانات، عشان تضمن إن الموارد دي متفضلش مفتوحة.'},{type:"code",language:"python",text:`file = None # نعرفه بره عشان نقدر نوصله في finally
try:
    file_path = "my_data.txt"
    file = open(file_path, "r", encoding="utf-8")
    data = file.read()
    print(f"محتوى الملف '{file_path}':\\n{data}")
except FileNotFoundError:
    print(f"الملف '{file_path}' مش موجود.")
except Exception as e:
    print(f"حصل خطأ أثناء التعامل مع الملف: {e}")
finally:
    if file: # نتأكد إن الملف اتفتح أصلاً قبل ما نحاول نقفله
        file.close()
        print(f"الملف '{file_path}' تم إغلاقه (في finally).")
    else:
        print("مفيش ملف اتفتح عشان يتقفل (في finally).")`},{type:"subheading",text:"5. إثارة الاستثناءات بنفسك (Raising Exceptions) باستخدام `raise`:"},{type:"paragraph",text:"مش بس بايثون هو اللي ممكن يعمل استثناءات. إنت كمان ممكن تثير استثناء بنفسك في الكود بتاعك لو حصل موقف معين إنت شايف إنه خطأ أو غير مسموح بيه. بنستخدم كلمة `raise` ومعاها نوع الاستثناء اللي عايزين نثيره (وممكن رسالة توضيحية)."},{type:"code",language:"python",text:`def calculate_age(birth_year, current_year=2024):
    if birth_year > current_year:
        raise ValueError("سنة الميلاد مينفعش تكون بعد السنة الحالية!")
    if birth_year < 1900:
        raise ValueError("العمر ده كبير أوي، متأكد من سنة الميلاد؟")
    return current_year - birth_year

try:
    age1 = calculate_age(1990)
    print(f"العمر الأول: {age1}")
    age2 = calculate_age(2030) # هنا هيحصل ValueError
    print(f"العمر الثاني: {age2}")
    age3 = calculate_age(1850) # هنا برضه هيحصل ValueError
    print(f"العمر الثالث: {age3}")
except ValueError as ve:
    print(f"خطأ في حساب العمر: {ve}")`},{type:"paragraph",text:"التعامل مع الاستثناءات بيخلي برامجك أكثر اعتمادية واحترافية. بيسمحلك تتوقع المشاكل اللي ممكن تحصل وتتعامل معاها بشكل متحكم فيه بدل ما البرنامج ينهار."}],quiz:[{id:"q_eh_1",text:"ما هو الغرض الأساسي من استخدام `try...except` في بايثون؟",options:["لتسريع تنفيذ الكود","للتعامل مع الأخطاء النحوية (Syntax Errors)","للتعامل مع الاستثناءات (أخطاء وقت التشغيل) ومنع البرنامج من التوقف المفاجئ","لإنشاء دوال جديدة"],correctAnswerIndex:2,explanation:"`try...except` يستخدم لالتقاط ومعالجة الاستثناءات التي تحدث أثناء تشغيل البرنامج."},{id:"q_eh_2",text:"أي بلوك يتم تنفيذه إذا لم يحدث أي استثناء داخل بلوك `try` (بافتراض وجود `else`)؟",options:["`except`","`finally`","`else`","لا يتم تنفيذ أي بلوك إضافي"],correctAnswerIndex:2,explanation:"بلوك `else` يتم تنفيذه فقط إذا لم يثر بلوك `try` أي استثناء."},{id:"q_eh_3",text:"متى يتم تنفيذ الكود الموجود داخل بلوك `finally`؟",options:["فقط إذا حدث استثناء","فقط إذا لم يحدث استثناء","دائمًا، سواء حدث استثناء أم لا","فقط إذا تم استخدام جملة `raise`"],correctAnswerIndex:2,explanation:"بلوك `finally` يتم تنفيذه دائمًا، مما يجعله مناسبًا لعمليات التنظيف مثل إغلاق الملفات."},{id:"q_eh_4",text:"ماذا يحدث إذا حدث استثناء من نوع `TypeError` داخل بلوك `try`، ولم يكن هناك بلوك `except TypeError:` مخصص له، ولكن كان هناك بلوك `except Exception as e:`؟",options:["سيتم تجاهل الاستثناء","سيتم التقاط الاستثناء بواسطة `except Exception as e:`","سيتوقف البرنامج فورًا دون تنفيذ أي بلوك `except`","سيتم تحويل `TypeError` إلى `Exception`"],correctAnswerIndex:1,explanation:"`except Exception as e:` هو بلوك عام يمكنه التقاط أي نوع من الاستثناءات (التي ترث من `Exception`) إذا لم يتم التقاطها بواسطة بلوك `except` أكثر تحديدًا قبله."},{id:"q_eh_5",text:"ما هي الكلمة المفتاحية المستخدمة لإثارة استثناء بشكل برمجي (يدوي) في بايثون؟",options:["`throw`","`exception`","`error`","`raise`"],correctAnswerIndex:3,explanation:"كلمة `raise` تستخدم لإثارة استثناء بشكل متعمد في الكود."}]},{id:"l2-lesson-8",slug:"modules-packages",title:"تنظيم الكود المتقدم: الوحدات (Modules) والحزم (Packages)",description:"تعلم كيفية تقسيم برنامجك إلى أجزاء (وحدات) قابلة لإعادة الاستخدام، واستخدام مكتبات بايثون.",content:[{type:"heading",text:"ترتيب دولاب الأكواد: الوحدات (Modules) والحزم (Packages)"},{type:"paragraph",text:'لما برامجك بتبدأ تكبر، مش من العملي إنك تحط كل الكود بتاعك في ملف واحد. الدنيا هتبقى زحمة وصعب تفهم أو تعدل حاجة. بايثون بيوفرلك طريقة لتنظيم الكود ده في "وحدات" (Modules) و "حزم" (Packages).'},{type:"subheading",text:"1. الوحدات (Modules):"},{type:"paragraph",text:'الوحدة (Module) هي ببساطة ملف بايثون عادي بامتداد `.py` بيحتوي على دوال، أصناف، ومتغيرات إنت عملتها. الفايدة من الوحدة إنك ممكن "تستوردها" (Import) في ملف بايثون تاني وتستخدم الحاجات اللي متعرفة جواها. ده بيساعد على:'},{type:"list",text:"",items:["**إعادة استخدام الكود (Code Reusability):** لو عندك دالة مفيدة، ممكن تحطها في وحدة وتستوردها في أي مشروع تاني بدل ما تكتبها كل مرة.","**تنظيم الكود (Organization):** بتقسم برنامجك لملفات أصغر كل ملف مسؤول عن جزء معين، فبيبقى أسهل في الفهم والصيانة.",'**تجنب تضارب الأسماء (Namespace Isolation):** لو عندك دالة اسمها `calculate` في وحدة، ودالة تانية بنفس الاسم في وحدة تانية، مش هيحصل لخبطة لأن كل واحدة فيهم بتكون في "مساحة أسماء" (Namespace) خاصة بالوحدة بتاعتها.']},{type:"paragraph",text:"عشان تستورد وحدة، بتستخدم كلمة `import`:"},{type:"code",language:"python",text:`# مثال: هنعمل ملف اسمه my_math_functions.py وجواه الدوال دي:
# def add(x, y):
#     return x + y
# 
# def subtract(x, y):
#     return x - y

# في ملف تاني (مثلاً main.py) في نفس المجلد:
import my_math_functions # بنستورد الوحدة كلها

result1 = my_math_functions.add(10, 5) # لازم نستخدم اسم الوحدة قبل اسم الدالة
result2 = my_math_functions.subtract(10, 5)
print(f"الجمع: {result1}, الطرح: {result2}")

# طريقة تانية: نستورد حاجات معينة بس من الوحدة
from my_math_functions import add # دلوقتي نقدر نستخدم add مباشرة
result3 = add(20, 7)
print(f"جمع تاني: {result3}")

# ممكن نستورد كل حاجة من الوحدة (بس دي مش طريقة مفضلة أوي لأنها ممكن تعمل تضارب أسماء)
# from my_math_functions import *
# result4 = subtract(50, 10)

# ممكن ندي اسم مستعار (alias) للوحدة أو للحاجة اللي بنستوردها
import my_math_functions as mmf
result5 = mmf.add(100, 1)

from my_math_functions import subtract as sub
result6 = sub(9, 4)`},{type:"paragraph",text:'بايثون بييجي معاه "مكتبة قياسية" (Standard Library) ضخمة جداً فيها وحدات كتير جاهزة ممكن تستخدمها علطول زي `math` (للعمليات الرياضية المتقدمة)، `random` (للأرقام العشوائية)، `datetime` (للتعامل مع الوقت والتاريخ)، `json` (للتعامل مع بيانات JSON)، `os` (للتعامل مع نظام التشغيل)، وغيرها كتير.'},{type:"subheading",text:"2. الحزم (Packages):"},{type:"paragraph",text:'لما مشروعك بيكبر أكتر وبيبقى عندك وحدات كتير، ممكن تحتاج تنظم الوحدات دي نفسها. هنا بتيجي "الحزم" (Packages). الحزمة هي ببساطة "مجلد" (Folder) بيحتوي على وحدات بايثون (ملفات `.py`) وممكن كمان يحتوي على حزم فرعية (Sub-packages).'},{type:"paragraph",text:"عشان بايثون يعتبر المجلد ده حزمة، لازم يكون جواه ملف خاص اسمه `__init__.py`. الملف ده ممكن يكون فاضي خالص، أو ممكن يكون فيه كود بايثون بيشتغل أول ما الحزمة دي بتستورد. ممكن كمان تستخدمه عشان تحدد إيه الوحدات أو الأسماء اللي عايزها تكون متاحة مباشرة لما حد يعمل `from my_package import ...`."},{type:"code",language:"text",text:`# مثال لهيكل حزمة:
# my_project/
# ├── main_script.py
# └── my_package/            <-- دي الحزمة الرئيسية
#     ├── __init__.py
#     ├── module1.py
#     ├── module2.py
#     └── sub_package/       <-- دي حزمة فرعية
#         ├── __init__.py
#         └── module3.py`},{type:"paragraph",text:"لو افترضنا `module1.py` جواه دالة `func1()`، و `module3.py` جواه دالة `func3()`، ممكن نستوردهم في `main_script.py` كده:"},{type:"code",language:"python",text:`# في main_script.py

# استيراد من وحدة جوه الحزمة الرئيسية
from my_package import module1
module1.func1()

# أو نستورد الدالة مباشرة
from my_package.module1 import func1
func1()

# استيراد من وحدة جوه حزمة فرعية
from my_package.sub_package import module3
module3.func3()

# لو __init__.py بتاع my_package كان فيه مثلاً:
# # في my_package/__init__.py
# from .module1 import func1
# from .sub_package.module3 import func3
# 
# ساعتها في main_script.py ممكن نعمل:
# from my_package import func1, func3
# func1()
# func3()`},{type:"subheading",text:'فائدة `if __name__ == "__main__":`'},{type:"paragraph",text:'كتير أوي هتشوف السطر ده في ملفات بايثون: `if __name__ == "__main__":`. إيه معناه؟'},{type:"paragraph",text:'بايثون بيدي متغير خاص اسمه `__name__` لكل ملف (وحدة). لو الملف ده هو الملف الرئيسي اللي إنت مشغله مباشرة من الترمنال (مثلاً `python my_script.py`)، قيمة `__name__` جوه الملف ده بتكون هي السلسلة النصية `"__main__"`. أما لو الملف ده تم استيراده كوحدة في ملف تاني، قيمة `__name__` جواه بتكون هي اسم الوحدة نفسها (اسم الملف من غير `.py`).'},{type:"paragraph",text:'فالشرط ده بيسمحلك تكتب كود معين يشتغل "فقط" لما الملف يتنفذ كبرنامج رئيسي، وميشتغلش لما الملف ده يتم استيراده كوحدة في مكان تاني. ده بيكون مفيد جداً لو عايز تحط مثلاً كود تجريبي أو أمثلة استخدام للدوال اللي في الوحدة بتاعتك، من غير ما الكود ده يشتغل كل مرة حد يستورد وحدتك.'},{type:"code",language:"python",text:`# في ملف اسمه my_utility_module.py

def useful_function():
    print("دي دالة مفيدة جداً!")

print(f"قيمة __name__ في my_utility_module.py هي: {__name__}")

if __name__ == "__main__":
    print("الملف ده بيشتغل كبرنامج رئيسي!")
    useful_function()
    print("ده كود تجريبي مش هيشتغل لو حد عملي import.")

# لو عملت import my_utility_module في ملف تاني، هيطبع قيمة __name__ ومش هينفذ اللي جوه الـ if.`},{type:"paragraph",text:"الوحدات والحزم أساسية لتنظيم المشاريع الكبيرة والقابلة للصيانة. بتخليك تبني مكتبات من الكود تقدر تستخدمها في أكتر من مكان، وبتخلي التعاون مع مبرمجين تانيين أسهل بكتير."}],quiz:[{id:"q_mp_1",text:"ما هو الملف الذي يجب أن يكون موجودًا داخل مجلد لكي يعتبره بايثون حزمة (Package)؟",options:["`main.py`","`__init__.py`","`setup.py`","`package.json`"],correctAnswerIndex:1,explanation:"ملف `__init__.py` (حتى لو فارغ) يشير إلى أن المجلد هو حزمة بايثون."},{id:"q_mp_2",text:"إذا كان لديك وحدة اسمها `utils.py` وبها دالة `helper()`، كيف يمكنك استيراد الدالة واستخدامها مباشرة باسم `helper()`؟",options:["`import utils; utils.helper()`","`import utils.helper`","`from utils import helper; helper()`","`load utils.helper`"],correctAnswerIndex:2,explanation:"`from utils import helper` يسمح باستدعاء `helper()` مباشرة."},{id:"q_mp_3",text:'ما هي الفائدة الرئيسية من استخدام `if __name__ == "__main__":` في سكربت بايثون؟',options:["لتسريع تنفيذ الكود","للسماح بتنفيذ جزء من الكود فقط عندما يتم تشغيل الملف مباشرة وليس عندما يتم استيراده كوحدة","لتعريف متغيرات عامة فقط","لإجبار بايثون على استخدام إصدار معين"],correctAnswerIndex:1,explanation:"هذا الشرط يسمح بتمييز ما إذا كان الملف يتم تشغيله كبرنامج رئيسي أو يتم استيراده، مما يمكن من وضع كود اختبار أو تشغيل خاص بالملف."},{id:"q_mp_4",text:"أي من الوحدات التالية جزء من المكتبة القياسية لبايثون ويستخدم للعمليات الرياضية المتقدمة (مثل الجذور التربيعية والدوال المثلثية)؟",options:["`numpy` (مكتبة خارجية قوية جداً للرياضيات)","`requests` (مكتبة خارجية لطلبات الويب)","`math` (جزء من المكتبة القياسية)","`django` (إطار عمل ويب)"],correctAnswerIndex:2,explanation:"موديول `math` هو جزء من المكتبة القياسية لبايثون ويوفر دوال رياضية أساسية ومتقدمة."},{id:"q_mp_5",text:"لإعطاء اسم مستعار (alias) لوحدة عند استيرادها، أي صيغة تستخدم؟",options:["`import my_module alias new_name`","`import my_module as new_name`","`import new_name from my_module`","`import my_module to new_name`"],correctAnswerIndex:1,explanation:"نستخدم `import module_name as alias_name` لإعطاء اسم مستعار للوحدة."}]},{id:"l2-lesson-9",slug:"advanced-string-manipulation",title:"التعامل المتقدم مع النصوص وتنسيقها",description:"اكتشف طرقًا متقدمة لتنسيق النصوص والتعامل معها بمرونة باستخدام f-strings، دالة `.format()`، ودوال النصوص المتقدمة.",content:[{type:"heading",text:"فنون التعامل مع الكلام: النصوص المتقدمة في بايثون"},{type:"paragraph",text:"النصوص (Strings) من أكتر أنواع البيانات اللي بنتعامل معاها. بايثون بيوفر طرق كتير قوية ومرنة عشان نعالج النصوص دي وننسقها بالشكل اللي إحنا عايزينه."},{type:"subheading",text:"1. طرق تنسيق النصوص (String Formatting):"},{type:"paragraph",text:'زمان كنا بنستخدم علامة `%` عشان ندمج قيم متغيرات مع نصوص (زي في لغة C). الطريقة دي لسه شغالة بس مبقتش مفضلة أوي. بعد كده ظهرت دالة `.format()`، وحالياً الطريقة الأحدث والأسهل هي الـ "f-strings" (Formatted String Literals) اللي ظهرت في بايثون 3.6+.'},{type:"code",language:"python",text:`name = "Bod Code"
language = "بايثون"
years = 3

# طريقة % (قديمة شوية)
print("أهلاً بك في %s! نحن نعلم %s منذ %d سنوات." % (name, language, years))

# طريقة .format()
print("أهلاً بك في {}! نحن نعلم {} منذ {} سنوات.".format(name, language, years))
print("أهلاً بك في {0}! نحن نعلم {1} منذ {2} سنوات.".format(name, language, years)) # بالأرقام
print("أهلاً بك في {app_name}! نحن نعلم {lang} منذ {duration} سنوات.".format(app_name=name, lang=language, duration=years)) # بالأسماء

# طريقة f-strings (الأحدث والأسهل والأكثر قراءة)
print(f"أهلاً بك في {name}! نحن نعلم {language} منذ {years} سنوات.")

# f-strings بتسمحلك تحط تعبيرات بايثون جوه الأقواس المعقوفة {}
print(f"بعد سنتين، هيكون بقالنا {years + 2} سنوات في تدريس {language.upper()}.")`},{type:"paragraph",text:"f-strings عادةً هي الخيار الأفضل دلوقتي بسبب سهولتها وقراءتها."},{type:"subheading",text:"2. دوال النصوص المفيدة (Useful String Methods):"},{type:"paragraph",text:"النصوص في بايثون عبارة عن كائنات (objects) وعندها دوال (methods) كتير جداً ممكن نستخدمها عشان نعمل عليها عمليات مختلفة. الدوال دي مش بتغير النص الأصلي، لكنها بترجع نص جديد بالنتيجة."},{type:"list",text:"أمثلة على دوال النصوص المهمة:",items:["`str.upper()`: بتحول كل الحروف لكبيرة (capital).","`str.lower()`: بتحول كل الحروف لصغيرة (small).","`str.capitalize()`: بتحول أول حرف بس في النص لكبير والباقي صغير.","`str.title()`: بتحول أول حرف من كل كلمة في النص لكبير.","`str.strip()`: بتشيل أي مسافات بيضاء (spaces, tabs, newlines) من بداية ونهاية النص.","`str.lstrip()`: بتشيل المسافات البيضاء من بداية النص بس (left strip).","`str.rstrip()`: بتشيل المسافات البيضاء من نهاية النص بس (right strip).",'(ممكن كمان تديهم حرف أو مجموعة حروف معينة يشيلوها بدل المسافات، مثال: `"www.example.com".strip("w.moc")` )',"`str.startswith(prefix)`: بترجع `True` لو النص بيبدأ بالـ `prefix` ده، وإلا `False`.","`str.endswith(suffix)`: بترجع `True` لو النص بينتهي بالـ `suffix` ده، وإلا `False`.","`str.find(substring)`: بتبحث عن `substring` جوه النص. لو لقيته، بترجع فهرس (index) أول ظهور ليه. لو ملقيتهوش، بترجع `-1`.","`str.index(substring)`: زي `find`، بس لو ملقاش الـ `substring` بيعمل خطأ `ValueError`.","`str.replace(old, new)`: بتستبدل كل ظهور للـ `old` substring بالـ `new` substring.","`str.split(separator)`: بتقسم النص عند كل ظهور للـ `separator` وبترجع قايمة (list) بالأجزاء. لو محددتش `separator`، بتقسم عند أي مسافة بيضاء.","`separator.join(list_of_strings)`: بتجمع قايمة من النصوص في نص واحد، وبتحط الـ `separator` بين كل نص والتاني."]},{type:"code",language:"python",text:`my_text = "  أهلاً بك يا عالم بايثون الرائع! بايثون لغة ممتعة.  "

print(f"الأصلي: '{my_text}'")
print(f"UPPER: {my_text.upper()}")
print(f"strip: '{my_text.strip()}'")
print(f"هل يبدأ بـ '  أهلاً': {my_text.startswith("  أهلاً")}") # True
print(f"أول ظهور لكلمة 'بايثون': {my_text.find("بايثون")}")

replaced_text = my_text.replace("بايثون", "Bod Code")
print(f"بعد الاستبدال: {replaced_text}")

words = my_text.strip().split(" ") # نشيل المسافات ونقسم عند كل مسافة
print(f"الكلمات: {words}")

joined_text = "---".join(["واحد", "اتنين", "تلاتة"])
print(f"النص المدمج: {joined_text}") # واحد---اتنين---تلاتة`},{type:"subheading",text:"خصائص تانية للنصوص:"},{type:"list",text:"",items:["**النصوص غير قابلة للتغيير (Immutable):** زي الصفوف (Tuples)، النصوص في بايثون غير قابلة للتغيير بعد ما تعملها. أي دالة بتعملها على نص بترجع نص جديد، مش بتغير الأصلي.","**الوصول للحروف (Indexing) والتقطيع (Slicing):** ممكن توصل لحرف معين في النص عن طريق الفهرس بتاعه (بيبدأ من 0)، وممكن تاخد جزء من النص (تقطيع) بنفس طريقة القوائم.","`len(string)`: بترجع طول النص (عدد الحروف).","**التحقق من نوع الحروف:** فيه دوال زي `str.isdigit()` (هل كل الحروف أرقام؟)، `str.isalpha()` (هل كل الحروف أبجدية؟)، `str.islower()`، `str.isupper()`، `str.isspace()` (هل كل الحروف مسافات بيضاء؟)."]},{type:"code",language:"python",text:`greeting = "مرحباً"
print(f"طول كلمة '{greeting}': {len(greeting)}")
print(f"أول حرف: {greeting[0]}") # م
print(f"آخر حرف: {greeting[-1]}") # اً
print(f"جزء من النص: {greeting[1:4]}") # رحب (من الفهرس 1 لحد قبل 4)

# greeting[0] = "ن" # السطر ده هيعمل خطأ TypeError لأن النصوص immutable

num_str = "123"
alpha_str = "BodCode"
print(f"'{num_str}' is digit? {num_str.isdigit()}") # True
print(f"'{alpha_str}' is alpha? {alpha_str.isalpha()}") # True`},{type:"paragraph",text:"التعامل مع النصوص مهارة يومية تقريباً لأي مبرمج. كل ما تعرف دوال وطرق أكتر، كل ما شغلك هيبقى أسهل وأسرع."}],quiz:[{id:"q_str_1",text:"أي من الطرق التالية هي الأحدث والمفضلة لتنسيق النصوص في بايثون 3.6+ ؟",options:["استخدام علامة `%`","دالة `.format()`","f-strings (Formatted String Literals)","دمج النصوص باستخدام `+` فقط"],correctAnswerIndex:2,explanation:"f-strings هي الطريقة الأحدث والأكثر قراءة ومرونة لتنسيق النصوص."},{id:"q_str_2",text:"ماذا تفعل دالة `my_string.strip()`؟",options:["تحذف كل المسافات من النص","تحذف المسافات البيضاء من بداية ونهاية النص فقط","تحذف المسافات البيضاء من بداية النص فقط","تحول النص إلى قائمة كلمات"],correctAnswerIndex:1,explanation:"`.strip()` تزيل المسافات البيضاء (أو الحروف المحددة) من طرفي النص."},{id:"q_str_3",text:'إذا كانت `text = "Hello Python"`، فماذا سيكون ناتج `text.replace("Python", "World")`؟',options:['`"Hello World"`','`"World Python"`','النص الأصلي `text` سيتغير إلى `"Hello World"`',"خطأ، لا يمكن استبدال النصوص"],correctAnswerIndex:0,explanation:"`.replace()` تعيد نسخة جديدة من النص مع استبدال الجزء القديم بالجديد. النص الأصلي لا يتغير لأن النصوص immutable."},{id:"q_str_4",text:'ما هي نتيجة `"-".join(["a", "b", "c"])`؟',options:['`["a-b-c"]`','`"a-b-c"`','`"abc-"`','`"a", "-", "b", "-", "c"`'],correctAnswerIndex:1,explanation:"`.join()` تدمج قائمة من النصوص باستخدام السلسلة التي استدعيت عليها كفاصل."},{id:"q_str_5",text:'ماذا تعيد دالة `my_string.find("xyz")` إذا لم يتم العثور على السلسلة الفرعية `"xyz"` في `my_string`؟',options:["`None`","`False`","خطأ `ValueError`","`-1`"],correctAnswerIndex:3,explanation:"`.find()` تعيد `-1` إذا لم يتم العثور على السلسلة الفرعية. بينما `.index()` تثير `ValueError` في هذه الحالة."}]},{id:"l2-lesson-10",slug:"datetime-module",title:"التعامل مع التواريخ والأوقات (`datetime`)",description:"تعلم كيفية إنشاء، تعديل، وتنسيق التواريخ والأوقات في بايثون باستخدام موديول `datetime`.",content:[{type:"heading",text:"لا تفوت الميعاد: التعامل مع التواريخ والأوقات بـ `datetime`"},{type:"paragraph",text:"كتير من التطبيقات بتحتاج تتعامل مع التواريخ والأوقات: تسجيل وقت حدوث حاجة معينة، حساب فرق بين تاريخين، عرض التاريخ بشكل معين للمستخدم، وهكذا. بايثون بيوفر موديول مدمج قوي اسمه `datetime` للتعامل مع كل ده."},{type:"code",language:"python",text:"import datetime"},{type:"subheading",text:"المكونات الأساسية في موديول `datetime`:"},{type:"list",text:"أهم الكائنات (Classes) اللي هتتعامل معاها:",items:["`datetime.date`: بيمثل تاريخ (سنة، شهر، يوم).","`datetime.time`: بيمثل وقت خلال اليوم (ساعة، دقيقة، ثانية، مايكروثانية).","`datetime.datetime`: بيمثل تاريخ ووقت مع بعض (سنة، شهر، يوم، ساعة، دقيقة، ثانية، مايكروثانية). ده أكتر واحد بنستخدمه.",'`datetime.timedelta`: بيمثل "فترة زمنية" أو فرق بين تاريخين أو وقتين (مثلاً، 5 أيام، أو ساعتين و 30 دقيقة).']},{type:"subheading",text:"1. الحصول على التاريخ والوقت الحالي:"},{type:"code",language:"python",text:`# التاريخ الحالي
today_date = datetime.date.today()
print(f"تاريخ النهاردة: {today_date}")
print(f"السنة: {today_date.year}, الشهر: {today_date.month}, اليوم: {today_date.day}")

# التاريخ والوقت الحالي
now_datetime = datetime.datetime.now()
print(f"الوقت الحالي بالظبط: {now_datetime}")
print(f"الساعة: {now_datetime.hour}, الدقيقة: {now_datetime.minute}, الثانية: {now_datetime.second}")

# ممكن تجيب الوقت الحالي بتوقيت UTC (التوقيت العالمي المنسق) لو عايز تتجنب مشاكل التوقيت المحلي
# utc_now = datetime.datetime.utcnow()
# print(f"الوقت الحالي UTC: {utc_now}")`},{type:"subheading",text:"2. إنشاء كائنات `datetime` و `date` و `time` بنفسك:"},{type:"code",language:"python",text:`# إنشاء تاريخ معين
specific_date = datetime.date(2025, 1, 20) # 20 يناير 2025
print(f"تاريخ معين: {specific_date}")

# إنشاء وقت معين
specific_time = datetime.time(14, 30, 0) # الساعة 2 ونص الضهر (نظام 24 ساعة)
print(f"وقت معين: {specific_time}")

# إنشاء تاريخ ووقت معين
specific_datetime = datetime.datetime(2024, 7, 26, 10, 0, 0) # 26 يوليو 2024، الساعة 10 صباحاً
print(f"تاريخ ووقت معين: {specific_datetime}")`},{type:"subheading",text:"3. تنسيق التواريخ والأوقات كنصوص (Formatting - `strftime`):"},{type:"paragraph",text:'ساعات بنكون عايزين نعرض التاريخ أو الوقت للمستخدم بشكل معين (مثلاً "26/07/2024" أو "10:00 AM"). بنستخدم دالة `strftime()` (string format time) اللي بتاخد "كود تنسيق" (format code) بيوصف الشكل المطلوب.'},{type:"list",text:"أشهر أكواد التنسيق (ممكن تلاقي قايمة كاملة في توثيق بايثون):",items:["`%Y`: السنة بأربع أرقام (e.g., 2024).","`%y`: السنة برقمين (e.g., 24).","`%m`: الشهر كرقم (01-12).","`%B`: اسم الشهر كامل (e.g., July).","`%b`: اسم الشهر مختصر (e.g., Jul).","`%d`: اليوم في الشهر كرقم (01-31).","`%A`: اسم اليوم كامل (e.g., Friday).","`%a`: اسم اليوم مختصر (e.g., Fri).","`%H`: الساعة بنظام 24 (00-23).","`%I`: الساعة بنظام 12 (01-12).","`%M`: الدقايق (00-59).","`%S`: الثواني (00-59).","`%p`: AM أو PM (لو مستخدم `%I`)."]},{type:"code",language:"python",text:`dt_object = datetime.datetime.now()

formatted_style1 = dt_object.strftime("%d/%m/%Y %H:%M:%S")
print(f"شكل 1: {formatted_style1}")

formatted_style2 = dt_object.strftime("%A, %B %d, %Y - %I:%M %p")
print(f"شكل 2: {formatted_style2}") # هيستخدم أسماء الشهور والأيام بالإنجليزي افتراضياً

# لو عايز أسماء عربية، ممكن تحتاج مكتبات تانية أو تعملها يدوي (معقد شوية مع strftime لوحدها)`},{type:"subheading",text:"4. تحويل النصوص إلى كائنات `datetime` (Parsing - `strptime`):"},{type:"paragraph",text:"لو عندك تاريخ أو وقت كنص (مثلاً من ملف أو من المستخدم) وعايز تحوله لكائن `datetime` عشان تقدر تعمل عليه عمليات، بتستخدم دالة `datetime.datetime.strptime()` (string parse time). الدالة دي بتاخد النص وكود التنسيق اللي بيوصف شكل النص ده."},{type:"code",language:"python",text:`date_string = "2023-10-15 17:45:30"
format_code = "%Y-%m-%d %H:%M:%S"

try:
    parsed_datetime = datetime.datetime.strptime(date_string, format_code)
    print(f"النص الأصلي: '{date_string}'")
    print(f"الكائن بعد التحويل: {parsed_datetime}")
    print(f"سنة الكائن المحول: {parsed_datetime.year}")
except ValueError as e:
    print(f"صيغة التاريخ في النص مش مطابقة لكود التنسيق: {e}")`},{type:"subheading",text:"5. التعامل مع الفترات الزمنية (`timedelta`):"},{type:"paragraph",text:"كائن `timedelta` بيمثل فرق بين تاريخين أو وقتين. ممكن تستخدمه عشان تضيف أو تطرح فترة زمنية من تاريخ أو وقت معين."},{type:"code",language:"python",text:`now = datetime.datetime.now()

# فترة زمنية: 5 أيام، 3 ساعات، و 30 دقيقة
time_delta = datetime.timedelta(days=5, hours=3, minutes=30)

future_datetime = now + time_delta
print(f"الوقت الحالي: {now}")
print(f"الوقت بعد 5 أيام و 3.5 ساعات: {future_datetime}")

past_datetime = now - datetime.timedelta(weeks=2) # ممكن تستخدم weeks, seconds, microseconds كمان
print(f"الوقت من أسبوعين فاتوا: {past_datetime}")

# حساب الفرق بين تاريخين
date1 = datetime.datetime(2024, 1, 1)
date2 = datetime.datetime(2024, 1, 15, 12, 0, 0)
difference = date2 - date1
print(f"الفرق بين {date1} و {date2} هو: {difference}")
print(f"عدد الأيام في الفرق: {difference.days}")
print(f"عدد الثواني الكلي في الفرق: {difference.total_seconds()}")`},{type:"paragraph",text:"موديول `datetime` أساسي جداً لأي تطبيق بيحتاج يتعامل مع الوقت. ممكن يكون فيه تفاصيل أكتر بخصوص المناطق الزمنية (Timezones) والتعامل مع التوقيت الصيفي، بس دي بتكون مواضيع متقدمة شوية."}],quiz:[{id:"q_dt_1",text:"أي كلاس من موديول `datetime` يستخدم لتمثيل تاريخ ووقت معًا؟",options:["`datetime.date`","`datetime.time`","`datetime.datetime`","`datetime.timedelta`"],correctAnswerIndex:2,explanation:"`datetime.datetime` يجمع بين معلومات التاريخ والوقت."},{id:"q_dt_2",text:"ما هي الدالة التي تستخدم للحصول على التاريخ والوقت الحاليين؟",options:["`datetime.datetime.current()`","`datetime.datetime.now()` (أو `datetime.datetime.today()`)","`datetime.time.get()`","`datetime.date.fetch()`"],correctAnswerIndex:1,explanation:"`datetime.datetime.now()` أو `datetime.datetime.today()` يعيدان التاريخ والوقت الحاليين."},{id:"q_dt_3",text:"لتحويل كائن `datetime` إلى سلسلة نصية بتنسيق معين، أي دالة تستخدم؟",options:["`strftime()`","`strptime()`","`format_datetime()`","`parse_time()`"],correctAnswerIndex:0,explanation:"`strftime()` (string format time) تستخدم لتنسيق كائن `datetime` إلى نص."},{id:"q_dt_4",text:'ما هو كود التنسيق (format code) الذي يمثل "السنة بأربعة أرقام" في `strftime` و `strptime`؟',options:["`%y`","`%Y`","`%yr`","`%year`"],correctAnswerIndex:1,explanation:"`%Y` يمثل السنة بأربعة أرقام (مثل 2024)، بينما `%y` يمثلها برقمين (مثل 24)."},{id:"q_dt_5",text:"ماذا يمثل كائن `datetime.timedelta`؟",options:["تاريخًا مستقبليًا محددًا","وقتًا محددًا في اليوم","فترة زمنية أو فرقًا بين تاريخين/وقتين","تقويمًا سنويًا"],correctAnswerIndex:2,explanation:"`timedelta` يستخدم لتمثيل الفروق الزمنية والقيام بعمليات حسابية عليها مع التواريخ والأوقات."}]},{id:"l2-lesson-11",slug:"args-kwargs-unpacking",title:"المزيد عن الدوال: `*args`, `**kwargs` وتفكيك المعاملات",description:"تعمق في كيفية إنشاء دوال مرنة تقبل عددًا متغيرًا من المعاملات الموضعية والاسمية، وكيفية استخدام تفكيك المعاملات.",content:[{type:"heading",text:"دوال سوبر مرنة: `*args` و `**kwargs` وفك المعاملات"},{type:"paragraph",text:"في بايثون، ساعات بنكون عايزين نعمل دالة تقدر تاخد عدد مش ثابت من الـ arguments (الوسائط). مثلاً، دالة بتجمع أي عدد من الأرقام، أو دالة بتطبع أي عدد من القيم. هنا بتيجي فايدة `*args` و `**kwargs`."},{type:"subheading",text:"1. `*args` (لتمرير عدد متغير من الوسائط الموضعية - Positional Arguments):"},{type:"paragraph",text:'لو حطيت `*args` (الاسم `args` ده مجرد عرف، ممكن تسميه أي حاجة تانية بس لازم النجمة `*` قبله) في تعريف الدالة بتاعتك كآخر معامل موضعي، ده معناه إن الدالة دي ممكن تاخد أي عدد إضافي من الوسائط الموضعية. بايثون هيجمع كل الوسائط الموضعية الزيادة دي في "صف" (Tuple) بالاسم اللي إنت اخترته (هنا `args`).'},{type:"code",language:"python",text:`def print_all_arguments(*args):
    print(f"نوع args هو: {type(args)}") # <class 'tuple'>
    print(f"الوسائط اللي اتبعتت: {args}")
    for arg in args:
        print(f"  - الوسيط: {arg}")

print_all_arguments(1, "مرحباً", True, 3.14)
# الناتج:
# نوع args هو: <class 'tuple'>
# الوسائط اللي اتبعتت: (1, 'مرحباً', True, 3.14)
#   - الوسيط: 1
#   - الوسيط: مرحباً
#   - الوسيط: True
#   - الوسيط: 3.14

print_all_arguments() # ممكن منبعتش أي حاجة، args هيبقى tuple فاضي ()

def sum_numbers(first_num, *other_numbers): # ممكن يكون فيه معاملات عادية قبل *args
    total = first_num
    for num in other_numbers:
        total += num
    return total

print(f"مجموع 1,2,3 هو: {sum_numbers(1, 2, 3)}") # 6
print(f"مجموع 10,20,30,40 هو: {sum_numbers(10, 20, 30, 40)}") # 100
print(f"مجموع 5 بس هو: {sum_numbers(5)}") # 5 (other_numbers هيكون tuple فاضي)`},{type:"subheading",text:"2. `**kwargs` (لتمرير عدد متغير من الوسائط الاسمية/المفتاحية - Keyword Arguments):"},{type:"paragraph",text:'لو حطيت `**kwargs` (برضه الاسم `kwargs` عرف، المهم النجمتين `**` قبله) في تعريف الدالة كآخر معامل خالص، ده معناه إن الدالة ممكن تاخد أي عدد إضافي من الوسائط الاسمية (اللي بتتكتب على شكل `key=value`). بايثون هيجمع كل الوسائط الاسمية الزيادة دي في "قاموس" (Dictionary) بالاسم اللي اخترته (هنا `kwargs`). المفاتيح هتكون أسماء المعاملات، والقيم هتكون القيم اللي اتبعتتلها.'},{type:"code",language:"python",text:`def print_keyword_arguments(**kwargs):
    print(f"نوع kwargs هو: {type(kwargs)}") # <class 'dict'>
    print(f"الوسائط الاسمية اللي اتبعتت: {kwargs}")
    for key, value in kwargs.items():
        print(f"  - المفتاح '{key}' قيمته: {value}")

print_keyword_arguments(name="أحمد", age=30, city="القاهرة", country="مصر")
# الناتج:
# نوع kwargs هو: <class 'dict'>
# الوسائط الاسمية اللي اتبعتت: {'name': 'أحمد', 'age': 30, 'city': 'القاهرة', 'country': 'مصر'}
#   - المفتاح 'name' قيمته: أحمد
#   - المفتاح 'age' قيمته: 30
#   - المفتاح 'city' قيمته: القاهرة
#   - المفتاح 'country' قيمته: مصر

print_keyword_arguments() # kwargs هيبقى قاموس فاضي {}

# ممكن نجمع بينهم كلهم (بالترتيب ده: معاملات عادية، بعدين *args، بعدين **kwargs)
def super_function(param1, param2, *args, **kwargs):
    print(f"param1: {param1}")
    print(f"param2: {param2}")
    print(f"args: {args}")
    print(f"kwargs: {kwargs}")

super_function("قيمة1", "قيمة2", 10, 20, extra_arg="زيادة", another_extra=True)`},{type:"subheading",text:"3. تفكيك المعاملات (Unpacking Arguments) عند استدعاء الدالة:"},{type:"paragraph",text:'العكس برضه ممكن! لو عندك قايمة أو tuple وعايز تفككها وتمرر عناصرها كأنهم وسائط موضعية منفصلة لدالة، ممكن تستخدم النجمة `*` "قبل" اسم القايمة أو الـ tuple وانت بتستدعي الدالة.'},{type:"paragraph",text:'ولو عندك قاموس وعايز تفككه وتمرر أزواجه (key-value pairs) كأنهم وسائط اسمية منفصلة لدالة، ممكن تستخدم النجمتين `**` "قبل" اسم القاموس وانت بتستدعي الدالة.'},{type:"code",language:"python",text:`def describe_person(name, age, city):
    print(f"{name} عنده {age} سنة وساكن في {city}.")

person_list = ["علي", 25, "أسوان"]
describe_person(*person_list) # كأنك كتبت describe_person("علي", 25, "أسوان")

person_dict = {"name": "سارة", "city": "الإسكندرية", "age": 28}
describe_person(**person_dict) # كأنك كتبت describe_person(name="سارة", city="الإسكندرية", age=28)
                             # الترتيب في القاموس مش مهم هنا طالما المفاتيح بتطابق أسماء المعاملات

# مثال تاني مع دالة بتاخد *args
numbers_to_sum = [1, 2, 3, 4, 5]
# فاكرين دالة sum_numbers(first_num, *other_numbers)؟
# لو عايزين نبعت أول عنصر كـ first_num والباقي كـ other_numbers:
# print(sum_numbers(numbers_to_sum[0], *numbers_to_sum[1:])) # الناتج 15

# دالة print المدمجة نفسها بتاخد *args
my_parts = ["بايثون", "سهل", "وممتع"]
print(*my_parts, sep=" - ") # هيطبع: بايثون - سهل - وممتع`},{type:"paragraph",text:"`*args` و `**kwargs` وتفكيك المعاملات أدوات قوية جداً بتدي دوالك مرونة كبيرة. بتستخدمهم كتير في عمل المُزخرفات (Decorators) وفي تمرير الـ arguments بين الدوال في التسلسلات الهرمية للـ classes، وفي بناء دوال بتقبل إعدادات كتير اختيارية."}],quiz:[{id:"q_ak_1",text:"في تعريف الدالة `def my_func(*args):`، ماذا يمثل `*args`؟",options:["معامل اسمي واحد فقط اسمه args","صف (Tuple) يحتوي على كل الوسائط الموضعية الإضافية التي تم تمريرها للدالة","قاموس (Dictionary) يحتوي على كل الوسائط الاسمية","قائمة (List) بكل المعاملات"],correctAnswerIndex:1,explanation:"`*args` يجمع كل الوسائط الموضعية الزائدة في tuple."},{id:"q_ak_2",text:"في تعريف الدالة `def my_func(**kwargs):`، ما هو نوع المتغير `kwargs` داخل الدالة؟",options:["Tuple","List","Set","Dictionary"],correctAnswerIndex:3,explanation:"`**kwargs` يجمع كل الوسائط الاسمية الزائدة في قاموس (dictionary)."},{id:"q_ak_3",text:"إذا كان لديك قائمة `my_list = [1, 2, 3]` ودالة `test_func(a, b, c): pass`، كيف يمكنك استدعاء `test_func` وتمرير عناصر `my_list` كمعاملات موضعية منفصلة؟",options:["`test_func(my_list)`","`test_func(*my_list)`","`test_func(**my_list)`","`test_func(list=my_list)`"],correctAnswerIndex:1,explanation:"نجمة واحدة `*` قبل اسم القائمة (أو الـ tuple) تقوم بتفكيكها إلى معاملات موضعية عند استدعاء الدالة."},{id:"q_ak_4",text:"ما هو الترتيب الصحيح للمعاملات في تعريف دالة يمكن أن تقبل معاملات عادية، و `*args`، و `**kwargs`؟",options:["`def func(*args, **kwargs, normal_param):`","`def func(normal_param, **kwargs, *args):`","`def func(normal_param, *args, **kwargs):`","الترتيب غير مهم"],correctAnswerIndex:2,explanation:"الترتيب القياسي هو: المعاملات الموضعية العادية، ثم `*args`، ثم المعاملات الاسمية العادية (لو فيه)، ثم `**kwargs`."},{id:"q_ak_5",text:'إذا تم استدعاء دالة `my_func(name="Ali", age=30)` وكان تعريفها `def my_func(**options):`، ماذا ستحتوي `options`؟',options:['`("Ali", 30)`','`[("name", "Ali"), ("age", 30)]`','`{"name": "Ali", "age": 30}`',"`None`"],correctAnswerIndex:2,explanation:"`**kwargs` (هنا اسمه `options`) سيجمع الوسائط الاسمية في قاموس: `{'name': 'Ali', 'age': 30}`."}]},{id:"l2-lesson-12",slug:"csv-files",title:"التعامل مع ملفات CSV (قيم مفصولة بفواصل)",description:"تعلم كيفية قراءة البيانات من ملفات CSV الشائعة وكتابة البيانات إليها باستخدام موديول `csv` المدمج.",content:[{type:"heading",text:"جداول البيانات البسيطة: ملفات CSV"},{type:"paragraph",text:"ملفات CSV (Comma-Separated Values - قيم مفصولة بفواصل) هي طريقة شائعة جداً لتخزين البيانات الجدولية (زي جداول الإكسل البسيطة) في ملف نصي عادي. كل سطر في الملف بيمثل صف في الجدول، والقيم جوه كل سطر بتكون مفصولة بفاصلة (comma) أو أي محدد تاني (delimiter) زي الفاصلة المنقوطة (semicolon) أو التاب (tab)."},{type:"paragraph",text:"بايثون عنده موديول مدمج اسمه `csv` بيسهل علينا قراءة وكتابة الملفات دي."},{type:"code",language:"python",text:"import csv"},{type:"subheading",text:"1. قراءة ملف CSV:"},{type:"paragraph",text:"عشان نقرا ملف CSV، بنفتحه الأول (يفضل باستخدام `with open(...)`) وبعدين بنعمل كائن `csv.reader` من كائن الملف. كائن الـ `reader` ده بيكون مُكرِّر (iterator) بنقدر نلف عليه عشان ناخد كل صف كقايمة (list) من النصوص."},{type:"paragraph",text:"لو أول سطر في ملف الـ CSV بتاعك فيه أسماء الأعمدة (header)، ممكن تستخدم `csv.DictReader` بدل `csv.reader`. ده هيخليك توصل للقيم في كل صف عن طريق اسم العمود (كأنه قاموس) بدل الفهرس."},{type:"paragraph",text:"مثال لملف اسمه `students.csv`:"},{type:"code",language:"text",text:`اسم,عمر,مدينة
أحمد,22,القاهرة
سارة,25,الإسكندرية
علي,23,أسوان`},{type:"code",language:"python",text:`import csv

file_path = "students.csv" # افترض إن الملف ده موجود في نفس مكان السكربت

# أولاً: ننشئ الملف الوهمي students.csv عشان الكود يشتغل
try:
    with open(file_path, "w", newline="", encoding="utf-8") as temp_f: # newline="" مهمة عند الكتابة عشان متعملش سطور فاضية زيادة
        writer = csv.writer(temp_f)
        writer.writerow(["اسم", "عمر", "مدينة"]) # كتابة الهيدر
        writer.writerow(["أحمد", "22", "القاهرة"])
        writer.writerow(["سارة", "25", "الإسكندرية"])
        writer.writerow(["علي", "23", "أسوان"])
    print(f"تم إنشاء الملف المؤقت {file_path} للدرس.")
except IOError:
    print(f"لم نتمكن من إنشاء الملف المؤقت {file_path}.")


print("\\n--- القراءة باستخدام csv.reader ---")
try:
    with open(file_path, mode="r", encoding="utf-8", newline="") as csvfile: # newline="" مهمة عند القراءة برضه
        csv_reader = csv.reader(csvfile)
        header = next(csv_reader) # نقرا الهيدر لوحده لو عايزين
        print(f"أسماء الأعمدة: {header}")
        for row_list in csv_reader:
            # row_list هتكون قايمة زي ['أحمد', '22', 'القاهرة']
            if row_list: # نتأكد إن الصف مش فاضي
                print(f"الاسم: {row_list[0]}, العمر: {row_list[1]}, المدينة: {row_list[2]}")
except FileNotFoundError:
    print(f"الملف {file_path} مش موجود.")
except Exception as e:
    print(f"حصل خطأ أثناء القراءة بـ reader: {e}")


print("\\n--- القراءة باستخدام csv.DictReader ---")
try:
    with open(file_path, mode="r", encoding="utf-8", newline="") as csvfile:
        dict_reader = csv.DictReader(csvfile) # بيستخدم أول سطر كهيدر افتراضياً
        print(f"أسماء الحقول (من DictReader): {dict_reader.fieldnames}")
        for row_dict in dict_reader:
            # row_dict هتكون قاموس زي {'اسم': 'أحمد', 'عمر': '22', 'مدينة': 'القاهرة'}
            if row_dict:
                print(f"الاسم: {row_dict['اسم']}, العمر: {row_dict['عمر']}, المدينة: {row_dict['مدينة']}")
except FileNotFoundError:
    print(f"الملف {file_path} مش موجود.")
except Exception as e:
    print(f"حصل خطأ أثناء القراءة بـ DictReader: {e}")`},{type:"paragraph",text:"**ملاحظات مهمة عند القراءة:**"},{type:"list",text:"",items:['`newline=""`: مهم نستخدمها مع `open()` لما نتعامل مع ملفات CSV عشان نتجنب مشاكل السطور الجديدة المختلفة بين أنظمة التشغيل.','كل القيم اللي بتتقرا من ملف CSV بتكون "نصوص" (strings) بشكل افتراضي، حتى لو كانت أرقام. لو عايز تعمل عليها عمليات حسابية، هتحتاج تحولها الأول (مثلاً `int(row_list[1])`).',"لو ملف الـ CSV بتاعك بيستخدم محدد (delimiter) تاني غير الفاصلة (مثلاً فاصلة منقوطة `;` أو تاب `\\t`)، ممكن تحدده في `csv.reader` أو `csv.DictReader` باستخدام `delimiter="]},{type:"subheading",text:"2. كتابة ملف CSV:"},{type:"paragraph",text:'عشان نكتب بيانات في ملف CSV، بنفتح الملف في وضع الكتابة (`"w"`) أو الإضافة (`"a"`)، وبنعمل كائن `csv.writer`. الكائن ده عنده دالتين أساسيتين للكتابة:'},{type:"list",text:"",items:["`writer.writerow(list_of_values)`: بتكتب قايمة من القيم كصف واحد في الملف، وبتفصل بينهم بالمحدد (الفاصلة افتراضياً).","`writer.writerows(list_of_lists)`: بتاخد قايمة من القوايم (كل قايمة داخلية بتمثل صف) وبتكتبهم كلهم ورا بعض."]},{type:"paragraph",text:"لو عايز تكتب هيدر (أسماء الأعمدة) وتستخدم طريقة تشبه `DictReader` في الكتابة، ممكن تستخدم `csv.DictWriter`."},{type:"code",language:"python",text:`output_file_path = "output_students.csv"
students_data_to_write = [
    {"name": "نادر", "age": 28, "city": "الجيزة"},
    {"name": "هناء", "age": 26, "city": "طنطا"},
    {"name": "يوسف", "age": 30, "city": "المنصورة"}
]
field_names = ["name", "age", "city"] # أسماء الأعمدة مهمة لـ DictWriter

print(f"\\n--- الكتابة في ملف {output_file_path} باستخدام csv.DictWriter ---")
try:
    with open(output_file_path, mode="w", encoding="utf-8", newline="") as outfile:
        csv_dict_writer = csv.DictWriter(outfile, fieldnames=field_names)
        
        csv_dict_writer.writeheader() # كتابة سطر الهيدر (أسماء الأعمدة)
        
        for student_record in students_data_to_write:
            csv_dict_writer.writerow(student_record) # كتابة كل قاموس كصف
        
        # أو ممكن نستخدم writerows لو عندنا قايمة من القواميس على طول
        # csv_dict_writer.writerows(students_data_to_write) # بس لازم نكون كتبنا الهيدر الأول
            
    print(f"تمت كتابة البيانات بنجاح في {output_file_path}")
    
    # للتأكد، نقرا الملف اللي كتبناه
    with open(output_file_path, mode="r", encoding="utf-8", newline="") as f_check:
        print("\\nمحتوى الملف المكتوب:")
        for line in f_check:
            print(line.strip())
            
except IOError as e:
    print(f"حصل خطأ أثناء الكتابة للملف {output_file_path}: {e}")
except Exception as e:
    print(f"حصل خطأ عام: {e}")`},{type:"paragraph",text:"موديول `csv` بيوفر طريقة قياسية وموثوقة للتعامل مع ملفات CSV في بايثون، وبيجنبك كتير من المشاكل اللي ممكن تحصل لو حاولت تقسم السطور وتتعامل مع الفواصل بنفسك يدويًا (خصوصاً لو القيم نفسها فيها فواصل أو علامات تنصيص)."}],quiz:[{id:"q_csv_1",text:"ما هو الموديول المدمج في بايثون الذي يستخدم للتعامل مع ملفات CSV؟",options:["`json`","`pandas` (مكتبة خارجية)","`csv`","`textfiles`"],correctAnswerIndex:2,explanation:"موديول `csv` هو جزء من المكتبة القياسية لبايثون."},{id:"q_csv_2",text:"عند قراءة ملف CSV باستخدام `csv.reader`، ما هو نوع البيانات الذي يمثله كل صف يتم قراءته؟",options:["Tuple (صف)","Dictionary (قاموس)","String (نص واحد كبير)","List (قائمة) من النصوص"],correctAnswerIndex:3,explanation:"`csv.reader` يعيد كل صف كقائمة (list) من السلاسل النصية."},{id:"q_csv_3",text:'ما هي الفائدة من استخدام `newline=""` عند فتح ملف CSV للقراءة أو الكتابة؟',options:["لإضافة سطر فارغ بعد كل صف","لمنع مشاكل تفسير نهايات الأسطر المختلفة بين أنظمة التشغيل المختلفة وضمان تعامل موديول `csv` معها بشكل صحيح","لجعل الملف للقراءة فقط","لتحديد أن الملف لا يحتوي على هيدر"],correctAnswerIndex:1,explanation:'`newline=""` يساعد في التعامل الصحيح مع نهايات الأسطر في ملفات CSV عبر مختلف الأنظمة.'},{id:"q_csv_4",text:'أي دالة من `csv.writer` تستخدم لكتابة "صف واحد" من البيانات (والذي يكون عادةً قائمة) إلى ملف CSV؟',options:["`writer.add_row()`","`writer.write_line()`","`writer.writerow()`","`writer.save_row()`"],correctAnswerIndex:2,explanation:"`writer.writerow(list_of_values)` تكتب صفًا واحدًا."},{id:"q_csv_5",text:"إذا كنت تريد الوصول إلى القيم في صفوف CSV باستخدام أسماء الأعمدة بدلاً من الفهارس، أي قارئ (reader) من موديول `csv` ستستخدم؟",options:["`csv.ColumnReader`","`csv.DictReader`","`csv.NamedReader`","`csv.ObjectReader`"],correctAnswerIndex:1,explanation:"`csv.DictReader` يقرأ كل صف كقاموس حيث تكون المفاتيح هي أسماء الأعمدة (من الهيدر)."}]},{id:"l2-lesson-13",slug:"filesystem-operations",title:"عمليات نظام الملفات (`os` و `pathlib`)",description:"تعلم كيفية التفاعل مع نظام الملفات: التحقق من وجود الملفات والمجلدات، إنشائها، حذفها، سرد محتوياتها، والتنقل بين المسارات.",content:[{type:"heading",text:"التحكم في مملكتك الرقمية: عمليات نظام الملفات"},{type:"paragraph",text:"كتير أوي برامجنا بتحتاج تتفاعل مع الملفات والمجلدات اللي على جهاز الكمبيوتر: تتأكد إذا كان ملف معين موجود ولا لأ، تعمل مجلد جديد، تجيب قايمة بالملفات اللي جوه مجلد، تعرف مسار الملف الحالي، وهكذا. بايثون بيوفر أدوات قوية عشان نعمل كل ده."},{type:"paragraph",text:"فيه موديولين أساسيين بنستخدمهم للعمليات دي:"},{type:"list",text:"",items:["`os`: موديول قديم شوية بس لسه مستخدم وفيه وظايف كتير جداً للتعامل مع نظام التشغيل بشكل عام، ومن ضمنها عمليات نظام الملفات.","`pathlib`: موديول أحدث (ظهر في بايثون 3.4+) وبيقدم طريقة أكثر حداثة وشيئية (object-oriented) للتعامل مع المسارات (paths) والملفات. ناس كتير بتفضله دلوقتي لأنه بيخلي الكود أوضح وأسهل في القراءة وبيتعامل مع اختلافات أنظمة التشغيل (ويندوز، ماك، لينكس) بشكل أحسن."]},{type:"paragraph",text:"هنشوف أمثلة من الاتنين، بس التركيز هيكون على `pathlib` لأنه هو المستقبل."},{type:"code",language:"python",text:`import os
from pathlib import Path # بنستورد كلاس Path من موديول pathlib`},{type:"subheading",text:"1. التعامل مع المسارات (Paths) باستخدام `pathlib`:"},{type:"paragraph",text:"كلاس `Path` هو أساس الشغل في `pathlib`. بنعمل منه كائن بيمثل مسار معين (ملف أو مجلد)."},{type:"code",language:"python",text:`# إنشاء كائن Path للمجلد الحالي
current_dir = Path(".") # "." بترمز للمجلد الحالي
# أو ممكن نستخدم Path.cwd() (current working directory)
# current_dir = Path.cwd()
print(f"المجلد الحالي (Path object): {current_dir}")
print(f"المسار المطلق للمجلد الحالي: {current_dir.resolve()}")

# إنشاء كائن Path لملف معين (حتى لو مش موجود لسه)
file_path_obj = Path("my_folder/my_document.txt")
print(f"كائن مسار الملف: {file_path_obj}")

# بناء المسارات باستخدام / (زي ما بنعمل في لينكس/ماك، وبيشتغل صح في ويندوز كمان)
config_dir = Path.home() / ".myapp" / "settings" # Path.home() بيجيب مجلد المستخدم الرئيسي
print(f"مسار مجلد الإعدادات المفترض: {config_dir}")

# أجزاء المسار
print(f"اسم الملف: {file_path_obj.name}") # my_document.txt
print(f"اسم الملف بدون امتداد: {file_path_obj.stem}") # my_document
print(f"امتداد الملف: {file_path_obj.suffix}") # .txt
print(f"المجلد الأب: {file_path_obj.parent}") # my_folder
print(f"هل المسار مطلق؟ {file_path_obj.is_absolute()}") # False (لأنه نسبي)`},{type:"subheading",text:"2. التحقق من وجود الملفات والمجلدات:"},{type:"code",language:"python",text:`file_to_check = Path("students.csv") # افترض إن الملف ده عملناه في درس الـ CSV

if file_to_check.exists():
    print(f"الملف '{file_to_check}' موجود.")
    if file_to_check.is_file():
        print("وهو ملف عادي.")
    elif file_to_check.is_dir():
        print("وهو مجلد.")
else:
    print(f"الملف أو المجلد '{file_to_check}' غير موجود.")

# باستخدام os (الطريقة القديمة)
# if os.path.exists("students.csv"):
#     print("موجود (باستخدام os)")`},{type:"subheading",text:"3. إنشاء المجلدات:"},{type:"code",language:"python",text:`new_directory = Path("bod_code_test_dir/another_subdir")

try:
    # new_directory.mkdir() # هيعمل المجلد الأخير بس (another_subdir) ولازم bod_code_test_dir يكون موجود
    new_directory.mkdir(parents=True, exist_ok=True) # parents=True بيعمل كل المجلدات الناقصة في المسار
                                                   # exist_ok=True بيخليه ميعملش خطأ لو المجلد موجود بالفعل
    print(f"تم إنشاء المجلد: {new_directory}")
except OSError as e:
    print(f"خطأ في إنشاء المجلد: {e}")

# باستخدام os
# if not os.path.exists("os_test_dir"):
#     os.makedirs("os_test_dir/subdir") # makedirs بتعمل كل المجلدات الناقصة`},{type:"subheading",text:"4. سرد محتويات المجلد:"},{type:"code",language:"python",text:`target_dir_to_list = Path(".") # المجلد الحالي

print(f"\\nمحتويات المجلد '{target_dir_to_list.resolve()}':")
for item_path in target_dir_to_list.iterdir(): # iterdir بترجع مُكرِّر بكل العناصر اللي جوه المجلد
    item_type = "مجلد" if item_path.is_dir() else "ملف"
    print(f"- {item_path.name} ({item_type})")

# لو عايز تدور على ملفات بنمط معين (مثلاً كل ملفات .txt)
print("\\nملفات txt في المجلد الحالي:")
for txt_file in target_dir_to_list.glob("*.txt"): # glob بتدعم أنماط زي بتاعة الـ shell
    print(f"- {txt_file.name}")

# لو عايز تدور في المجلد وكل المجلدات الفرعية اللي جواه (Recursive)
# for py_file_recursive in target_dir_to_list.rglob("*.py"):
# print(f"- {py_file_recursive}")

# باستخدام os
# print("\\nمحتويات باستخدام os.listdir():")
# for item_name in os.listdir("."): # listdir بترجع قايمة بأسماء الملفات والمجلدات (كنصوص)
#     full_path_str = os.path.join(".", item_name) # لازم تعمل المسار الكامل عشان تعرف هو ملف ولا مجلد
#     item_type_os = "مجلد" if os.path.isdir(full_path_str) else "ملف"
#     print(f"- {item_name} ({item_type_os})")`},{type:"subheading",text:"5. قراءة وكتابة الملفات (باستخدام `pathlib`):"},{type:"paragraph",text:"كائنات `Path` بتسهل كمان عمليات القراءة والكتابة البسيطة من غير ما تحتاج تستخدم `open()` بشكل صريح كل مرة (هي بتستخدمها في الخلفية)."},{type:"code",language:"python",text:`my_pathlib_file = Path("pathlib_example.txt")

try:
    # كتابة نص للملف (هتعمل overwrite لو الملف موجود)
    my_pathlib_file.write_text("أهلاً من pathlib!\\nسطر جديد.", encoding="utf-8")
    print(f"تمت الكتابة في {my_pathlib_file}")

    # قراءة النص من الملف
    content_read = my_pathlib_file.read_text(encoding="utf-8")
    print(f"محتوى {my_pathlib_file}:\\n{content_read}")

    # لو عايز تتعامل مع ملفات ثنائية (bytes)
    # my_pathlib_file.write_bytes(b"some binary data")
    # binary_content = my_pathlib_file.read_bytes()
except Exception as e:
    print(f"خطأ في التعامل مع الملف بـ pathlib: {e}")`},{type:"subheading",text:"6. حذف الملفات والمجلدات:"},{type:"code",language:"python",text:`file_to_delete = Path("pathlib_example.txt")
dir_to_delete = Path("bod_code_test_dir/another_subdir")
parent_dir_to_delete_if_empty = Path("bod_code_test_dir")

try:
    if file_to_delete.exists():
        file_to_delete.unlink() # لحذف ملف (unlink بتشيل الـ link للملف)
        print(f"تم حذف الملف: {file_to_delete}")
    else:
        print(f"الملف {file_to_delete} مش موجود عشان يتحذف.")
    
    if dir_to_delete.exists():
        dir_to_delete.rmdir() # لحذف مجلد (لازم يكون فاضي)
        print(f"تم حذف المجلد: {dir_to_delete}")
    else:
        print(f"المجلد {dir_to_delete} مش موجود عشان يتحذف.")
    
    # نحاول نحذف المجلد الأب لو بقى فاضي
    if parent_dir_to_delete_if_empty.exists() and not any(parent_dir_to_delete_if_empty.iterdir()):
      parent_dir_to_delete_if_empty.rmdir()
      print(f"تم حذف المجلد الأب الفارغ: {parent_dir_to_delete_if_empty}")

except OSError as e:
    print(f"خطأ في الحذف (يمكن المجلد مش فاضي أو مفيش صلاحيات): {e}")

# باستخدام os
# os.remove("file.txt") # لحذف ملف
# os.rmdir("empty_dir") # لحذف مجلد فاضي
# import shutil
# shutil.rmtree("dir_with_contents") # لحذف مجلد بكل اللي جواه (خلي بالك جداً مع دي!)`},{type:"paragraph",text:"موديول `pathlib` بيقدم طريقة حديثة ومرنة جداً للتعامل مع نظام الملفات في بايثون. بيخلي الكود بتاعك أسهل في القراءة والكتابة، وبيجنبك كتير من المشاكل اللي كانت ممكن تحصل مع موديول `os` (زي التعامل مع الشرطة المائلة `` و `/` في أنظمة التشغيل المختلفة). حاول تستخدمه في مشاريعك الجديدة!"}],quiz:[{id:"q_fs_1",text:"أي موديول في بايثون يقدم طريقة أحدث وشيئية (object-oriented) للتعامل مع مسارات الملفات والمجلدات؟",options:["`os`","`sys`","`pathlib`","`files`"],correctAnswerIndex:2,explanation:"`pathlib` هو الموديول الأحدث المفضل للتعامل مع المسارات بطريقة شيئية."},{id:"q_fs_2",text:"باستخدام `pathlib`، كيف يمكنك الحصول على المسار المطلق (absolute path) لكائن `Path` اسمه `p`؟",options:["`p.absolute()`","`p.resolve()`","`p.full_path()`","`abs(p)`"],correctAnswerIndex:1,explanation:"`p.resolve()` تعيد المسار المطلق بعد حل أي روابط رمزية (symlinks)."},{id:"q_fs_3",text:"ما هي الدالة من `pathlib.Path` التي تستخدم للتحقق مما إذا كان المسار يشير إلى ملف موجود؟",options:["`path.exists_file()`","`path.is_file()`","`path.check_file()`","`path.isfile()` (هذه من os.path، لكن `is_file()` هي الطريقة في `Path`)"],correctAnswerIndex:1,explanation:"`path_object.is_file()` تتحقق مما إذا كان المسار موجودًا وهو ملف."},{id:"q_fs_4",text:"لإنشاء مجلد جديد باستخدام `pathlib`، مع إنشاء كل المجلدات الأصل (parent directories) الناقصة إذا لزم الأمر وعدم إثارة خطأ إذا كان المجلد موجودًا بالفعل، أي أمر تستخدم؟",options:["`my_path.mkdir()`","`my_path.mkdir(parents=True, exist_ok=True)`","`my_path.create_dir(recursive=True)`","`os.makedirs(my_path, exist_ok=True)` (هذه لـ os، السؤال عن pathlib)"],correctAnswerIndex:1,explanation:"`my_path.mkdir(parents=True, exist_ok=True)` هي الطريقة الصحيحة."},{id:"q_fs_5",text:"أي دالة من `pathlib.Path` تستخدم لسرد محتويات مجلد (كائنات `Path` للملفات والمجلدات الفرعية مباشرة)؟",options:["`path.listdir()`","`path.contents()`","`path.iterdir()`",'`path.glob("*")` (هذه تعيد مُكرِّرًا مطابقًا للنمط، `iterdir` هو الأنسب للسرد المباشر)'],correctAnswerIndex:2,explanation:"`path_object.iterdir()` تعيد مُكرِّرًا بجميع العناصر داخل المجلد."}]},{id:"l2-lesson-14",slug:"pythonic-iteration",title:"التكرار البايثوني: `zip` و `enumerate`",description:"اكتشف أدوات التكرار المفيدة مثل `zip` للمرور على عدة تسلسلات معًا، و `enumerate` للحصول على الفهرس والعنصر أثناء التكرار.",content:[{type:"heading",text:"لف ودوران بأسلوب بايثوني: `zip` و `enumerate`"},{type:"paragraph",text:'بايثون مشهور بإن كوده بيكون "بايثوني" (Pythonic)، يعني مكتوب بطريقة بتستغل مميزات اللغة عشان يكون واضح ومختصر وفعال. لما بنيجي نعمل حلقات تكرار (loops)، فيه أدوات مدمجة بتساعدنا نكتب كود بايثوني أكتر، ومن أهمهم `zip` و `enumerate`.'},{type:"subheading",text:"1. `enumerate()`: لما تحتاج الفهرس والقيمة مع بعض"},{type:"paragraph",text:"كتير أوي واحنا بنلف على قايمة أو أي حاجة قابلة للتكرار (iterable)، بنكون عايزين نعرف الفهرس (الترتيب) بتاع العنصر الحالي بالإضافة لقيمته. الطريقة التقليدية إننا نعمل عداد (counter) ونزوده كل لفة:"},{type:"code",language:"python",text:`# الطريقة التقليدية (مش بايثونية أوي)
my_list = ["تفاح", "موز", "برتقال"]
index = 0
for fruit in my_list:
    print(f"الفهرس {index}: {fruit}")
    index += 1`},{type:"paragraph",text:"دالة `enumerate()` بتسهل الموضوع ده جداً. هي بتاخد iterable كـ argument، وبترجع مُكرِّر (iterator) بيطلعلك في كل لفة tuple فيه الفهرس (بيبدأ من 0 افتراضياً) والعنصر المقابل ليه."},{type:"code",language:"python",text:`# باستخدام enumerate()
my_list = ["تفاح", "موز", "برتقال"]

for index, fruit in enumerate(my_list):
    print(f"الفهرس {index}: {fruit}")

# ممكن كمان تحدد قيمة بداية للفهرس (start index)
for i, item in enumerate(my_list, start=1): # هيبدأ العد من 1
    print(f"رقم العنصر {i}: {item}")`},{type:"subheading",text:"2. `zip()`: لما تلف على كذا حاجة مع بعض في نفس الوقت"},{type:"paragraph",text:"ساعات بيكون عندك كذا قايمة (أو أي iterables) وعايز تلف عليهم كلهم مع بعض، وتاخد في كل لفة عنصر من كل قايمة بالترتيب. مثلاً، عندك قايمة أسماء وقايمة أعمار مقابلة ليها."},{type:"paragraph",text:"دالة `zip()` بتعمل كده بالظبط. هي بتاخد أي عدد من الـ iterables كـ arguments، وبترجع مُكرِّر بيطلعلك في كل لفة tuple فيه العناصر المقابلة من كل iterable."},{type:"paragraph",text:"`zip()` بتقف لما أقصر iterable من اللي إنت مديهم لها يخلص."},{type:"code",language:"python",text:`names = ["أحمد", "سارة", "علي"]
ages = [25, 30, 22]
cities = ["القاهرة", "جدة", "دبي", "بيروت"] # فيها عنصر زيادة

for name, age, city in zip(names, ages, cities):
    # اللفة هتشتغل 3 مرات بس (لأن أقصر قايمة طولها 3)
    # "بيروت" مش هتظهر
    print(f"{name} عنده {age} سنة وساكن في {city}.")

# لو الـ iterables مش نفس الطول و عايز تكمل لحد أطول واحد،
# ممكن تستخدم itertools.zip_longest() (بتحط None للعناصر الناقصة افتراضياً)
from itertools import zip_longest

for name, age, city in zip_longest(names, ages, cities, fillvalue="N/A"):
    print(f"الاسم: {name or 'N/A'}, العمر: {age or 'N/A'}, المدينة: {city or 'N/A'}")`},{type:"subheading",text:"فك الـ zip (Unzipping):"},{type:"paragraph",text:"ممكن تعمل عكس عملية `zip` لو عندك قايمة من الـ tuples وعايز تفصلهم لكذا tuple منفصل. بتستخدم `zip()` مع علامة النجمة `*` (اللي بتعمل unpacking)."},{type:"code",language:"python",text:`zipped_data = [("أ", 1), ("ب", 2), ("ج", 3)]

letters, numbers = zip(*zipped_data)

print(f"الحروف: {letters}") # ('أ', 'ب', 'ج')
print(f"الأرقام: {numbers}") # (1, 2, 3)`},{type:"paragraph",text:"`enumerate()` و `zip()` أدوات بسيطة بس قوية جداً بتخلي كود التكرار بتاعك أنضف وأوضح وأكثر بايثونية. حاول تستخدمهم كل ما تلاقي نفسك محتاج عداد يدوي أو بتلف على كذا قايمة بالتوازي."}],quiz:[{id:"q_pyiter_1",text:"ما هي وظيفة دالة `enumerate(iterable)`؟",options:["تعد عدد العناصر في الـ iterable","تعيد مُكرِّرًا ينتج أزواجًا من الفهرس والقيمة لكل عنصر في الـ iterable","تجمع عناصر الـ iterable في سلسلة نصية واحدة","تحذف العناصر المكررة من الـ iterable"],correctAnswerIndex:1,explanation:"`enumerate` تعطي الفهرس والقيمة معًا أثناء التكرار."},{id:"q_pyiter_2",text:'إذا كانت `my_list = ["a", "b"]`، فماذا سيكون ناتج حلقة `for index, value in enumerate(my_list, start=1): print(index, value)`؟',options:["`0 a` ثم `1 b`","`1 a` ثم `2 b`","`a 1` ثم `b 2`",'`(1, "a")` ثم `(2, "b")`'],correctAnswerIndex:1,explanation:"`start=1` تجعل الفهرسة تبدأ من 1. سيطبع كل زوج في سطر منفصل."},{id:"q_pyiter_3",text:"ماذا تفعل دالة `zip(iter1, iter2, ...)`؟",options:["تضغط الملفات المحددة","تعيد مُكرِّرًا ينتج صفوفًا (tuples) حيث يحتوي كل صف على العناصر المتناظرة من كل iterable مُدخل، وتتوقف عند أقصر iterable","تفك ضغط ملف واحد فقط","تجمع كل العناصر من كل الـ iterables في قائمة واحدة"],correctAnswerIndex:1,explanation:"`zip` تجمع العناصر المتناظرة من عدة iterables وتتوقف عند أقصرها."},{id:"q_pyiter_4",text:'إذا كانت `list1 = [1, 2]` و `list2 = ["x", "y", "z"]`، فماذا سيكون ناتج `list(zip(list1, list2))`؟',options:['`[(1, "x"), (2, "y"), (None, "z")]`','`[(1, "x"), (2, "y")]`','`[(1, 2), ("x", "y", "z")]`',"خطأ، لأن القائمتين ليستا بنفس الطول"],correctAnswerIndex:1,explanation:"`zip` تتوقف عند انتهاء أقصر iterable، لذا ستأخذ فقط أول عنصرين من `list2`."},{id:"q_pyiter_5",text:'إذا كان لديك `pairs = [("a", 1), ("b", 2)]`، كيف يمكنك "فك" هذه القائمة إلى قائمتين منفصلتين `letters` و `numbers` باستخدام `zip`؟',options:["`letters, numbers = unzip(pairs)`","`letters = pairs[0]; numbers = pairs[1]`","`letters, numbers = zip(*pairs)`","`letters = [p[0] for p in pairs]; numbers = [p[1] for p in pairs]` (هذه طريقة صحيحة ولكن السؤال عن استخدام zip للفك)"],correctAnswerIndex:2,explanation:'استخدام `zip(*iterable_of_tuples)` هو الطريقة "البايثونية" لفك التجميع.'}]},{id:"l2-lesson-15",slug:"pip-virtual-environments",title:"مقدمة إلى PIP والبيئات الافتراضية (`venv`)",description:"تعلم كيفية استخدام `pip` (مدير حزم بايثون) لتثبيت وإدارة المكتبات الخارجية، وأهمية البيئات الافتراضية (`venv`) لعزل اعتماديات كل مشروع.",content:[{type:"heading",text:"عدة الشغل بتاعتك: `pip` والبيئات الافتراضية `venv`"},{type:"paragraph",text:'بايثون لغة قوية جداً، وجزء كبير من قوتها بييجي من "المجتمع" الضخم بتاعها والمكتبات (Libraries/Packages) الكتير جداً اللي المبرمجين التانيين عملوها وخلوها متاحة لينا عشان نستخدمها. المكتبات دي بتوفر وظايف جاهزة لحاجات كتير (زي التعامل مع الويب، تحليل البيانات، الذكاء الاصطناعي، إلخ) بدل ما نضطر نعمل كل حاجة من الصفر.'},{type:"subheading",text:"1. `pip`: مدير حزم بايثون"},{type:"paragraph",text:'`pip` (اختصار لـ "Pip Installs Packages" أو "Preferred Installer Program") هو الأداة الرسمية اللي بنستخدمها عشان نثبت وندير المكتبات الخارجية دي في بايثون. `pip` عادةً بييجي متثبت مع بايثون (من إصدار 3.4+).'},{type:"list",text:"أشهر أوامر `pip` (بتتكتب في الترمنال/Command Prompt):",items:["`pip install package_name`: بيثبت أحدث إصدار من المكتبة اللي اسمها `package_name` من مستودع الحزم الرسمي لبايثون (PyPI - Python Package Index).","`pip install package_name==1.2.3`: بيثبت إصدار معين (هنا 1.2.3) من المكتبة.",'`pip install "package_name>=1.0.0"`: بيثبت إصدار 1.0.0 أو أحدث.',"`pip uninstall package_name`: بيحذف المكتبة دي.","`pip list`: بيعرضلك قايمة بكل المكتبات المتثبتة في بيئة بايثون الحالية وإصداراتها.","`pip show package_name`: بيعرض معلومات تفصيلية عن مكتبة معينة متثبتة.","`pip search query`: بيبحث عن مكتبات على PyPI اسمها أو وصفها فيه الكلمة `query`. (ممكن يكون الأمر ده مبقاش مدعوم أوي في الإصدارات الجديدة من pip، والأفضل تبحث مباشرة على موقع pypi.org).","`pip freeze > requirements.txt`: بيعمل ملف اسمه `requirements.txt` فيه قايمة بكل المكتبات المتثبتة حالياً وإصداراتها بالظبط. ده مفيد جداً عشان لو حد تاني عايز يشغل مشروعك، يقدر يثبت نفس المكتبات بنفس الإصدارات بسهولة.","`pip install -r requirements.txt`: بيقرا ملف `requirements.txt` ويثبت كل المكتبات اللي جواه."]},{type:"code",language:"text",text:`# مثال لتثبيت مكتبة requests (مشهورة لعمل طلبات ويب)
pip install requests

# مثال لتثبيت إصدار معين من مكتبة تانية
# pip install numpy==1.20.3

# لعرض المكتبات المثبتة
pip list`},{type:"subheading",text:"2. أهمية البيئات الافتراضية (Virtual Environments):"},{type:"paragraph",text:'تخيل إنك شغال على مشروعين بايثون في نفس الوقت. المشروع الأولاني محتاج إصدار معين من مكتبة (مثلاً `LibraryX v1.0`)، والمشروع التاني محتاج إصدار تاني مختلف من نفس المكتبة (مثلاً `LibraryX v2.0`). لو ثبت المكتبات دي كلها في مكان واحد "عام" (Global Python environment)، هيحصل تضارب وممكن واحد من المشروعين (أو الاتنين) م يشتغلش صح.'},{type:"paragraph",text:'هنا بتيجي فايدة "البيئات الافتراضية" (Virtual Environments). البيئة الافتراضية بتعمل مكان "معزول" لكل مشروع بايثون، بيكون ليه نسخة بايثون خاصة بيه (أو بيستخدم النسخة العامة بس بشكل معزول) ومجموعة مكتبات خاصة بيه بس. كده كل مشروع يقدر يستخدم الإصدارات اللي هو محتاجها من المكتبات من غير ما يأثر على المشاريع التانية.'},{type:"paragraph",text:"دي عادة كويسة جداً إنك تعمل بيئة افتراضية لكل مشروع بايثون بتبدأه."},{type:"subheading",text:"3. استخدام `venv` (الموديول المدمج لعمل البيئات الافتراضية):"},{type:"paragraph",text:"بايثون بييجي معاه موديول اسمه `venv` عشان نعمل بيه بيئات افتراضية (من بايثون 3.3+)."},{type:"list",text:"خطوات عمل واستخدام بيئة افتراضية بـ `venv`:",items:["1. **إنشاء البيئة الافتراضية:** افتح الترمنال، روح للمجلد بتاع مشروعك، واكتب الأمر التالي (هنسمي مجلد البيئة الافتراضية `myenv`، ممكن تسميه أي حاجة تانية زي `.venv` أو `env`):","   `python -m venv myenv` (أو `python3 -m venv myenv` لو `python` بيشاور على بايثون 2 عندك).","   الأمر ده هيعمل مجلد جديد اسمه `myenv` جواه ملفات البيئة الافتراضية.",'2. **تفعيل البيئة الافتراضية (Activate):** عشان تبدأ تستخدم البيئة دي، لازم "تفعلها". طريقة التفعيل بتختلف حسب نظام التشغيل:',"   - **ويندوز (Command Prompt):** `myenv\\Scripts\\activate.bat`","   - **ويندوز (PowerShell):** `myenv\\Scripts\\Activate.ps1` (ممكن تحتاج تظبط الـ Execution Policy في PowerShell لو الأمر ده معملش حاجة).","   - **ماك أو لينكس (bash/zsh):** `source myenv/bin/activate`","   لما البيئة بتتفعل، عادةً بتلاقي اسم البيئة (`myenv`) ظهر قبل البرومبت بتاع الترمنال بتاعك.","3. **تثبيت المكتبات:** دلوقتي أي مكتبة هتثبتها باستخدام `pip install` هتتثبت جوه البيئة الافتراضية دي بس، ومش هتأثر على بايثون العام أو أي مشاريع تانية.","   `pip install requests numpy pandas` (كمثال)","4. **تعطيل البيئة الافتراضية (Deactivate):** لما تخلص شغل على المشروع وعايز ترجع للبيئة العامة، اكتب الأمر `deactivate` في الترمنال. الأمر ده بيكون متاح لما تكون البيئة مفعلة."]},{type:"paragraph",text:"من العادات الكويسة إنك تضيف اسم مجلد البيئة الافتراضية (زي `myenv/` أو `.venv/`) لملف `.gitignore` بتاع مشروعك عشان متترفعش على GitHub أو أي نظام Version Control."},{type:"paragraph",text:"فيه أدوات تانية لإدارة البيئات الافتراضية والمكتبات زي `conda` (خصوصاً لو بتشتغل في علم البيانات) و `Poetry` و `PDM` اللي بيقدموا مميزات أكتر، بس `venv` و `pip` هما الأساس وبيكفوا لمعظم المشاريع."},{type:"paragraph",text:"استخدام `pip` لإدارة مكتباتك الخارجية، وعمل بيئة افتراضية لكل مشروع، هيخلي حياتك كمبرمج بايثون أسهل وأنظم بكتير وهيجنبك مشاكل كتير ليها علاقة بتضارب الإصدارات والاعتماديات."}],quiz:[{id:"q_pipvenv_1",text:"ما هي الأداة التي تستخدم عادةً في بايثون لتثبيت وإدارة المكتبات (الحزم) الخارجية من PyPI؟",options:["`python-get`","`conda` (أداة شائعة ولكن ليست الوحيدة أو الافتراضية دائمًا)","`pip`","`setup.py` (يستخدم لوصف الحزمة، ليس لتثبيت حزم أخرى بشكل مباشر)"],correctAnswerIndex:2,explanation:"`pip` هو مدير الحزم القياسي لبايثون."},{id:"q_pipvenv_2",text:"ما هو الغرض الرئيسي من استخدام البيئات الافتراضية (Virtual Environments) في بايثون؟",options:["لتسريع تنفيذ برامج بايثون","لعزل اعتماديات (مكتبات وإصداراتها) كل مشروع عن المشاريع الأخرى والبيئة العامة لبايثون","لضغط ملفات المشروع لتقليل حجمها","لترجمة كود بايثون إلى لغة الآلة"],correctAnswerIndex:1,explanation:"البيئات الافتراضية توفر العزل بين المشاريع المختلفة لتجنب تضارب الاعتماديات."},{id:"q_pipvenv_3",text:"ما هو الموديول المدمج في بايثون (منذ 3.3+) الذي يستخدم لإنشاء البيئات الافتراضية؟",options:["`virtualenv` (مكتبة خارجية شائعة)","`conda`","`venv`","`isolate`"],correctAnswerIndex:2,explanation:"`venv` هو الموديول المدمج في المكتبة القياسية لإنشاء البيئات الافتراضية."},{id:"q_pipvenv_4",text:"بعد إنشاء بيئة افتراضية باسم `my_env` باستخدام `venv`، ما هو الأمر الذي تستخدمه عادةً لتفعيلها على نظام لينكس أو ماك (باستخدام bash)؟",options:["`activate my_env`","`my_env/bin/start`","`source my_env/bin/activate`","`run my_env`"],correctAnswerIndex:2,explanation:"`source my_env/bin/activate` هو الأمر الشائع لتفعيل البيئة على أنظمة يونكس."},{id:"q_pipvenv_5",text:"ما هو الأمر الذي يستخدم لإنشاء ملف `requirements.txt` يحتوي على قائمة بالمكتبات المثبتة حاليًا في البيئة النشطة وإصداراتها؟",options:["`pip save > requirements.txt`","`pip list --export > requirements.txt`","`pip freeze > requirements.txt`","`pip requirements > requirements.txt`"],correctAnswerIndex:2,explanation:"`pip freeze > requirements.txt` هو الأمر المستخدم لتصدير قائمة الاعتماديات."}]}],Ue=[{id:"l3-lesson-1",slug:"decorators",title:"المُزخرفات (Decorators) في بايثون",description:"تعلم كيف تستخدم المُزخرفات لإضافة وظائف جديدة للدوال أو الأصناف بطريقة ديناميكية وقابلة لإعادة الاستخدام.",content:[{type:"heading",text:"المُزخرفات: تزيين الدوال بوظائف إضافية!"},{type:"paragraph",text:"المُزخرف (Decorator) في بايثون ده طريقة شيك عشان تعدل أو تزود سلوك لدالة أو صنف من غير ما تغير الكود الأصلي بتاعهم بشكل مباشر. تخيل إنك بتلبس جاكيت لدالة، الجاكيت ده بيضيفلها ميزة جديدة!"},{type:"paragraph",text:'عشان نفهم المُزخرفات كويس، لازم نفتكر إن الدوال في بايثون "مواطنين من الدرجة الأولى" (First-class citizens). ده معناه إنك ممكن تعامل الدالة زي أي متغير تاني: ممكن تمررها كـ argument لدالة تانية، ممكن ترجعها من دالة تانية، وممكن تخزنها في متغير.'},{type:"subheading",text:"بناء المُزخرف البسيط:"},{type:"paragraph",text:"المُزخرف في أبسط صوره هو دالة بتاخد دالة تانية كـ argument (الدالة اللي عايزين نزخرفها)، وبتعرف جواها دالة جديدة (بنسميها الـ wrapper function). الـ wrapper دي هي اللي بتضيف السلوك الجديد، وبعدين ممكن تستدعي الدالة الأصلية. في الآخر، المُزخرف بيرجع الـ wrapper function دي."},{type:"code",language:"python",text:`def my_decorator(func):  # func هي الدالة اللي عايزين نزخرفها
    def wrapper(*args, **kwargs): # *args, **kwargs عشان الـ wrapper تقدر تستقبل أي arguments
        print("حاجة بتحصل قبل ما الدالة الأصلية تشتغل.")
        result = func(*args, **kwargs) # بنستدعي الدالة الأصلية
        print("حاجة بتحصل بعد ما الدالة الأصلية خلصت.")
        return result # بنرجع نتيجة الدالة الأصلية
    return wrapper # المُزخرف بيرجع الـ wrapper

# طريقة استخدام المُزخرف
def say_whee():
    print("Whee!")

say_whee_decorated = my_decorator(say_whee)
say_whee_decorated()
# الناتج:
# حاجة بتحصل قبل ما الدالة الأصلية تشتغل.
# Whee!
# حاجة بتحصل بعد ما الدالة الأصلية خلصت.`},{type:"subheading",text:"استخدام علامة `@` (Syntax Sugar):"},{type:"paragraph",text:"بايثون بتقدملك طريقة أسهل وأشيك عشان تطبق المُزخرف على دالة، وهي إنك تحط اسم المُزخرف فوق تعريف الدالة اللي عايز تزخرفها، وقبله علامة `@`."},{type:"code",language:"python",text:`@my_decorator  # دي بالظبط زي ما عملنا: say_hello = my_decorator(say_hello)
def say_hello(name):
    print(f"أهلاً يا {name}!")

say_hello("Bod Code")
# الناتج:
# حاجة بتحصل قبل ما الدالة الأصلية تشتغل.
# أهلاً يا Bod Code!
# حاجة بتحصل بعد ما الدالة الأصلية خلصت.`},{type:"subheading",text:"الحفاظ على بيانات الدالة الأصلية مع `functools.wraps`:"},{type:"paragraph",text:"لما بتستخدم مُزخرف، الدالة اللي بترجع (الـ wrapper) بتحل محل الدالة الأصلية. ده ممكن يضيع شوية معلومات مهمة عن الدالة الأصلية زي اسمها والـ docstring بتاعها. عشان نحل المشكلة دي، بنستخدم مُزخرف تاني جاهز اسمه `wraps` من موديول `functools`."},{type:"code",language:"python",text:`import functools

def better_decorator(func):
    @functools.wraps(func) # هنا بنستخدم wraps
    def wrapper(*args, **kwargs):
        print("Wrapper: قبل التنفيذ")
        result = func(*args, **kwargs)
        print("Wrapper: بعد التنفيذ")
        return result
    return wrapper

@better_decorator
def greet_user(username):
    """دالة ترحيب بسيطة."""
    print(f"مرحباً، {username}!")

print(greet_user.__name__)    # هيطبع: greet_user (بدون wraps كان هيطبع wrapper)
print(greet_user.__doc__)     # هيطبع: دالة ترحيب بسيطة. (بدون wraps كان هيطبع None أو الـ docstring بتاع الـ wrapper)`},{type:"subheading",text:"أمثلة عملية للمُزخرفات:"},{type:"list",text:"بعض الاستخدامات الشائعة:",items:["تسجيل الأحداث (Logging): نطبع رسالة كل مرة الدالة بتشتغل.","قياس وقت التنفيذ (Timing): نحسب الدالة خدت وقت قد إيه عشان تتنفذ.","التحقق من الصلاحيات (Authorization): نتأكد إن المستخدم ليه حق ينفذ الدالة دي.","التخزين المؤقت (Caching): نحفظ نتيجة الدالة عشان لو اتطلبت بنفس الـ arguments تاني نرجعها بسرعة من غير ما نحسبها تاني."]},{type:"paragraph",text:"المُزخرفات أداة قوية جداً بتخلي كودك أكثر مرونة وقابلية لإعادة الاستخدام. ممكن تبدو معقدة في الأول، لكن مع الممارسة هتلاقيها مفيدة جداً."}],quiz:[{id:"adv_dec_1",text:"ما هو الغرض الرئيسي من استخدام المُزخرف (Decorator) في بايثون؟",options:["لجعل الكود أبطأ","لتعديل أو إضافة سلوك لدالة أو صنف دون تغيير الكود الأصلي مباشرة","لحذف الدوال غير المستخدمة","لإنشاء متغيرات عامة"],correctAnswerIndex:1,explanation:"المُزخرفات تسمح بتغليف وظائف إضافية حول دالة أو صنف موجود."},{id:"adv_dec_2",text:"عند بناء مُزخرف، ما الذي يجب أن يرجعه المُزخرف عادةً؟",options:["الدالة الأصلية كما هي","قيمة `None`","الدالة الـ wrapper الداخلية","سلسلة نصية تشرح المُزخرف"],correctAnswerIndex:2,explanation:"المُزخرف يجب أن يرجع الدالة الـ wrapper التي تحتوي على السلوك الجديد والدعوة للدالة الأصلية."},{id:"adv_dec_3",text:"ما هي فائدة استخدام `@functools.wraps` داخل المُزخرف؟",options:["لجعل المُزخرف أسرع","لإضافة تعليقات تلقائية للكود","للحفاظ على بيانات الدالة الأصلية (مثل الاسم والـ docstring) في الدالة المُزخرفة","لحذف الدالة الأصلية بعد الزخرفة"],correctAnswerIndex:2,explanation:"`@functools.wraps` يساعد في الحفاظ على الـ metadata الخاص بالدالة الأصلية."},{id:"adv_dec_4",text:"إذا كان لديك مُزخرف اسمه `my_deco`، كيف يمكنك تطبيقه على دالة `my_func` باستخدام الصيغة المختصرة؟",options:["`apply my_deco to my_func`","`my_func = my_deco(my_func)`","`@my_deco` فوق تعريف `my_func`","`decorate(my_func, with=my_deco)`"],correctAnswerIndex:2,explanation:"علامة `@` متبوعة باسم المُزخرف هي الصيغة المختصرة (syntax sugar) لتطبيق المُزخرف."},{id:"adv_dec_5",text:'ماذا يعني أن الدوال في بايثون "مواطنين من الدرجة الأولى"؟',options:["أنها أهم جزء في البرنامج","أنها لا يمكن تعديلها","أنها يمكن معاملتها كأي قيمة أخرى (تمريرها، إرجاعها، تخزينها في متغيرات)","أنها تنفذ قبل أي كود آخر"],correctAnswerIndex:2,explanation:"كون الدوال مواطنين من الدرجة الأولى هو أساس عمل المُزخرفات، حيث يمكن تمريرها كـ arguments وإرجاعها."}]},{id:"l3-lesson-2",slug:"generators-iterators",title:"المُولدات (Generators) والمُكررات (Iterators)",description:"اكتشف كيف تعمل المُكررات والمُولدات في بايثون، ولماذا هي ضرورية للتعامل مع مجموعات كبيرة من البيانات بكفاءة.",content:[{type:"heading",text:"التعامل الذكي مع البيانات: المُكررات والمُولدات"},{type:"paragraph",text:'تخيل إنك محتاج تتعامل مع سلسلة طويلة جداً من البيانات، ممكن تكون ملايين الأرقام أو سطور في ملف ضخم. لو حاولت تخزن كل البيانات دي في الذاكرة مرة واحدة (مثلاً في قايمة)، ممكن الذاكرة متكفيش والبرنامج يضرب! هنا بيجي دور المُكررات (Iterators) والمُولدات (Generators) عشان يخلونا نتعامل مع البيانات دي بشكل "كسول" (Lazy)، يعني عنصر بعنصر وعند الحاجة بس.'},{type:"subheading",text:"بروتوكول التكرار (Iteration Protocol):"},{type:"paragraph",text:'في بايثون، عشان أي كائن يعتبر "قابل للتكرار" (Iterable) - يعني ينفع نستخدمه في حلقة `for` - لازم يحقق بروتوكول معين. الكائنات القابلة للتكرار (زي القوائم والنصوص والقواميس) بيكون عندها دالة خاصة اسمها `__iter__()`. الدالة دي لما بنستدعيها بترجع "مُكرِّر" (Iterator).'},{type:"paragraph",text:"المُكرِّر نفسه بيكون عنده دالة خاصة اسمها `__next__()`. كل مرة بنستدعي `__next__()` على المُكرِّر، بيرجعلنا العنصر التالي في السلسلة. لو مفيش عناصر تانية، المُكرِّر بيثير (raises) استثناء (exception) اسمه `StopIteration` عشان يقول إن التكرار خلص."},{type:"code",language:"python",text:`my_list = [1, 2, 3]

# my_list هي iterable
my_iterator = iter(my_list) # iter(my_list) هي نفسها my_list.__iter__()

print(type(my_iterator)) # <class 'list_iterator'>

print(next(my_iterator)) # next(my_iterator) هي نفسها my_iterator.__next__() -> 1
print(next(my_iterator)) # -> 2
print(next(my_iterator)) # -> 3
# print(next(my_iterator)) # السطر ده هيعمل StopIteration

# حلقة for بتعمل كل ده بشكل تلقائي وبتتعامل مع StopIteration لوحدها.`},{type:"subheading",text:"المُولدات (Generators): طريقة سهلة لعمل مُكررات"},{type:"paragraph",text:"كتابة مُكرِّر كامل بنفسك (بعمل class فيه `__iter__` و `__next__`) ممكن يكون ممل شوية. المُولدات بتقدملك طريقة أسهل بكتير عشان تعمل مُكررات. فيه طريقتين لعمل المُولدات:"},{type:"paragraph",text:'1. **دوال المُولدات (Generator Functions):** دي دوال عادية بس بدل ما تستخدم `return` عشان ترجع قيمة، بتستخدم كلمة `yield`. لما الدالة بتوصل لكلمة `yield`، بترجع القيمة اللي بعدها، بس في نفس الوقت "بتوقف" تنفيذها مؤقتاً وبتحافظ على حالتها (يعني فاكرة هي وقفت فين والمتغيرات كانت بكام). لما نطلب منها قيمة تاني (عن طريق `next()` أو في حلقة `for`)، بتكمل شغلها من بعد الـ `yield` اللي وقفت عنده لحد ما تلاقي `yield` تانية أو الدالة تخلص.'},{type:"code",language:"python",text:`def count_up_to(max_val):
    print("المولد بدأ!")
    count = 1
    while count <= max_val:
        print(f"قبل الـ yield لـ {count}")
        yield count # هنا بنرجع قيمة وبنوقف مؤقتاً
        print(f"بعد الـ yield لـ {count}")
        count += 1
    print("المولد خلص!")

counter_gen = count_up_to(3)
print(type(counter_gen)) # <class 'generator'>

print(f"القيمة الأولى: {next(counter_gen)}")
print("-" * 10)
print(f"القيمة الثانية: {next(counter_gen)}")
print("-" * 10)
print(f"القيمة الثالثة: {next(counter_gen)}")

# ممكن نستخدمه في حلقة for عادي
# for num in count_up_to(2):
# print(f"من الحلقة: {num}")`},{type:"paragraph",text:"2. **تعبيرات المُولدات (Generator Expressions):** دي شبه الـ List Comprehensions بالظبط، بس بدل الأقواس المربعة `[]` بنستخدم أقواس عادية `()`. النتيجة بتكون مُولد، مش قايمة كاملة في الذاكرة."},{type:"code",language:"python",text:`# List comprehension (بتعمل قايمة كاملة في الذاكرة)
list_comp = [x*x for x in range(5)]
print(f"List Comp: {list_comp}")

# Generator expression (بتعمل مُولد، مش بيحسب القيم إلا عند الطلب)
gen_exp = (x*x for x in range(5))
print(f"Gen Exp: {gen_exp}") # <generator object <genexpr> at ...>

print("المرور على عناصر المولد:")
for val in gen_exp:
    print(val) # هنا بس بيتم حساب القيم`},{type:"subheading",text:"ليه نستخدم المُولدات؟"},{type:"list",text:"المزايا الرئيسية:",items:['**كفاءة الذاكرة (Memory Efficiency):** المُولدات مش بتخزن كل العناصر في الذاكرة مرة واحدة. هي بتنتج كل عنصر "عند الطلب" (on the fly). ده بيخليها مثالية للتعامل مع مجموعات بيانات ضخمة جداً ممكن متكفيش في الذاكرة لو عملناها كقايمة.',"**التقييم الكسول (Lazy Evaluation):** القيم مش بتتحسب إلا لما تحتاجها. ده ممكن يوفر وقت لو مش محتاج كل القيم في السلسلة.","**التعامل مع تدفقات البيانات (Data Streams):** ممكن تستخدمها لقراءة بيانات من ملفات أو من الشبكة بشكل تدريجي."]},{type:"paragraph",text:"مثال: قراءة ملف كبير سطراً بسطر باستخدام مُولد (بايثون بيعمل كده تلقائياً لما تفتح ملف وتعمل عليه حلقة `for`):"},{type:"code",language:"text",text:`# تخيل عندك ملف كبير اسمه "large_file.txt"
# def read_large_file(file_path):
#     with open(file_path, "r") as f:
#         for line in f:
#             yield line.strip() # .strip() عشان تشيل أي مسافات زيادة

# for data_line in read_large_file("large_file.txt"):
# print(data_line) # كده هتعالج كل سطر لوحده من غير ما تحمل الملف كله في الذاكرة`},{type:"paragraph",text:"المُولدات والمُكررات مفاهيم قوية جداً في بايثون بتساعدك تكتب كود أكثر كفاءة ومرونة، خصوصاً لما تتعامل مع كميات كبيرة من البيانات."}],quiz:[{id:"adv_gen_1",text:"ما هي الميزة الرئيسية لاستخدام المُولدات (Generators) بدلاً من القوائم (Lists) لمعالجة كميات كبيرة من البيانات؟",options:["المُولدات أسهل في الكتابة دائماً","المُولدات تخزن كل العناصر في الذاكرة مرة واحدة مما يجعل الوصول أسرع","المُولدات تنتج العناصر عند الطلب (lazy evaluation) مما يوفر الذاكرة","المُولدات تدعم أنواع بيانات أكثر من القوائم"],correctAnswerIndex:2,explanation:"المُولدات فعالة من حيث الذاكرة لأنها لا تولد كل العناصر دفعة واحدة."},{id:"adv_gen_2",text:"ما هي الكلمة المفتاحية المستخدمة في دالة لإنشاء مُولد (Generator function)؟",options:["`return`","`generate`","`yield`","`produce`"],correctAnswerIndex:2,explanation:"كلمة `yield` هي التي تميز دالة المُولد وتحولها إلى مُولد."},{id:"adv_gen_3",text:"عندما تصل دالة المُولد إلى جملة `yield`، ماذا يحدث؟",options:["تنهي الدالة تنفيذها بالكامل","ترجع القيمة وتنهي الدالة","ترجع القيمة، توقف تنفيذها مؤقتاً وتحافظ على حالتها، وتستأنف من نفس النقطة عند الطلب التالي","تطبع القيمة على الشاشة فقط"],correctAnswerIndex:2,explanation:"`yield` توقف التنفيذ مؤقتًا وتحافظ على الحالة، مما يسمح بالاستئناف لاحقًا."},{id:"adv_gen_4",text:"ما هو الفرق بين تعبير المُولد (Generator expression) مثل `(x*x for x in range(3))` و List comprehension مثل `[x*x for x in range(3)]`؟",options:["لا يوجد فرق، كلاهما ينتج قائمة","تعبير المُولد ينتج مُولد (generator object)، بينما List comprehension تنتج قائمة (list) كاملة في الذاكرة","تعبير المُولد أسرع دائمًا","List comprehension لا يمكن استخدامها مع الشروط"],correctAnswerIndex:1,explanation:"تعبير المُولد يستخدم أقواس دائرية وينتج مُولدًا، بينما List comprehension تستخدم أقواس مربعة وتنتج قائمة."},{id:"adv_gen_5",text:"ما هو الاستثناء (Exception) الذي يثيره المُكرِّر (Iterator) عندما لا يتبقى لديه عناصر لتقديمها؟",options:["`EndOfIteration`","`StopIteration`","`NoMoreItemsError`","`IterationFinished`"],correctAnswerIndex:1,explanation:"`StopIteration` هو الاستثناء القياسي الذي يشير إلى نهاية التكرار."}]},{id:"l3-lesson-3",slug:"advanced-oop",title:"البرمجة الشيئية المتقدمة: الوراثة وتعدد الأوجه",description:"تعمق في مبادئ البرمجة الشيئية المتقدمة مثل الوراثة، التي تسمح للأصناف بأن ترث خصائص وسلوكيات من أصناف أخرى، وتعدد الأوجه.",content:[{type:"heading",text:"توسيع عالم الكائنات: الوراثة وتعدد الأوجه"},{type:"paragraph",text:"بعد ما عرفنا أساسيات البرمجة الشيئية (الأصناف والكائنات)، هنبدأ نتعمق شوية في مفاهيم متقدمة بتخلي الـ OOP أداة قوية جداً لتنظيم وبناء البرامج الكبيرة والمعقدة. أهم مفهومين هنتكلم عنهم هنا هما الوراثة (Inheritance) وتعدد الأوجه (Polymorphism)."},{type:"subheading",text:"1. الوراثة (Inheritance): بناء عائلات من الأصناف"},{type:"paragraph",text:"الوراثة بتسمحلك تعمل صنف جديد (بنسميه الصنف الابن - Child Class أو Subclass) بيرث الصفات (Attributes) والأفعال (Methods) من صنف تاني موجود بالفعل (بنسميه الصنف الأب - Parent Class أو Superclass)."},{type:"paragraph",text:'الفكرة هنا هي "إعادة استخدام الكود" (Code Reusability) وتنظيم الأصناف في تسلسل هرمي. الصنف الابن ممكن يضيف صفات وأفعال جديدة خاصة بيه، أو يعدل (Override) على الأفعال اللي ورثها من أبوه.'},{type:"paragraph",text:"الصيغة بتاعة الوراثة بسيطة: بنكتب اسم الصنف الأب بين قوسين بعد اسم الصنف الابن في تعريفه."},{type:"code",language:"python",text:`class Animal:  # ده الصنف الأب (Superclass)
    def __init__(self, name):
        self.name = name
        print(f"{self.name} اتولد كـ Animal.")

    def speak(self):
        # المفروض كل حيوان ليه صوت، بس هنا هنخليها عامة
        raise NotImplementedError("الصنف الابن لازم يعرف الـ method دي")

    def eat(self):
        print(f"{self.name} بياكل.")

class Dog(Animal): # Dog بيرث من Animal (الصنف الابن)
    def __init__(self, name, breed):
        super().__init__(name) # بنستدعي الـ __init__ بتاع الصنف الأب (Animal)
        self.breed = breed
        print(f"الكلب ده من فصيلة {self.breed}.")

    # إعادة تعريف (Override) للـ method speak
    def speak(self):
        return "هاو هاو!"

class Cat(Animal): # Cat بيرث من Animal
    def __init__(self, name, color):
        super().__init__(name) # مهم نستدعي الـ init بتاع الأب
        self.color = color
        print(f"القطة دي لونها {self.color}.")

    def speak(self):
        return "ميااااو!"

# نجرب نعمل كائنات
my_dog = Dog("روكي", "جيرمان شيبرد")
my_dog.eat() # ورثها من Animal
print(f"{my_dog.name} بيقول: {my_dog.speak()}") # استخدم الـ speak بتاعته هو

my_cat = Cat("لوسي", "أبيض")
my_cat.eat()
print(f"{my_cat.name} بتقول: {my_cat.speak()}")`},{type:"paragraph",text:"**دالة `super()`:** بنستخدمها عشان نستدعي method من الصنف الأب. دي مفيدة جداً عشان نتجنب تكرار الكود اللي موجود بالفعل في الأب، خصوصاً في `__init__`."},{type:"paragraph",text:"**إعادة تعريف الطرق (Method Overriding):** لما الصنف الابن بيعرف method بنفس اسم method موجودة في الصنف الأب، الـ method بتاعة الابن هي اللي بتشتغل لما نستدعيها على كائن من الصنف الابن. ده بيسمح للابن إنه يقدم سلوك خاص بيه."},{type:"subheading",text:"2. تعدد الأوجه (Polymorphism): كائنات مختلفة، سلوك واحد"},{type:"paragraph",text:'تعدد الأوجه كلمة كبيرة معناها "أشكال متعددة". في البرمجة الشيئية، معناها إننا ممكن نتعامل مع كائنات من أصناف مختلفة (بس ليها نفس الأب أو بتحقق نفس "الواجهة" - Interface) بنفس الطريقة، وكل كائن هيتصرف حسب الـ method بتاعته هو.'},{type:"paragraph",text:'بايثون لغة ديناميكية، فمفهوم تعدد الأوجه فيها بيكون مرن جداً وبيعتمد على مبدأ "Duck Typing" (لو بيمشي زي البطة وبيبطبط زي البطة، يبقى غالباً بطة!). يعني لو كائن عنده الـ method اللي إنت عايز تستدعيها، مش مهم هو من أي صنف بالظبط.'},{type:"code",language:"python",text:`# نكمل على مثال الحيوانات اللي فوق

def animal_sound(animal_object): # الدالة دي بتقبل أي كائن عنده method اسمها speak
    print(f"صوت الحيوان: {animal_object.speak()}")

# my_dog و my_cat كائنات من أصناف مختلفة، بس الاتنين عندهم speak()
animal_sound(my_dog)  # هيطبع: صوت الحيوان: هاو هاو!
animal_sound(my_cat)  # هيطبع: صوت الحيوان: ميااااو!

class Car:
    def start_engine(self):
        print("السيارة بدأت تشتغل!")

# لو حاولنا نمرر كائن من صنف Car لدالة animal_sound، هيحصل خطأ
# لأن Car مفيهاش method اسمها speak()
# my_car_obj = Car()
# animal_sound(my_car_obj) # هيعمل AttributeError`},{type:"paragraph",text:'تعدد الأوجه بيخلي الكود بتاعك أكثر مرونة وقابلية للتوسع. ممكن تضيف أصناف جديدة بتحقق نفس "العقد" أو "الواجهة" (يعني عندها نفس الـ methods المطلوبة) من غير ما تحتاج تعدل الكود اللي بيتعامل معاهم.'},{type:"paragraph",text:"الوراثة وتعدد الأوجه من أقوى المفاهيم في الـ OOP. فهمهم كويس بيفتحلك أبواب لعمل تصميمات برمجية قوية ومرنة."}],quiz:[{id:"adv_oop_1",text:"ما هو المفهوم الذي يسمح لصنف (Child Class) بأن يكتسب خصائص وسلوكيات صنف آخر (Parent Class)؟",options:["التغليف (Encapsulation)","تعدد الأوجه (Polymorphism)","الوراثة (Inheritance)","التجريد (Abstraction)"],correctAnswerIndex:2,explanation:"الوراثة هي الآلية التي تسمح بصنف بأن يرث من صنف آخر."},{id:"adv_oop_2",text:"كيف يتم استدعاء المُنشِئ (`__init__`) الخاص بالصنف الأب من داخل مُنشِئ الصنف الابن في بايثون؟",options:["`Parent.__init__(self, ...)`","`super().__init__(...)`","`self.parent.__init__(...)`","لا يمكن استدعاؤه"],correctAnswerIndex:1,explanation:"دالة `super()` هي الطريقة الموصى بها لاستدعاء طرق الصنف الأب، بما في ذلك `__init__`."},{id:"adv_oop_3",text:"ماذا يحدث إذا قام الصنف الابن بتعريف دالة (method) بنفس اسم دالة موجودة في الصنف الأب؟",options:["يحدث خطأ في البرنامج","يتم تجاهل دالة الصنف الابن ويتم استدعاء دالة الصنف الأب دائمًا","يتم إعادة تعريف الدالة (Method Overriding)، ويتم استدعاء نسخة الصنف الابن عند استدعائها على كائن من الصنف الابن","يتم دمج الدالتين معًا"],correctAnswerIndex:2,explanation:"هذا يسمى إعادة تعريف الدالة (Method Overriding)، حيث يوفر الصنف الابن تطبيقًا خاصًا للدالة الموروثة."},{id:"adv_oop_4",text:'ما هو مبدأ "Duck Typing" في بايثون فيما يتعلق بتعدد الأوجه؟',options:['أن الكائن يجب أن يكون من صنف "Duck" ليعمل',"أن نوع الكائن هو الأهم، وليس سلوكه","إذا كان الكائن يتصرف (لديه الطرق المطلوبة) مثل نوع معين، فيمكن معاملته على هذا الأساس، بغض النظر عن نوعه الفعلي","أنه يجب استخدام مكتبة خاصة لتحقيق تعدد الأوجه"],correctAnswerIndex:2,explanation:'"If it walks like a duck and quacks like a duck, then it must be a duck." يعتمد على سلوك الكائن (الطرق المتاحة) بدلاً من نوعه الصريح.'},{id:"adv_oop_5",text:"في المثال `class B(A): pass`، أي صنف هو الصنف الأب (Superclass)؟",options:["B","A","pass","لا يوجد صنف أب"],correctAnswerIndex:1,explanation:"الصنف الذي يوضع بين القوسين في تعريف الصنف الابن هو الصنف الأب (A في هذه الحالة)."}]},{id:"l3-lesson-4",slug:"context-managers",title:"مديرو السياق (Context Managers) واستخدام جملة `with`",description:"تعلم كيف تستخدم مديري السياق وجملة `with` لضمان إدارة الموارد (مثل الملفات أو الاتصالات) بشكل صحيح وآمن.",content:[{type:"heading",text:"إدارة الموارد بأمان: مديرو السياق وجملة `with`"},{type:"paragraph",text:'كتير أوي في البرمجة بنحتاج نتعامل مع "موارد" (Resources) لازم نعملها إعداد (Setup) في الأول، وبعد ما نخلص شغلنا بيها لازم نعملها "تنظيف" (Cleanup) أو إغلاق (Teardown) بشكل كويس. أشهر مثال على كده هو التعامل مع الملفات: لازم نفتح الملف الأول، وبعدين نقرا منه أو نكتب فيه، وفي الآخر لازم نقفله عشان نتأكد إن كل حاجة اتكتبت صح وإننا محرناش المورد ده.'},{type:"paragraph",text:'المشكلة إننا ممكن ننسى نقفل الملف، أو ممكن يحصل خطأ (Exception) في نص الشغل فالبرنامج يقف قبل ما يوصل لسطر إغلاق الملف. هنا بيجي دور "مديرو السياق" (Context Managers) وجملة `with` عشان يضمنوا إن عملية التنظيف دي بتحصل دايماً، حتى لو حصل أخطاء.'},{type:"subheading",text:"جملة `with` مع الملفات (المثال الأشهر):"},{type:"paragraph",text:"إحنا بالفعل ممكن نكون شفنا جملة `with` لما كنا بنتعامل مع الملفات:"},{type:"code",language:"python",text:`# الطريقة التقليدية (ممكن ننسى f.close() أو يحصل خطأ قبله)
# f = open("myfile.txt", "w")
# try:
#     f.write("Hello, Bod Code!")
# finally:
#     f.close() # لازم نتأكد إنها بتتقفل حتى لو حصل خطأ

# باستخدام جملة with (أفضل وأنضف)
with open("myfile.txt", "w", encoding="utf-8") as f: # f هنا هو كائن الملف
    f.write("مرحباً يا Bod Code!\\n")
    f.write("جملة with بتضمن إن الملف هيتقفل لوحده.")
# أول ما نخرج من البلوك بتاع with، الملف f بيتقفل تلقائياً، حتى لو حصل خطأ جوه البلوك.`},{type:"paragraph",text:"كائن الملف اللي بيرجع من `open()` هو نفسه مدير سياق جاهز."},{type:"subheading",text:"كيف يعمل مدير السياق؟ بروتوكول مدير السياق"},{type:"paragraph",text:'عشان أي كائن يقدر يشتغل كمدير سياق ويستخدم مع جملة `with`، لازم يحقق "بروتوكول مدير السياق". ده معناه إنه لازم يكون عنده دالتين خاصتين:'},{type:"list",text:"",items:["`__enter__(self)`: الدالة دي بتشتغل أول ما ندخل البلوك بتاع `with`. القيمة اللي بترجعها الدالة دي هي اللي بتتخزن في المتغير اللي بعد كلمة `as` (زي `f` في المثال اللي فات). لو مش محتاج ترجع حاجة معينة، ممكن ترجع `self` أو `None`.","`__exit__(self, exc_type, exc_val, exc_tb)`: الدالة دي بتشتغل أول ما نخرج من البلوك بتاع `with`، سواء خرجنا بشكل طبيعي أو بسبب حدوث خطأ. الـ arguments التلاتة الأخيرة (`exc_type`, `exc_val`, `exc_tb`) بيكون فيهم معلومات عن الخطأ لو حصل (بيكونوا `None` لو مفيش خطأ). لو الدالة دي رجعت `True`، ده معناه إنها عالجت الخطأ والخطأ مش هيتنشر أكتر من كده. لو رجعت `False` (أو مرجعتش حاجة، فالافتراضي `None` اللي بيعتبر `False` في السياق ده)، الخطأ هيتنشر عادي."]},{type:"subheading",text:"إنشاء مدير سياق مخصص باستخدام صنف (Class):"},{type:"code",language:"python",text:`class Timer: # مدير سياق بسيط بيحسب الوقت اللي خده بلوك الكود
    def __init__(self, name="Timer"):
        self.name = name
        print(f"المؤقت '{self.name}' بدأ.")

    def __enter__(self):
        import time
        self.start_time = time.time()
        return self # ممكن نرجع أي حاجة، هنا بنرجع المؤقت نفسه لو حبينا نستخدمه جوه البلوك

    def __exit__(self, exc_type, exc_val, exc_tb):
        import time
        self.end_time = time.time()
        elapsed_time = self.end_time - self.start_time
        print(f"المؤقت '{self.name}' انتهى. الوقت المستغرق: {elapsed_time:.4f} ثانية.")
        # لو رجعنا True هنا، أي خطأ هيحصل جوه الـ with هيتم تجاهله (مش دايماً فكرة كويسة)
        return False # بنرجع False عشان الأخطاء تتنشر عادي لو حصلت

with Timer("عملية مهمة") as t:
    # شوية عمليات بتاخد وقت
    total = 0
    for i in range(1000000):
        total += i
    print(f"الإجمالي: {total}")

print("بعد بلوك الـ with.")`},{type:"subheading",text:"إنشاء مدير سياق باستخدام `contextlib.contextmanager`:"},{type:"paragraph",text:"موديول `contextlib` بيقدم طريقة أسهل لعمل مديري سياق بسيطة باستخدام دالة مُولد (generator function) ومُزخرف (decorator) اسمه `@contextmanager`."},{type:"paragraph",text:"الدالة المُولدة دي لازم يكون فيها `yield` مرة واحدة بس. الكود اللي قبل الـ `yield` بيشتغل كأنه في `__enter__`. القيمة اللي بتعملها `yield` (لو فيه) هي اللي بتتخزن في المتغير بعد `as`. الكود اللي بعد الـ `yield` بيشتغل كأنه في `__exit__` (وبتنفذ جوه بلوك `finally` عشان يضمن إنه يشتغل حتى لو حصل خطأ)."},{type:"code",language:"python",text:`from contextlib import contextmanager
import time

@contextmanager
def simple_timer(name="SimpleTimer"):
    print(f"المؤقت البسيط '{name}' بدأ.")
    start_time = time.time()
    try:
        yield # هنا الـ yield بترجع None ضمنياً، ممكن نعمل yield لقيمة لو عايزين
    finally:
        end_time = time.time()
        elapsed_time = end_time - start_time
        print(f"المؤقت البسيط '{name}' انتهى. الوقت: {elapsed_time:.4f} ثانية.")

with simple_timer("حسابات سريعة"):
    result = sum(i for i in range(500000))
    print(f"نتيجة الحسابات: {result}")`},{type:"paragraph",text:"مديرو السياق وجملة `with` بيخلوا الكود بتاعك أكثر أمانًا وأسهل في القراءة، لأنهم بيضمنوا إن الموارد بيتم التعامل معاها بشكل صحيح من غير ما تحتاج تكتب بلوكات `try...finally` معقدة كل مرة."}],quiz:[{id:"adv_cm_1",text:"ما هي الفائدة الرئيسية لاستخدام جملة `with` مع مدير سياق (Context Manager)؟",options:["لجعل الكود يعمل بشكل أسرع","لضمان تنفيذ عمليات الإعداد (setup) والتنظيف (cleanup) للموارد بشكل صحيح وآمن، حتى في حالة حدوث أخطاء","لإضافة تعليقات تلقائية للكود","لإنشاء متغيرات جديدة فقط داخل البلوك"],correctAnswerIndex:1,explanation:"جملة `with` تضمن أن موارد مثل الملفات يتم إغلاقها بشكل صحيح."},{id:"adv_cm_2",text:"ما هما الدالتان الخاصتان اللتان يجب أن يوفرهما الصنف ليعمل كمدير سياق؟",options:["`__start__()` و `__end__()`","`__open__()` و `__close__()`","`__init__()` و `__del__()`","`__enter__()` و `__exit__()`"],correctAnswerIndex:3,explanation:"بروتوكول مدير السياق يتطلب تعريف دالتي `__enter__` و `__exit__`."},{id:"adv_cm_3",text:"متى يتم استدعاء دالة `__enter__()` الخاصة بمدير السياق؟",options:["عند الخروج من بلوك `with`","عند الدخول إلى بلوك `with`","فقط إذا حدث خطأ داخل بلوك `with`","لا يتم استدعاؤها تلقائيًا"],correctAnswerIndex:1,explanation:"`__enter__` يتم استدعاؤها عند بدء تنفيذ بلوك `with`."},{id:"adv_cm_4",text:"ماذا يحدث إذا رجعت دالة `__exit__()` قيمة `True` بعد حدوث خطأ داخل بلوك `with`؟",options:["يتم نشر الخطأ (reraised) بشكل طبيعي","يتم قمع الخطأ (suppressed) ولا يتم نشره خارج بلوك `with`","يتوقف البرنامج بالكامل فورًا","يتم استدعاء `__enter__()` مرة أخرى"],correctAnswerIndex:1,explanation:"إذا عادت `__exit__` بـ `True`، فهذا يشير إلى أن الخطأ قد تم التعامل معه ولا ينبغي نشره."},{id:"adv_cm_5",text:"ما هو المُزخرف (decorator) من موديول `contextlib` الذي يسمح بإنشاء مدير سياق باستخدام دالة مُولدة (generator function)؟",options:["`@contextmanager`","`@managewith`","`@contextgenerator`","`@withable`"],correctAnswerIndex:0,explanation:"`@contextlib.contextmanager` هو المُزخرف المستخدم لهذا الغرض."}]},{id:"l3-lesson-5",slug:"regular-expressions",title:"التعبيرات النمطية (Regular Expressions) للبحث المتقدم في النصوص",description:"تعلم كيف تستخدم التعبيرات النمطية للبحث عن أنماط معقدة في النصوص والتحقق من صحتها ومعالجتها باستخدام موديول `re`.",content:[{type:"heading",text:"صياد الأنماط الخفي: التعبيرات النمطية (Regex)"},{type:"paragraph",text:'التعبيرات النمطية (Regular Expressions أو Regex اختصاراً) دي لغة مصغرة جوه لغة البرمجة، بنستخدمها عشان نوصف "أنماط" (Patterns) معينة في النصوص. تخيل إنك عايز تدور على كل إيميلات في نص كبير، أو كل أرقام تليفونات، أو تتأكد إن كلمة سر المستخدم مطابقة لشروط معينة (فيها حروف كبيرة وصغيرة وأرقام ورموز). الـ Regex بيخليك تعمل كل ده وأكتر!'},{type:"paragraph",text:"في بايثون، بنستخدم موديول `re` المدمج عشان نشتغل بالتعبيرات النمطية."},{type:"code",language:"python",text:"import re"},{type:"subheading",text:"أشهر الرموز والأنماط في Regex:"},{type:"list",text:"بعض الرموز الأساسية (Metacharacters):",items:["`.` (نقطة): بتطابق أي حرف واحد (ماعدا سطر جديد `\\n` إلا لو استخدمت خيار معين).",'`^` (علامة القبعة): بتطابق بداية السلسلة النصية. مثال: `^Hello` تطابق "Hello World" لكن لا تطابق "World Hello".','`$` (علامة الدولار): بتطابق نهاية السلسلة النصية. مثال: `World$` تطابق "Hello World" لكن لا تطابق "World Hello".','`*` (النجمة): بتطابق الحرف أو المجموعة اللي قبلها صفر مرة أو أكتر. مثال: `ab*c` تطابق "ac", "abc", "abbc".','`+` (علامة الزائد): بتطابق الحرف أو المجموعة اللي قبلها مرة واحدة أو أكتر. مثال: `ab+c` تطابق "abc", "abbc" لكن لا تطابق "ac".','`?` (علامة الاستفهام): بتطابق الحرف أو المجموعة اللي قبلها صفر مرة أو مرة واحدة. مثال: `colou?r` تطابق "color" و "colour".',"`{m}`: بتطابق الحرف أو المجموعة اللي قبلها `m` مرة بالظبط.","`{m,n}`: بتطابق الحرف أو المجموعة اللي قبلها من `m` إلى `n` مرة.",'`[]` (الأقواس المربعة): بتعرف "مجموعة حروف" (Character Set). بتطابق أي حرف واحد من اللي جواها. مثال: `[abc]` تطابق "a" أو "b" أو "c". ممكن تستخدم مدى زي `[a-z]` (كل الحروف الصغيرة) أو `[0-9]` (كل الأرقام).',"`[^...]`: بتطابق أي حرف مش موجود جوه الأقواس المربعة (نفي المجموعة).",'`|` (الشرطة الرأسية - OR): بتطابق التعبير اللي قبلها أو التعبير اللي بعدها. مثال: `cat|dog` تطابق "cat" أو "dog".',"`()` (الأقواس الدائرية): بتستخدم لتجميع أجزاء من النمط (Grouping) أو لالتقاط (Capturing) الجزء اللي طابقه النمط ده.",'`\\` (الشرطة المائلة للخلف): بتستخدم لـ "إلغاء" المعنى الخاص للحرف اللي بعدها (Escape character). مثال: لو عايز تطابق نقطة حرفياً، تكتب `\\.`. كمان بتستخدم لتعريف تسلسلات خاصة.']},{type:"list",text:"بعض التسلسلات الخاصة (Special Sequences):",items:["`\\d`: بتطابق أي رقم عشري (زي `[0-9]`).","`\\D`: بتطابق أي حرف مش رقم عشري (زي `[^0-9]`).","`\\s`: بتطابق أي مسافة بيضاء (space, tab, newline, etc.).","`\\S`: بتطابق أي حرف مش مسافة بيضاء.",'`\\w`: بتطابق أي حرف "كلمة" (حروف أبجدية إنجليزية، أرقام، وعلامة `_`).','`\\W`: بتطابق أي حرف مش "كلمة".','`\\b`: بتطابق حدود الكلمة ( بداية أو نهاية كلمة). مثال: `\\bcat\\b` تطابق "cat" ككلمة منفصلة.']},{type:"subheading",text:"أشهر دوال موديول `re`:"},{type:"list",text:"",items:['`re.search(pattern, string)`: بيبحث عن أول ظهور للنمط `pattern` في السلسلة `string`. لو لقاه، بيرجع كائن "match object" فيه معلومات عن التطابق. لو ملقاهوش، بيرجع `None`.','`re.match(pattern, string)`: زي `search` بس بيحاول يطابق النمط من "بداية" السلسلة فقط. لو النمط مش بيبدأ من أول السلسلة، بيرجع `None`.',"`re.findall(pattern, string)`: بيرجع قايمة (list) بكل التطابقات غير المتداخلة للنمط في السلسلة. كل عنصر في القايمة بيكون النص اللي طابقه النمط.",'`re.finditer(pattern, string)`: زي `findall` بس بيرجع مُكرِّر (iterator) من كائنات الـ "match objects" بدل قايمة نصوص.',"`re.sub(pattern, repl, string)`: بيستبدل كل ظهور للنمط `pattern` في السلسلة `string` بالنص `repl`. بيرجع السلسلة الجديدة بعد التعديل.",'`re.compile(pattern)`: لو هتستخدم نفس النمط كتير، ممكن "تجمعه" (compile) الأول باستخدام الدالة دي. ده بيرجع كائن نمط (pattern object) تقدر تستخدم معاه دوال زي `search`, `match`, `findall` مباشرة، وده ممكن يكون أسرع شوية.']},{type:"code",language:"python",text:`import re

text = "Hello from Bod Code! My email is test@example.com and phone is 123-456-7890."

# البحث عن كلمة "Bod Code"
match_obj = re.search(r"Bod Code", text) # r"" بتعمل raw string عشان الـ \\ ميتفهمش غلط
if match_obj:
    print(f"لقينا 'Bod Code' من الفهرس {match_obj.start()} إلى {match_obj.end()}")
    print(f"النص المتطابق: {match_obj.group(0)}") # .group(0) أو .group() بترجع النص اللي طابقه النمط كله
else:
    print("'Bod Code' مش موجودة.")

# استخراج كل الإيميلات (نمط بسيط للإيميل)
email_pattern = r"\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b"
emails = re.findall(email_pattern, text)
print(f"الإيميلات الموجودة: {emails}") # ['test@example.com']

# استبدال أرقام التليفونات بكلمة [PHONE_REDACTED]
phone_pattern = r"\\d{3}-\\d{3}-\\d{4}"
censored_text = re.sub(phone_pattern, "[PHONE_REDACTED]", text)
print(f"النص بعد التعديل: {censored_text}")`},{type:"subheading",text:"كائن التطابق (Match Object):"},{type:"paragraph",text:"لما `search` أو `match` بيلاقوا تطابق، بيرجعوا كائن فيه معلومات مفيدة:"},{type:"list",text:"",items:["`.group(index_or_name)`: بيرجع النص اللي طابقه المجموعة (group) اللي حددتها. `group(0)` أو `group()` بيرجع النص كله اللي طابقه النمط. لو استخدمت أقواس `()` في النمط بتاعك عشان تعمل مجموعات التقاط (capturing groups)، تقدر توصلهم بـ `group(1)`, `group(2)` وهكذا.","`.start()`: بيرجع فهرس بداية التطابق.","`.end()`: بيرجع فهرس نهاية التطابق (اللي بعد آخر حرف طابقه).","`.span()`: بيرجع tuple فيه فهرس البداية والنهاية."]},{type:"paragraph",text:"التعبيرات النمطية أداة قوية جداً وموجودة في لغات برمجة كتير. ممكن تبان معقدة في الأول، بس لما تتقنها بتوفر عليك مجهود كبير جداً في معالجة النصوص. فيه مواقع كتير أونلاين ممكن تجرب عليها الـ Regex بتاعك وتشوف هو بيطابق إيه (زي regex101.com)."}],quiz:[{id:"adv_re_1",text:"ما هو الموديول الذي يجب استيراده في بايثون للعمل مع التعبيرات النمطية؟",options:["`regex`","`string`","`re`","`pattern`"],correctAnswerIndex:2,explanation:"موديول `re` هو الموديول القياسي في بايثون للتعبيرات النمطية."},{id:"adv_re_2",text:'أي من الرموز التالية في Regex يطابق "أي حرف واحد" (باستثناء سطر جديد افتراضيًا)؟',options:["`*`","`?`","`.` (نقطة)","`+`"],correctAnswerIndex:2,explanation:"النقطة `.` تطابق أي حرف واحد."},{id:"adv_re_3",text:"ماذا تفعل دالة `re.findall(pattern, string)`؟",options:["ترجع أول تطابق للنمط فقط ككائن match","ترجع قائمة (list) بكل النصوص التي تطابق النمط في السلسلة","تستبدل كل تطابق للنمط بنص جديد","تجمع النمط لاستخدامه لاحقًا"],correctAnswerIndex:1,explanation:"`re.findall()` تعيد قائمة بكل التطابقات النصية."},{id:"adv_re_4",text:"في Regex، ماذا يعني التسلسل الخاص `\\d`؟",options:["يطابق أي حرف غير رقمي","يطابق أي مسافة بيضاء","يطابق أي رقم عشري (0-9)","يطابق أي حرف كلمة (أبجدي رقمي)"],correctAnswerIndex:2,explanation:"`\\d` هو اختصار لمجموعة الأرقام `[0-9]`."},{id:"adv_re_5",text:'إذا كان `match = re.search(r"(Hello) (World)", "Hello World")`، فماذا سيعيد `match.group(2)`؟',options:['`"Hello World"`','`"Hello"`','`"World"`',"خطأ"],correctAnswerIndex:2,explanation:"`group(1)` سيعيد ما طابقته المجموعة الأولى `(Hello)`، و `group(2)` سيعيد ما طابقته المجموعة الثانية `(World)`."}]},{id:"l3-lesson-6",slug:"working-with-apis",title:"التعامل مع واجهات برمجة التطبيقات (APIs) لجلب البيانات من الويب",description:"اكتشف كيفية استهلاك APIs خارجية لجلب بيانات من خدمات الويب المختلفة ودمجها في تطبيقاتك باستخدام مكتبة `requests`.",content:[{type:"heading",text:"نافذتك على عالم البيانات: التعامل مع APIs"},{type:"paragraph",text:"واجهة برمجة التطبيقات (Application Programming Interface - API) دي طريقة بتسمح لبرنامجك إنه يتكلم مع برنامج تاني ويطلب منه بيانات أو يطلب منه يعمل حاجة معينة. تخيلها زي الجرسون في مطعم: إنت (برنامجك) بتطلب من الجرسون (الـ API) طلب معين (بيانات معينة)، وهو بيروح للمطبخ (البرنامج التاني أو السيرفر) ويجيبلك الطلب."},{type:"paragraph",text:"كتير من المواقع والخدمات على الإنترنت (زي خدمات الطقس، الأخبار، الخرايط، شبكات التواصل الاجتماعي، إلخ) بتقدم APIs عشان المطورين يقدروا يستخدموا بياناتها أو وظائفها في تطبيقاتهم الخاصة. معظم الـ APIs دي بتكون Web APIs، يعني بتشتغل عن طريق بروتوكول HTTP (نفس البروتوكول اللي بيستخدمه متصفحك عشان يجيب صفحات الويب)."},{type:"subheading",text:"طلبات HTTP الأساسية:"},{type:"list",text:"أشهر أنواع طلبات HTTP اللي بنستخدمها مع APIs:",items:["`GET`: لطلب بيانات من السيرفر (زي لما بتفتح صفحة ويب).","`POST`: لإرسال بيانات للسيرفر عشان يعمل حاجة جديدة (زي لما بتبعت فورم أو تنشر بوست).","`PUT`: لتحديث بيانات موجودة بالفعل على السيرفر.","`DELETE`: لحذف بيانات من السيرفر."]},{type:"subheading",text:"مكتبة `requests` في بايثون:"},{type:"paragraph",text:"عشان نبعت طلبات HTTP ونتعامل مع الـ APIs بسهولة في بايثون، بنستخدم مكتبة مشهورة جداً اسمها `requests`. المكتبة دي مش جزء من المكتبة القياسية لبايثون، فبتحتاج تثبتها الأول لو مش متثبتة عندك:"},{type:"code",language:"text",text:"pip install requests"},{type:"paragraph",text:"بعد ما تثبتها، تقدر تستوردها في الكود بتاعك:"},{type:"code",language:"python",text:"import requests"},{type:"subheading",text:"إرسال طلب `GET` بسيط:"},{type:"paragraph",text:'هنستخدم API مجاني ومفتوح اسمه JSONPlaceholder، بيقدم بيانات وهمية (fake data) عشان نجرب عليها. مثلاً، عشان نجيب قايمة بـ "المهام" (todos):'},{type:"code",language:"python",text:`import requests
import json # عشان نعرض الـ JSON بشكل منظم

api_url = "https://jsonplaceholder.typicode.com/todos"

try:
    response = requests.get(api_url) # بنبعت طلب GET للـ URL ده

    # نتأكد إن الطلب نجح (status code 200 يعني OK)
    response.raise_for_status() # لو فيه خطأ HTTP (زي 404 أو 500)، السطر ده هيعمل استثناء

    # الـ API ده بيرجع بيانات بصيغة JSON
    # مكتبة requests عندها دالة .json() بتحول الـ JSON ده لقاموس أو قايمة بايثون علطول
    todos_data = response.json() 

    print(f"جبنا {len(todos_data)} مهمة.")
    
    # نطبع أول 3 مهام كمثال
    for i in range(min(3, len(todos_data))):
        todo = todos_data[i]
        print(f"المهمة رقم {todo['id']}: {todo['title']} (مكتملة: {todo['completed']})")

except requests.exceptions.HTTPError as http_err:
    print(f"حصل خطأ HTTP: {http_err}")
except requests.exceptions.RequestException as req_err:
    print(f"حصل خطأ في الطلب: {req_err}")
except Exception as err:
    print(f"حصل خطأ تاني: {err}")`},{type:"subheading",text:"كائن الاستجابة (Response Object):"},{type:"paragraph",text:"لما بتبعت طلب، مكتبة `requests` بترجعلك كائن استجابة (response object) فيه معلومات كتير عن الرد اللي جالك من السيرفر:"},{type:"list",text:"",items:["`.status_code`: رقم حالة HTTP (مثلاً 200 لـ OK، 404 لـ Not Found، 500 لـ Internal Server Error).","`.text`: محتوى الرد كنص (string).","`.json()`: لو الرد بصيغة JSON، الدالة دي بتحاول تحوله لكائن بايثون (list أو dict).","`.headers`: قاموس فيه الـ HTTP headers بتاعة الرد.","`.content`: محتوى الرد كـ bytes (مفيد للملفات الثنائية زي الصور)."]},{type:"subheading",text:"إرسال بيانات مع الطلب (Query Parameters و Request Body):"},{type:"list",text:"",items:["**Query Parameters (لطلبات `GET`):** ساعات بنحتاج نبعت معلومات إضافية مع طلب `GET` عشان نفلتر أو نخصص البيانات اللي عايزينها. دي بتتحط في الـ URL بعد علامة `?` وبتكون على شكل `key=value`. مكتبة `requests` بتسمحلك تبعت قاموس بالـ parameters دي وهي بتعمل الـ URL صح.",'**Request Body (لطلبات `POST` أو `PUT`):** لما بنكون عايزين نبعت بيانات للسيرفر (زي بيانات فورم جديد)، بنحطها في "جسم الطلب" (request body). لو البيانات دي بصيغة JSON، ممكن نبعت قاموس بايثون باستخدام الـ argument `json` في دالة `requests.post()`.']},{type:"code",language:"python",text:`import requests

# مثال على GET مع query parameters
# هنجيب المهمة رقم 1 بس
todo_id = 1
url_single_todo = f"https://jsonplaceholder.typicode.com/todos/{todo_id}" 
# أو ممكن نستخدم params:
# url_base = "https://jsonplaceholder.typicode.com/todos"
# params = {"id": 1}
# response_single = requests.get(url_base, params=params)

response_single = requests.get(url_single_todo)
if response_single.status_code == 200:
    single_todo_data = response_single.json()
    print(f"\\nبيانات المهمة رقم {todo_id}: {single_todo_data}")
else:
    print(f"\\nفشل في جلب المهمة رقم {todo_id}. كود الحالة: {response_single.status_code}")


# مثال على POST لإضافة "منشور" (post) جديد (الـ API ده وهمي فمش هيحفظه فعلياً)
posts_url = "https://jsonplaceholder.typicode.com/posts"
new_post_data = {
    "title": "منشور جديد من Bod Code",
    "body": "ده محتوى المنشور بتاعنا.",
    "userId": 101 # أي رقم مستخدم
}

try:
    post_response = requests.post(posts_url, json=new_post_data)
    post_response.raise_for_status() # نتأكد من النجاح (عادة بيكون 201 Created)
    
    created_post = post_response.json()
    print(f"\\nتم إنشاء منشور جديد (وهمياً):")
    print(created_post) # الـ API ده بيرجع المنشور اللي "اتعمل" مع id جديد
except requests.exceptions.RequestException as e:
    print(f"\\nفشل في إرسال المنشور: {e}")`},{type:"subheading",text:"مفاتيح الـ API (API Keys) والمصادقة (Authentication):"},{type:"paragraph",text:'كتير من الـ APIs (خصوصاً اللي بتقدم بيانات حساسة أو ليها حدود استخدام) بتحتاج "مفتاح API" (API Key) أو نوع تاني من "المصادقة" عشان تتأكد إنك مسموحلك تستخدم الخدمة. طريقة إرسال المفتاح ده بتختلف من API للتاني: ممكن يكون في الـ headers، أو كـ query parameter. لازم تقرا توثيق الـ API اللي بتستخدمه عشان تعرف الطريقة الصح.'},{type:"paragraph",text:"التعامل مع الـ APIs بيفتحلك إمكانيات لا نهائية عشان تطبيقاتك تتفاعل مع العالم الخارجي وتستخدم بيانات وخدمات متنوعة. مكتبة `requests` بتخلي العملية دي سهلة وممتعة!"}],quiz:[{id:"adv_api_1",text:"ما هي مكتبة بايثون الشهيرة المستخدمة لإرسال طلبات HTTP والتعامل مع APIs؟",options:["`http.client`","`urllib`","`requests`","`socket`"],correctAnswerIndex:2,explanation:"مكتبة `requests` هي الأكثر شيوعًا وسهولة في الاستخدام لهذا الغرض."},{id:"adv_api_2",text:"أي نوع من طلبات HTTP يستخدم عادةً لطلب (جلب) بيانات من سيرفر API؟",options:["`POST`","`GET`","`PUT`","`DELETE`"],correctAnswerIndex:1,explanation:"طلب `GET` يستخدم لجلب الموارد والبيانات."},{id:"adv_api_3",text:'إذا نجح طلب HTTP، ما هو رقم حالة (status code) الاستجابة الأكثر شيوعًا الذي يشير إلى "OK"؟',options:["404","500","200","301"],correctAnswerIndex:2,explanation:"`200 OK` هو كود الحالة القياسي للنجاح."},{id:"adv_api_4",text:"في مكتبة `requests`، إذا كانت استجابة الـ API بصيغة JSON، أي دالة على كائن الاستجابة تستخدم لتحويلها مباشرة إلى قاموس أو قائمة بايثون؟",options:["`.text()`","`.content()`","`.parse_json()`","`.json()`"],correctAnswerIndex:3,explanation:"دالة `.json()` تقوم بتحليل الاستجابة كـ JSON وتحويلها إلى هياكل بيانات بايثون."},{id:"adv_api_5",text:"عند إرسال بيانات لإنشاء مورد جديد على السيرفر (مثل إرسال فورم)، أي نوع من طلبات HTTP يستخدم عادةً، وأين توضع البيانات المرسلة؟",options:["`GET`، وتوضع البيانات في الـ URL كـ query parameters.","`POST`، وتوضع البيانات في جسم الطلب (request body).","`DELETE`، ولا يتم إرسال بيانات.","`GET`، وتوضع البيانات في الـ headers."],correctAnswerIndex:1,explanation:"`POST` يستخدم لإنشاء موارد جديدة، ويتم إرسال البيانات عادة في جسم الطلب (مثلاً كـ JSON)."}]},{id:"l3-lesson-7",slug:"basic-database-interaction",title:"أساسيات التعامل مع قواعد البيانات باستخدام `sqlite3`",description:"تعلم كيفية تخزين واسترجاع البيانات بشكل دائم باستخدام وحدة `sqlite3` المدمجة، وهي قاعدة بيانات خفيفة ومناسبة للمشاريع الصغيرة والمتوسطة.",content:[{type:"heading",text:"خزنة أسرارك الدائمة: قواعد البيانات مع `sqlite3`"},{type:"paragraph",text:'لما تطبيقاتنا بتحتاج تحفظ بيانات بشكل دائم وتسترجعها بعدين، حتى لو البرنامج اتقفل واتفتح تاني، بنلجأ لـ "قواعد البيانات" (Databases). قاعدة البيانات دي نظام متخصص لتخزين وتنظيم والبحث في كميات كبيرة من البيانات بكفاءة.'},{type:"paragraph",text:"بايثون عندها موديول مدمج اسمه `sqlite3` بيخلينا نتعامل مع نوع خفيف جداً من قواعد البيانات اسمه SQLite. SQLite مش محتاجة سيرفر منفصل، قاعدة البيانات كلها بتكون عبارة عن ملف واحد بس على جهازك، وده بيخليها مناسبة جداً للمشاريع الصغيرة والمتوسطة أو لما تكون عايز قاعدة بيانات مدمجة مع تطبيقك."},{type:"subheading",text:"مفاهيم أساسية في قواعد البيانات العلائقية (زي SQLite):"},{type:"list",text:"",items:["**قاعدة البيانات (Database):** هي الحاوية الكبيرة اللي فيها كل حاجة (زي الملف بتاع SQLite).",'**الجداول (Tables):** جوه قاعدة البيانات، البيانات بتتنظم في جداول. كل جدول بيكون ليه اسم معين (زي جدول "المستخدمين" أو "المنتجات") وبيكون فيه "أعمدة" (Columns) و "صفوف" (Rows).','**الأعمدة (Columns/Fields):** كل عمود في الجدول بيمثل نوع معين من البيانات (زي "اسم المستخدم"، "الإيميل"، "العمر"). كل عمود بيكون ليه اسم ونوع بيانات (نص، رقم، تاريخ، إلخ).',"**الصفوف (Rows/Records):** كل صف في الجدول بيمثل سجل واحد أو معلومة واحدة كاملة (زي بيانات مستخدم واحد بكل تفاصيله).","**المفتاح الأساسي (Primary Key):** عادةً بيكون فيه عمود في كل جدول قيمته فريدة لكل صف (مينفعش تتكرر). ده بنسميه المفتاح الأساسي، وبنستخدمه عشان نميز كل صف عن التاني (زي رقم البطاقة أو رقم تسلسلي).","**لغة SQL (Structured Query Language):** دي اللغة القياسية اللي بنستخدمها عشان نتكلم مع قواعد البيانات العلائقية (نعمل جداول، نضيف بيانات، نبحث، نعدل، نمسح). SQLite بتفهم أوامر SQL."]},{type:"subheading",text:"خطوات التعامل مع `sqlite3` في بايثون:"},{type:"list",text:"عادةً بنمشي على الخطوات دي:",items:['1. **الاتصال بقاعدة البيانات (Connect):** بنستخدم `sqlite3.connect("database_filename.db")` عشان نعمل اتصال. لو الملف مش موجود، SQLite هيعملهولك.',"2. **إنشاء مؤشر (Cursor):** المؤشر ده كائن بنستخدمه عشان ننفذ أوامر SQL ونلف على النتايج.","3. **تنفيذ أوامر SQL:** بنستخدم دوال المؤشر زي `cursor.execute()` أو `cursor.executemany()` عشان ننفذ أوامر SQL (زي `CREATE TABLE`, `INSERT`, `SELECT`, `UPDATE`, `DELETE`).","4. **جلب النتائج (Fetch Results) (لو بنعمل `SELECT`):** بنستخدم دوال المؤشر زي `cursor.fetchone()`, `cursor.fetchall()`, أو نلف على المؤشر نفسه.","5. **تثبيت التغييرات (Commit):** لو عملت أي تغييرات على البيانات (زي `INSERT`, `UPDATE`, `DELETE`)، لازم تعمل `connection.commit()` عشان التغييرات دي تتخزن فعلياً في ملف قاعدة البيانات.","6. **إغلاق الاتصال (Close):** مهم جداً تقفل الاتصال بـ `connection.close()` بعد ما تخلص عشان تحرر الموارد."]},{type:"code",language:"python",text:`import sqlite3

# 1. الاتصال (أو إنشاء) قاعدة بيانات
conn = sqlite3.connect("my_bod_code_app.db") # هيعمل ملف اسمه كده لو مش موجود

# 2. إنشاء مؤشر
cursor = conn.cursor()

# 3. تنفيذ أمر SQL لإنشاء جدول (لو مش موجود)
# بنستخدم """ """ عشان نكتب الأمر على كذا سطر لو طويل
cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY AUTOINCREMENT, -- مفتاح أساسي بيزيد لوحده
    name TEXT NOT NULL,                   -- نص مينفعش يكون فاضي
    email TEXT UNIQUE,                    -- نص لازم يكون فريد
    age INTEGER
)
""")
print("جدول users جاهز.")

# --- إضافة بيانات (INSERT) ---
try:
    # الطريقة الأولى: إدخال مباشر (غير آمن لو البيانات جاية من المستخدم)
    # cursor.execute("INSERT INTO users (name, email, age) VALUES ('أحمد علي', 'ahmed@example.com', 30)")
    
    # الطريقة الثانية (آمنة): استخدام placeholders (?)
    user_data1 = ("فاطمة حسن", "fatima@example.com", 25)
    cursor.execute("INSERT INTO users (name, email, age) VALUES (?, ?, ?)", user_data1)

    # لإضافة كذا مستخدم مرة واحدة (executemany)
    more_users = [
        ("خالد وليد", "khaled@example.com", 35),
        ("نور عادل", "nour@example.com", 28)
    ]
    cursor.executemany("INSERT INTO users (name, email, age) VALUES (?, ?, ?)", more_users)
    
    # 5. تثبيت التغييرات
    conn.commit() 
    print("تم إضافة المستخدمين بنجاح.")

except sqlite3.IntegrityError as e:
    print(f"خطأ في الإضافة (يمكن الإيميل مكرر): {e}")
    conn.rollback() # تراجع عن التغييرات لو حصل خطأ في الـ transaction

# --- استرجاع بيانات (SELECT) ---
print("\\nالمستخدمون المسجلون:")
cursor.execute("SELECT id, name, email, age FROM users WHERE age > ? ORDER BY name", (20,)) # هنجيب اللي سنهم أكبر من 20

# 4. جلب النتائج
# result_one = cursor.fetchone() # بيجيب صف واحد بس (أو None لو مفيش)
# print(f"أول مستخدم: {result_one}")

all_users = cursor.fetchall() # بيجيب كل الصفوف كقايمة من tuples
for user_row in all_users:
    print(f"ID: {user_row[0]}, الاسم: {user_row[1]}, الإيميل: {user_row[2]}, العمر: {user_row[3]}")

# --- تحديث بيانات (UPDATE) ---
try:
    cursor.execute("UPDATE users SET age = ? WHERE email = ?", (29, "nour@example.com"))
    conn.commit()
    print("\\nتم تحديث عمر نور.")
except Exception as e:
    print(f"خطأ في التحديث: {e}")
    conn.rollback()

# --- حذف بيانات (DELETE) ---
# try:
#     cursor.execute("DELETE FROM users WHERE email = ?", ("khaled@example.com",))
#     conn.commit()
#     print("\\nتم حذف خالد.")
# except Exception as e:
#     print(f"خطأ في الحذف: {e}")
#     conn.rollback()

# 6. إغلاق الاتصال (يفضل دائماً في بلوك finally أو باستخدام with)
if conn:
    conn.close()
    print("\\nتم إغلاق الاتصال بقاعدة البيانات.")`},{type:"paragraph",text:'**ملاحظة على الأمان:** لما تيجي تدخل بيانات جاية من المستخدم في أمر SQL، أوعى تعملها بدمج النصوص (string formatting) عشان ده بيعرضك لخطر اسمه "SQL Injection". دايماً استخدم الـ placeholders (`?`) زي ما شفنا في المثال، موديول `sqlite3` هيتعامل مع تطهير المدخلات بشكل آمن.'},{type:"paragraph",text:"**استخدام `with` مع الاتصال:** كائن الاتصال بتاع `sqlite3` ممكن يشتغل كمدير سياق. لو استخدمته مع `with`، هيعمل `commit` تلقائياً لو كل حاجة تمام، أو `rollback` لو حصل خطأ، ومش هتحتاج تقفل الاتصال بنفسك (بس ده بيكون على مستوى الـ transaction مش الاتصال الكلي)."},{type:"code",language:"python",text:`# استخدام with للـ transaction
# try:
#     with sqlite3.connect("another_app.db") as conn_with:
#         cursor_with = conn_with.cursor()
#         cursor_with.execute("CREATE TABLE IF NOT EXISTS items (name TEXT, price REAL)")
#         cursor_with.execute("INSERT INTO items VALUES ('لابتوب', 15000.0)")
#         # لو حصل خطأ هنا، هيتعمل rollback تلقائي
#         # لو مفيش أخطاء، هيتعمل commit تلقائي عند الخروج من الـ with
#     print("تم التعامل مع another_app.db باستخدام with")
# except Exception as e:
#     print(f"خطأ مع with: {e}")
# finally:
#     if 'conn_with' in locals() and conn_with: # الاتصال نفسه ممكن يفضل مفتوح لو حصل خطأ بره الـ transaction
#         conn_with.close()
# الطريقة الأشمل هي إغلاق الاتصال الرئيسي في finally دائماً.`},{type:"paragraph",text:"التعامل مع قواعد البيانات مهارة أساسية لبناء تطبيقات بتحفظ بياناتها. SQLite بداية ممتازة، ولما مشاريعك تكبر ممكن تنتقل لقواعد بيانات أقوى زي PostgreSQL أو MySQL بنفس المفاهيم الأساسية للغة SQL."}],quiz:[{id:"adv_db_1",text:"ما هو الموديول المدمج في بايثون الذي يسمح بالتعامل مع قواعد بيانات SQLite؟",options:["`mysql.connector`","`psycopg2`","`sqlite3`","`pyodbc`"],correctAnswerIndex:2,explanation:"موديول `sqlite3` هو جزء من المكتبة القياسية لبايثون."},{id:"adv_db_2",text:"ما هي لغة الاستعلام القياسية المستخدمة للتفاعل مع قواعد البيانات العلائقية مثل SQLite؟",options:["Python","Java","HTML","SQL"],correctAnswerIndex:3,explanation:"SQL (Structured Query Language) هي اللغة المستخدمة لإدارة البيانات في قواعد البيانات العلائقية."},{id:"adv_db_3",text:"أي دالة على كائن الاتصال (connection object) يجب استدعاؤها لحفظ التغييرات (مثل INSERT, UPDATE, DELETE) بشكل دائم في قاعدة البيانات؟",options:["`connection.save()`","`connection.write()`","`connection.commit()`","`connection.persist()`"],correctAnswerIndex:2,explanation:"`connection.commit()` تقوم بتثبيت التغييرات في قاعدة البيانات."},{id:"adv_db_4",text:"ما هو الغرض من استخدام علامات الاستفهام (`?`) كـ placeholders في أوامر SQL عند تنفيذها باستخدام `cursor.execute()`؟",options:["لتسريع الاستعلام","للسماح باستخدام أي نوع بيانات","لمنع هجمات SQL Injection وجعل الاستعلامات أكثر أمانًا عند استخدام مدخلات المستخدم","لإضافة تعليقات داخل أمر SQL"],correctAnswerIndex:2,explanation:"Placeholders تساعد في منع SQL Injection عن طريق تطهير المدخلات."},{id:"adv_db_5",text:'أي دالة على كائن المؤشر (cursor object) تستخدم لجلب "كل" الصفوف الناتجة عن استعلام `SELECT`؟',options:["`cursor.getone()`","`cursor.fetchrow()`","`cursor.fetchall()`","`cursor.getall()`"],correctAnswerIndex:2,explanation:"`cursor.fetchall()` تعيد قائمة بكل الصفوف المتبقية من نتيجة الاستعلام."}]},{id:"l3-lesson-8",slug:"introduction-to-testing",title:"مقدمة في اختبار البرمجيات (Testing) لضمان جودة تطبيقاتك",description:"فهم أهمية الاختبارات، وكيفية كتابة اختبارات بسيطة باستخدام وحدة `unittest` للتأكد من أن الكود يعمل كما هو متوقع.",content:[{type:"heading",text:"اطمن على شغلك: مقدمة في اختبار البرمجيات"},{type:"paragraph",text:'لما بتبني تطبيق، خصوصاً لو كبير أو معقد، إزاي تتأكد إن كل حتة فيه شغالة صح؟ وإزاي تتأكد إنك لما تعدل حاجة في مكان، مبوظتش حاجة تانية في مكان تاني من غير ما تاخد بالك؟ الإجابة هي: "الاختبارات" (Testing)!'},{type:"paragraph",text:"اختبار البرمجيات ده عملية بنعملها عشان نلاقي الأخطاء (Bugs) في البرنامج بتاعنا ونتأكد إنه بيعمل المطلوب منه بالجودة المتوقعة. كتابة الاختبارات عادة كويسة جداً بتخليك واثق أكتر في الكود بتاعك وبتسهل عملية الصيانة والتطوير على المدى الطويل."},{type:"subheading",text:"أنواع الاختبارات (بشكل مبسط):"},{type:"list",text:"",items:['**الاختبارات الوحدوية (Unit Tests):** دي اختبارات صغيرة بتركز على أصغر جزء من الكود ممكن نختبره لوحده (بنسميه "وحدة" - Unit)، زي دالة واحدة أو Method واحد في Class. هدفها نتأكد إن الوحدة دي شغالة صح بمعزل عن باقي أجزاء البرنامج.',"**الاختبارات التكاملية (Integration Tests):** دي بتختبر إزاي أكتر من وحدة أو جزء من البرنامج بيشتغلوا مع بعض. هدفها نتأكد إن الأجزاء دي بتتكامل وبتتواصل مع بعض بشكل صحيح.","**الاختبارات الوظيفية/نهاية-إلى-نهاية (Functional/End-to-End Tests):** دي بتختبر البرنامج كله من وجهة نظر المستخدم، بتشوف هل البرنامج بيأدي الوظائف المطلوبة منه بشكل كامل ولا لأ."]},{type:"paragraph",text:"في الدرس ده، هنركز على الاختبارات الوحدوية (Unit Tests) لأنها الأساس وعادةً أول نوع من الاختبارات المبرمجين بيكتبوه."},{type:"subheading",text:"موديول `unittest` في بايثون:"},{type:"paragraph",text:"بايثون بييجي معاه موديول مدمج للاختبارات الوحدوية اسمه `unittest` (مستوحى من إطار عمل xUnit المشهور). بيوفرلك الأدوات اللي محتاجها عشان تكتب وتنظم وتشغل الاختبارات بتاعتك."},{type:"subheading",text:"كتابة اختبار وحدوي بسيط:"},{type:"paragraph",text:"1. **ملف للاختبار:** عادةً بنعمل ملف منفصل للاختبارات، اسمه بيبدأ بـ `test_` (مثلاً لو عندك ملف اسمه `my_module.py`، ملف الاختبار بتاعه ممكن يكون `test_my_module.py`)."},{type:"paragraph",text:"2. **استيراد `unittest` والدالة/الكلاس المراد اختباره:**"},{type:"paragraph",text:"3. **إنشاء صنف (Class) للاختبارات:** الصنف ده لازم يرث من `unittest.TestCase`."},{type:"paragraph",text:"4. **كتابة دوال الاختبار (Test Methods):** جوه صنف الاختبار، كل دالة بتمثل حالة اختبار (test case) معينة. اسم دالة الاختبار لازم يبدأ بـ `test_`. جوه الدالة دي، بنستخدم دوال `assert` خاصة بيقدمهالنا `unittest.TestCase` عشان نتأكد من صحة النتائج."},{type:"list",text:"أشهر دوال `assert`:",items:["`assertEqual(a, b)`: بيتأكد إن `a` بتساوي `b`.","`assertNotEqual(a, b)`: بيتأكد إن `a` مش بتساوي `b`.","`assertTrue(x)`: بيتأكد إن `x` قيمتها `True`.","`assertFalse(x)`: بيتأكد إن `x` قيمتها `False`.","`assertIsNone(x)`: بيتأكد إن `x` هي `None`.","`assertIsNotNone(x)`: بيتأكد إن `x` مش `None`.","`assertIn(a, b)`: بيتأكد إن `a` موجودة جوه `b` (مثلاً `a` عنصر و `b` قايمة).","`assertRaises(exception, callable, *args, **kwargs)`: بيتأكد إن استدعاء `callable` بالـ arguments دي بيثير الاستثناء `exception`."]},{type:"paragraph",text:'5. **تشغيل الاختبارات:** بنضيف في آخر ملف الاختبار الكود `if __name__ == "__main__": unittest.main()` عشان نقدر نشغل الاختبارات دي مباشرة من الترمنال.'},{type:"paragraph",text:"مثال: عندنا دالة بسيطة عايزين نختبرها في ملف اسمه `calculator.py`:"},{type:"code",language:"python",text:`# calculator.py
def add(x, y):
    return x + y

def subtract(x, y):
    return x - y

def multiply(x,y):
    if not all(isinstance(i, (int, float)) for i in [x,y]):
        raise TypeError("Inputs must be numbers")
    return x * y`},{type:"paragraph",text:"دلوقتي نعمل ملف الاختبار `test_calculator.py` في نفس المجلد:"},{type:"code",language:"python",text:`# test_calculator.py
import unittest
from calculator import add, subtract, multiply # بنستورد الدوال اللي عايزين نختبرها

class TestCalculatorFunctions(unittest.TestCase): # لازم يرث من unittest.TestCase

    def test_add_positive_numbers(self):
        self.assertEqual(add(2, 3), 5, "الجمع المفروض يكون 5") # 2+3 المفروض يساوي 5
        self.assertEqual(add(10, 0), 10)

    def test_add_negative_numbers(self):
        self.assertEqual(add(-1, -1), -2)
        self.assertEqual(add(-5, 5), 0)

    def test_subtract(self):
        self.assertEqual(subtract(10, 5), 5)
        self.assertEqual(subtract(5, 10), -5)
    
    def test_multiply_numbers(self):
        self.assertEqual(multiply(3, 4), 12)
        self.assertEqual(multiply(-2, 5), -10)
        self.assertEqual(multiply(0, 100), 0)

    def test_multiply_raises_type_error(self):
        # نتأكد إن الدالة multiply بتعمل TypeError لو دخلنالها نص
        with self.assertRaises(TypeError):
            multiply(3, "a")
        
        with self.assertRaisesRegex(TypeError, "Inputs must be numbers"): # كمان ممكن نتأكد من رسالة الخطأ
             multiply("b", 5)


if __name__ == '__main__':
    unittest.main() # ده بيشغل مكتشف الاختبارات بتاع unittest`},{type:"paragraph",text:"لتشغيل الاختبارات، افتح الترمنال في نفس المجلد واكتب:"},{type:"code",language:"text",text:`python -m unittest test_calculator.py
# أو لو عندك أكتر من ملف اختبار ممكن تكتشفهم كلهم بـ:
# python -m unittest discover`},{type:"paragraph",text:"لو كل الاختبارات نجحت، هتشوف رسالة بتقول `OK`. لو فيه اختبار فشل، هيقولك إنه فشل وإيه السبب."},{type:"subheading",text:"لماذا نكتب الاختبارات؟"},{type:"list",text:"الفوائد كتير:",items:["**الثقة في الكود:** بتديك ثقة إن الكود بتاعك شغال صح.","**اكتشاف الأخطاء مبكراً:** بتساعدك تلاقي الأخطاء بدري في عملية التطوير، وده بيخلي إصلاحها أسهل وأرخص.","**منع التراجع (Regression Prevention):** لما تعدل في الكود، الاختبارات بتحميك من إنك تبوظ حاجة كانت شغالة صح من غير ما تاخد بالك (Regression).","**توثيق حي للكود:** الاختبارات بتوضح إزاي المفروض الكود بتاعك يشتغل وإيه النتايج المتوقعة منه.","**تسهيل إعادة الهيكلة (Refactoring):** لو حبيت تغير تصميم الكود بتاعك أو تحسنه، الاختبارات بتديك شبكة أمان تتأكد بيها إنك مغيرتش السلوك الخارجي للبرنامج."]},{type:"paragraph",text:"فيه أطر عمل (Frameworks) تانية للاختبار في بايثون زي `pytest` اللي ناس كتير بتفضلها لأنها بتقدم طريقة كتابة اختبارات أبسط وأقوى في بعض الأحيان. بس فهم `unittest` بيديك أساس كويس."},{type:"paragraph",text:"كتابة الاختبارات ممكن تبان إنها مجهود زيادة في الأول، لكن على المدى الطويل بتوفر وقت ومجهود كبير جداً وبتخلي جودة برامجك أعلى بكتير. حاول تعود نفسك تكتب اختبارات للأجزاء المهمة في تطبيقاتك!"}],quiz:[{id:"adv_test_1",text:"ما هو الغرض الرئيسي من كتابة الاختبارات الوحدوية (Unit Tests)؟",options:["لاختبار أداء البرنامج تحت ضغط عالي","لاختبار أصغر جزء من الكود (مثل دالة) بشكل منفصل للتأكد من أنه يعمل بشكل صحيح","لاختبار واجهة المستخدم الرسومية للتطبيق","لاختبار كيفية تفاعل جميع مكونات النظام معًا"],correctAnswerIndex:1,explanation:"الاختبارات الوحدوية تركز على صحة أصغر الوحدات في الكود."},{id:"adv_test_2",text:"ما هو الموديول المدمج في بايثون الذي يستخدم عادة لإنشاء الاختبارات الوحدوية؟",options:["`pytest`","`doctest`","`unittest`","`testlib`"],correctAnswerIndex:2,explanation:"موديول `unittest` هو إطار العمل المدمج للاختبارات الوحدوية في بايثون."},{id:"adv_test_3",text:"في موديول `unittest`، من أي صنف يجب أن يرث صنف الاختبارات الخاص بك؟",options:["`unittest.Test`","`unittest.Case`","`unittest.TestCase`","`unittest.TestSuite`"],correctAnswerIndex:2,explanation:"أصناف الاختبارات يجب أن ترث من `unittest.TestCase`."},{id:"adv_test_4",text:"كيف يجب أن يبدأ اسم دالة الاختبار (test method) داخل صنف يرث من `unittest.TestCase`؟",options:["بكلمة `assert_`","بكلمة `test_`","بكلمة `check_`","يمكن أن يكون أي اسم"],correctAnswerIndex:1,explanation:"أسماء دوال الاختبار يجب أن تبدأ بـ `test_` ليتم اكتشافها تلقائيًا بواسطة مشغل الاختبارات."},{id:"adv_test_5",text:"أي دالة `assert` من `unittest.TestCase` تستخدم للتحقق من أن قيمتين متساويتين؟",options:["`assertTrue(a == b)`","`assertIdentical(a, b)`","`assertEqual(a, b)`","`assertSame(a, b)`"],correctAnswerIndex:2,explanation:"`assertEqual(a, b)` تتحقق مما إذا كانت `a` و `b` متساويتين."}]},{id:"l3-lesson-9",slug:"async-programming-intro",title:"البرمجة غير المتزامنة (Asynchronous Programming) مع `asyncio` (مقدمة)",description:"مقدمة لمفهوم البرمجة غير المتزامنة وكيف يمكن لـ `asyncio` أن يساعد في بناء تطبيقات ذات أداء عالٍ، خاصة تلك التي تتعامل مع عمليات I/O كثيرة.",content:[{type:"heading",text:"الشغل على كذا حاجة في نفس الوقت (تقريباً!): مقدمة لـ `asyncio`"},{type:"paragraph",text:'تخيل إنك بتطبخ، وعندك كذا حاجة على النار: الرز بيستوي، والشوربة بتغلي، والخضار بيتشوح. لو إنت بتعمل كل حاجة "بالترتيب" (Synchronous)، هتستنى الرز يخلص خالص، بعدين تبدأ في الشوربة وتستناها تخلص، بعدين الخضار. ده هياخد وقت طويل!'},{type:"paragraph",text:'البرمجة غير المتزامنة (Asynchronous Programming) بتسمحلك تعمل حاجة مشابهة: لما يكون عندك مهمة بتاخد وقت عشان تخلص (زي إنك تستنى رد من سيرفر على النت، أو تقرا ملف كبير)، بدل ما البرنامج بتاعك يقف مستني المهمة دي تخلص، ممكن يسيبها شغالة في الخلفية ويروح يعمل حاجة تانية مفيدة، ولما المهمة الأولانية تخلص يرجع يكمل شغل عليها. ده بيخلي البرنامج بتاعك يبان كأنه بيعمل كذا حاجة في "نفس الوقت" (Concurrency) وبيحسن الأداء بشكل كبير، خصوصاً في العمليات اللي فيها انتظار كتير (I/O-bound operations).'},{type:"subheading",text:"ما هو `asyncio`؟"},{type:"paragraph",text:"`asyncio` هو موديول في بايثون (موجود في المكتبة القياسية من بايثون 3.4+) بيوفر الأدوات اللازمة لكتابة كود غير متزامن باستخدام أسلوب الدوال الفرعية غير المتزامنة (Coroutines) وحلقات الأحداث (Event Loops)."},{type:"subheading",text:"المفاهيم الأساسية في `asyncio`:"},{type:"list",text:"",items:['**الدوال الفرعية غير المتزامنة (Coroutines - `async def`):** دي دوال خاصة بنعرفها باستخدام `async def` بدل `def` العادية. لما بنستدعي دالة زي دي، مش بتشتغل علطول، لأ، بترجع كائن "coroutine object". عشان نشغلها فعلاً، لازم نستخدم معاها كلمة `await` أو نسلمها لحلقة الأحداث.','**كلمة `await`:** بنستخدمها جوه دالة `async def` عشان "نستنى" نتيجة coroutine تاني أو أي كائن "awaitable" (زي الـ Future أو Task). لما البرنامج بيوصل لـ `await`، بيوقف تنفيذ الـ coroutine الحالي مؤقتاً (من غير ما يعطل البرنامج كله) وبيسمح لحلقة الأحداث إنها تشغل حاجات تانية، لحد ما نتيجة الـ `await` تجهز، ساعتها الـ coroutine بيكمل شغله.',"**حلقة الأحداث (Event Loop):** دي قلب `asyncio`. هي المسؤولة عن إدارة وتشغيل الـ coroutines المختلفة، وتحديد مين يشتغل إمتى. بتشغل coroutine لحد ما يوصل لـ `await` أو يخلص، بعدين بتشوف لو فيه coroutines تانية جاهزة للشغل وهكذا.","**المهام (Tasks):** بنستخدمها عشان نرتب ونشغل الـ coroutines بشكل متزامن (concurrently) جوه حلقة الأحداث. ممكن نعمل Task من coroutine باستخدام `asyncio.create_task()`."]},{type:"code",language:"python",text:`import asyncio
import time

async def say_after(delay, what): # دي coroutine
    print(f"هقول '{what}' بعد {delay} ثانية (بدأنا نعد).")
    await asyncio.sleep(delay) # asyncio.sleep هي نسخة غير متزامنة من time.sleep
                               # await بتوقف say_after مؤقتاً وبتدي فرصة لحاجات تانية تشتغل
    print(what)
    return f"قلت '{what}' خلاص!"

async def main(): # الـ coroutine الرئيسي اللي هيشغل الباقي
    print(f"بدأنا البرنامج الساعة {time.strftime('%X')}")

    # الطريقة الأولى: تشغيلهم بالترتيب (واحد ورا التاني)
    # result1 = await say_after(2, "أهلاً")
    # result2 = await say_after(1, "يا عالم")
    # print(f"النتيجة 1: {result1}")
    # print(f"النتيجة 2: {result2}")

    # الطريقة الثانية: تشغيلهم بشكل "متزامن" (concurrently) باستخدام Tasks
    task1 = asyncio.create_task(say_after(2, "مرحباً"))
    task2 = asyncio.create_task(say_after(1, "بالجميع"))
    
    print("عملنا الـ Tasks، دلوقتي هنستناهم يخلصوا...")
    
    # await بتستنى الـ Task يخلص وترجع النتيجة بتاعته
    result_from_task1 = await task1 
    result_from_task2 = await task2

    print(f"نتيجة Task 1: {result_from_task1}")
    print(f"نتيجة Task 2: {result_from_task2}")

    # طريقة تانية لاستدعاء كذا coroutine مع بعض هي asyncio.gather
    # results = await asyncio.gather(
    #     say_after(3, "بايثون"),
    #     say_after(1.5, "رائعة")
    # )
    # print(f"نتائج gather: {results}")


    print(f"خلصنا البرنامج الساعة {time.strftime('%X')}")

# عشان نشغل الـ coroutine الرئيسي (main) ده، بنستخدم asyncio.run()
# (ده متاح من بايثون 3.7+، لو إصدار أقدم بتحتاج تعمل حلقة أحداث بنفسك)
if __name__ == "__main__":
    asyncio.run(main())`},{type:"paragraph",text:'لو شغلت الكود بالطريقة التانية (بتاعة الـ Tasks)، هتلاحظ إن رسالة "مرحباً بالجميع" (اللي المفروض تاخد ثانية واحدة) ممكن تظهر قبل رسالة "مرحباً" (اللي المفروض تاخد ثانيتين)، أو على الأقل الاتنين هيبدأوا العد في نفس الوقت تقريباً. ده لأن `await task1` و `await task2` هيسمحوا لحلقة الأحداث تبدل بينهم.'},{type:"subheading",text:"متى نستخدم `asyncio`؟"},{type:"paragraph",text:"`asyncio` بيكون مفيد جداً في المواقف دي:"},{type:"list",text:"",items:["**العمليات اللي فيها انتظار كتير (I/O-bound):** زي طلبات الشبكة (APIs، قواعد بيانات بعيدة)، قراءة وكتابة الملفات بشكل غير متزامن. `asyncio` بيخلي البرنامج يستغل وقت الانتظار ده في عمل حاجات تانية.","**تطبيقات الشبكات عالية الأداء:** زي بناء سيرفرات ويب أو شات بتقدر تخدم عدد كبير من العملاء في نفس الوقت.","**التعامل مع تدفقات البيانات (Streaming).**"]},{type:"paragraph",text:"`asyncio` مش مناسب أوي للعمليات اللي بتستهلك CPU بشكل كبير (CPU-bound) زي عمليات حسابية معقدة أو معالجة صور. في الحالة دي، استخدام الـ threading أو الـ multiprocessing ممكن يكون أفضل."},{type:"paragraph",text:"البرمجة غير المتزامنة مع `asyncio` ممكن تبان معقدة شوية في الأول، خصوصاً مفاهيم `async` و `await` وحلقة الأحداث. بس لما تفهمها كويس، هتلاقيها أداة قوية جداً لبناء تطبيقات سريعة ومستجيبة. مكاتب كتير في بايثون بدأت تدعم `asyncio` (زي مكتبات قواعد البيانات وطلبات HTTP)."}],quiz:[{id:"adv_async_1",text:"ما هو الغرض الرئيسي من استخدام `asyncio` في بايثون؟",options:["لتشغيل الكود بشكل أبطأ لسهولة التصحيح","لتحسين أداء العمليات كثيفة الاستخدام للمعالج (CPU-bound)","لتحسين أداء العمليات التي تتضمن انتظارًا طويلاً (I/O-bound) عن طريق السماح بتنفيذ مهام أخرى أثناء الانتظار","لاستبدال الحاجة إلى استخدام الدوال العادية"],correctAnswerIndex:2,explanation:"`asyncio` مثالي للعمليات التي تتضمن انتظارًا (مثل الشبكات والملفات) لأنه يسمح باستغلال وقت الانتظار."},{id:"adv_async_2",text:"كيف يتم تعريف دالة فرعية غير متزامنة (coroutine) في بايثون؟",options:["باستخدام `def async function_name():`","باستخدام `async def function_name():`","باستخدام `coroutine def function_name():`","باستخدام `def function_name() await:`"],correctAnswerIndex:1,explanation:"نستخدم `async def` لتعريف coroutine."},{id:"adv_async_3",text:"ماذا تفعل كلمة `await` عند استخدامها داخل coroutine؟",options:["تنهي الـ coroutine فورًا","توقف تنفيذ الـ coroutine الحالي مؤقتًا حتى يكتمل التعبير الـ awaitable الذي يليها، وتسمح لحلقة الأحداث بتشغيل مهام أخرى","تطبع قيمة التعبير الذي يليها","تتسبب في حدوث خطأ دائمًا"],correctAnswerIndex:1,explanation:"`await` تسمح بالتوقف المؤقت للـ coroutine الحالي وإعطاء التحكم لحلقة الأحداث."},{id:"adv_async_4",text:'ما هي "حلقة الأحداث" (Event Loop) في `asyncio`؟',options:["نوع خاص من حلقات `for`","الآلية المركزية التي تدير وتنفذ الـ coroutines والمهام غير المتزامنة","دالة تستخدم لإنشاء أخطاء مخصصة","مكتبة خارجية يجب تثبيتها بشكل منفصل"],correctAnswerIndex:1,explanation:"حلقة الأحداث هي المسؤولة عن جدولة وتشغيل العمليات غير المتزامنة."},{id:"adv_async_5",text:"أي دالة من `asyncio` تستخدم لتشغيل coroutine رئيسي وبدء حلقة الأحداث (في بايثون 3.7+)؟",options:["`asyncio.start()`","`asyncio.execute()`","`asyncio.run()`","`asyncio.begin_loop()`"],correctAnswerIndex:2,explanation:"`asyncio.run()` هي الطريقة الموصى بها لبدء تنفيذ coroutine رئيسي في الإصدارات الحديثة من بايثون."}]},{id:"l3-lesson-10",slug:"project-structuring-packaging",title:"هيكلة المشاريع الكبيرة وتغليف التطبيقات (Packaging)",description:"تعلم أفضل الممارسات لتنظيم ملفات ومجلدات المشاريع الكبيرة، وكيفية تحويل مشروعك إلى حزمة قابلة للتثبيت والتوزيع.",content:[{type:"heading",text:"من الفوضى للنظام: هيكلة المشاريع وتغليفها"},{type:"paragraph",text:'لما بتبدأ مشروع بايثون صغير، ممكن تحط كل الكود بتاعك في ملف واحد أو ملفين والدنيا تمشي. لكن لما المشروع بيكبر وبيبقى فيه وظايف كتير ومكونات مختلفة، الطريقة دي مش هتنفع. الكود هيبقى صعب الفهم والصيانة، وهيحصل تداخل بين الأجزاء المختلفة. هنا بتيجي أهمية "هيكلة المشروع" (Project Structuring) بشكل كويس.'},{type:"paragraph",text:'ولو عايز تشارك مشروعك ده مع ناس تانية أو تستخدمه في مشاريع تانية أو حتى تنشره عشان الناس تثبته بسهولة، هتحتاج تعمله "تغليف" (Packaging).'},{type:"subheading",text:"لماذا نهتم بهيكلة المشروع؟"},{type:"list",text:"الأسباب الرئيسية:",items:["**سهولة الفهم (Readability):** لما الملفات تكون منظمة، أي حد (حتى إنت بعد فترة) يقدر يفهم المشروع ماشي إزاي بسرعة.","**سهولة الصيانة (Maintainability):** لو فيه خطأ أو عايز تعدل حاجة، هتعرف توصل للمكان الصح بسهولة من غير ما تأثر على باقي الأجزاء.","**قابلية التوسع (Scalability):** لما المشروع يكون منظم، بيبقى أسهل تضيف وظايف جديدة أو تكبره.","**التعاون (Collaboration):** لو أكتر من مبرمج شغالين على نفس المشروع، الهيكل الواضح بيسهل شغلهم مع بعض.","**إعادة الاستخدام (Reusability):** ممكن تاخد أجزاء معينة (زي موديولات) من مشروع منظم وتستخدمها في مشاريع تانية."]},{type:"subheading",text:"هيكل مشروع بايثون بسيط ومقترح:"},{type:"paragraph",text:'مفيش طريقة واحدة "صح" ١٠٠٪ لهيكلة كل المشاريع، الموضوع بيعتمد على حجم ونوع المشروع. بس فيه هيكل عام ناس كتير بتستخدمه وبيعتبر بداية كويسة:'},{type:"code",language:"text",text:`my_project_root/
├── my_app_package_name/       # ده اسم الحزمة الرئيسية بتاعتك (اللي الناس هتستورد منها)
│   ├── __init__.py            # بيخلي المجلد ده حزمة بايثون
│   ├── main_module.py         # موديول رئيسي أو نقطة دخول لتطبيقك
│   ├── another_module.py      # موديولات تانية بتقسم فيها وظايف البرنامج
│   └── sub_package/           # ممكن يكون عندك حزم فرعية جوا الحزمة الرئيسية
│       ├── __init__.py
│       └── some_feature.py
├── tests/                     # مجلد للاختبارات
│   ├── __init__.py            # عشان tests يكون حزمة برضه (مفيد لبعض أدوات الاختبار)
│   ├── test_main_module.py
│   └── test_another_module.py
├── data/                      # (اختياري) لتخزين ملفات البيانات (زي CSV, JSON)
├── docs/                      # (اختياري) لملفات التوثيق
├── .gitignore                 # ملف لـ Git عشان يتجاهل ملفات معينة (زي .pyc أو البيئات الافتراضية)
├── README.md                  # ملف مهم بيشرح المشروع وإزاي تستخدمه وتثبته
├── requirements.txt           # قايمة بالمكتبات الخارجية اللي مشروعك بيعتمد عليها
└── setup.py                   # (أو pyproject.toml) ملف مهم جداً لعملية التغليف والتوزيع`},{type:"list",text:"شرح المكونات:",items:["`my_app_package_name/`: ده قلب التطبيق بتاعك. المفروض يكون جواه كل الكود اللي بيشغل التطبيق. اسمه بيكون الاسم اللي الناس هتكتبه لما تعمل `import your_app_package_name`.","`__init__.py`: الملف ده (حتى لو فاضي) بيقول لبايثون إن المجلد ده عبارة عن حزمة (Package). ممكن تحط فيه كود بيشتغل أول ما الحزمة بتستورد، أو تعرف فيه إيه الحاجات اللي عايزها تكون متاحة مباشرة لما حد يعمل `from my_app_package_name import ...`.","`tests/`: مجلد بتحط فيه كل ملفات الاختبارات بتاعتك. تنظيم الاختبارات بيخليها سهلة الإدارة والتشغيل.","`README.md`: ملف Markdown بيشرح المشروع، إيه فايدته، إزاي تثبته، إزاي تشغله، أي معلومات مهمة للمستخدم أو المطور التاني.","`requirements.txt`: ملف نصي بسيط بتحط فيه أسماء كل المكتبات الخارجية اللي مشروعك بيستخدمها (مع إصداراتها لو حبيت). أي حد تاني عايز يشغل مشروعك، ممكن يثبت كل المكتبات دي مرة واحدة باستخدام أمر زي `pip install -r requirements.txt`. ممكن تعمل الملف ده تلقائياً باستخدام `pip freeze > requirements.txt` (بس ده هيحط كل حاجة في بيئتك الافتراضية، فالأفضل تكتبه يدوي أو تستخدم أدوات إدارة اعتماديات).","`setup.py` (التقليدي) أو `pyproject.toml` (الأحدث): دي ملفات بتستخدمها أدوات بناء وتغليف بايثون (زي `setuptools` و `pip`) عشان يعرفوا إزاي يبنوا الحزمة بتاعتك ويوزعوها. بيكون فيها معلومات عن اسم الحزمة، الإصدار، المؤلف، الاعتماديات، ونقط الدخول (لو تطبيقك ليه أوامر بتشتغل من الترمنال)."]},{type:"subheading",text:"تغليف التطبيق (Packaging):"},{type:"paragraph",text:'بعد ما نظمت مشروعك، ممكن تكون عايز تعمله "حزمة" (Package) عشان الناس تقدر تثبتها بسهولة باستخدام `pip install your_package_name` أو عشان تقدر تستخدمها في مشاريع تانية عندك.'},{type:"paragraph",text:"العملية دي اتطورت مع الوقت في بايثون. زمان كنا بنعتمد بشكل أساسي على ملف `setup.py` مع مكتبة `setuptools`. حالياً، الاتجاه الأحدث هو استخدام ملف `pyproject.toml` اللي بيوصف إزاي المشروع بتاعك بيتبني وإيه الأدوات اللي بيستخدمها (زي `setuptools`, `poetry`, `flit`)."},{type:"paragraph",text:"خطوات التغليف الأساسية (باستخدام `setuptools` و `pyproject.toml` كمثال حديث):"},{type:"list",text:"1. **إنشاء ملف `pyproject.toml`:**",items:["ده ملف بصيغة TOML بيحدد نظام البناء (Build System) اللي هتستخدمه (عادةً `setuptools`) وبيانات المشروع (Metadata) زي اسم الحزمة، الإصدار، الوصف، المؤلف، الاعتماديات، إلخ."]},{type:"code",language:"text",text:`# مثال بسيط لمحتوى pyproject.toml

[build-system]
requires = ["setuptools>=61.0"] # بنحدد إننا محتاجين setuptools
build-backend = "setuptools.build_meta"
backend-path = ["."] # لو عندك backend مخصص

[project]
name = "my_bod_code_utility"
version = "0.1.0"
authors = [
  { name="Bod Code Team", email="team@bodcode.example.com" },
]
description = "مكتبة أدوات مساعدة رائعة من Bod Code."
readme = "README.md" # ملف الـ README بتاعك
requires-python = ">=3.8" # أقل إصدار بايثون بتدعمه
classifiers = [ # تصنيفات للمشروع بتساعد في البحث عنه على PyPI
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License", # نوع الرخصة
    "Operating System :: OS Independent",
]
dependencies = [ # الاعتماديات اللي مشروعك محتاجها
    "requests>=2.20", 
    # "another_library==1.5.0",
]

[project.urls] # روابط مفيدة
"Homepage" = "https://github.com/yourusername/my_bod_code_utility"
"Bug Tracker" = "https://github.com/yourusername/my_bod_code_utility/issues"

# لو عندك سكربتات عايزها تشتغل من الترمنال بعد التثبيت
# [project.scripts]
# my-cool-command = "my_app_package_name.main_module:main_function"`},{type:"list",text:"2. **بناء الحزمة:**",items:["بعد ما تعمل `pyproject.toml` (وممكن يكون معاك `setup.cfg` أو `setup.py` لو بتستخدم إعدادات أقدم أو أكثر تعقيدًا لـ `setuptools`)، هتحتاج أداة بناء زي موديول `build` بتاع بايثون (ممكن تثبته بـ `pip install build`).","في الترمنال، في المجلد الرئيسي لمشروعك، بتشغل الأمر: `python -m build`","ده هينشئ مجلد اسمه `dist/` جواه نوعين من الملفات:","  - **Source Distribution (sdist):** بيكون ملف مضغوط (زي `.tar.gz`) فيه الكود المصدري بتاعك وملفات الإعداد. ده بيسمح للناس تبني الحزمة على أنظمتهم.",'  - **Built Distribution (Wheel):** بيكون ملف بامتداد `.whl`. ده بيكون "متجمع" (compiled) وجاهز للتثبيت مباشرة باستخدام `pip` وبيكون أسرع في التثبيت. (الـ Wheel هو الصيغة المفضلة حالياً).']},{type:"list",text:"3. **تثبيت الحزمة محلياً (اختياري للاختبار):**",items:["ممكن تثبت ملف الـ Wheel اللي عملته عشان تجربه: `pip install dist/your_package_name-0.1.0-py3-none-any.whl`"]},{type:"list",text:"4. **نشر الحزمة على PyPI (Python Package Index) (اختياري):**",items:["لو عايز تخلي الحزمة بتاعتك متاحة للناس كلها عشان يثبتوها بـ `pip install your_package_name`، لازم ترفعها على PyPI (pypi.org).","هتحتاج تعمل حساب على PyPI (وعلى TestPyPI عشان تجرب الأول).","هتحتاج أداة زي `twine` (تثبتها بـ `pip install twine`) عشان ترفع ملفاتك اللي في `dist/` بشكل آمن.","الأوامر بتكون حاجة زي: `twine upload --repository testpypi dist/*` (لـ TestPyPI) أو `twine upload dist/*` (لـ PyPI الحقيقي)."]},{type:"paragraph",text:"هيكلة المشاريع وتغليفها مواضيع كبيرة وفيها تفاصيل كتير، بس الأساسيات دي هتساعدك تبدأ بشكل كويس. كل ما مشاريعك تكبر وتتعقد، كل ما هتحس بأهمية التنظيم ده. فيه أدوات تانية زي `Poetry` أو `PDM` بتقدم تجربة متكاملة لإدارة الاعتماديات والبيئات الافتراضية والتغليف ممكن تبص عليها لما مستواك يتقدم."}],quiz:[{id:"adv_struct_1",text:"ما هو اسم الملف الذي يجب أن يوجد داخل مجلد لكي يعتبره بايثون حزمة (Package)؟",options:["`main.py`","`__init__.py`","`package.py`","`module.py`"],correctAnswerIndex:1,explanation:"ملف `__init__.py` (حتى لو فارغ) يميز المجلد كحزمة بايثون."},{id:"adv_struct_2",text:"ما هو الغرض الرئيسي من ملف `requirements.txt` في مشروع بايثون؟",options:["لتوثيق الكود","لتحديد المكتبات الخارجية التي يعتمد عليها المشروع وإصداراتها","لتشغيل الاختبارات","لتخزين إعدادات المستخدم"],correctAnswerIndex:1,explanation:"`requirements.txt` يسرد الاعتماديات الخارجية للمشروع لتسهيل تثبيتها."},{id:"adv_struct_3",text:"في هيكل المشروع المقترح، أين يتم وضع ملفات الاختبارات عادةً؟",options:["في نفس مجلد الكود الرئيسي","في مجلد اسمه `src/`","في مجلد منفصل اسمه `tests/`","في ملف `README.md`"],correctAnswerIndex:2,explanation:"من المتعارف عليه وضع الاختبارات في مجلد منفصل مثل `tests/`."},{id:"adv_struct_4",text:"ما هو الملف الأحدث والأكثر تفضيلاً حاليًا لوصف بيانات المشروع ونظام البناء لعملية التغليف في بايثون (بدلاً من `setup.py` فقط)؟",options:["`config.xml`","`manifest.json`","`pyproject.toml`","`build.gradle`"],correctAnswerIndex:2,explanation:"`pyproject.toml` هو المعيار الحديث (PEP 517/518) لتحديد نظام البناء وبيانات المشروع."},{id:"adv_struct_5",text:"ما هو نوع ملف التوزيع (Built Distribution) المفضل في بايثون والذي يكون جاهزًا للتثبيت السريع باستخدام `pip`؟",options:["`.zip`","`.tar.gz` (sdist)","`.exe`","`.whl` (Wheel)"],correctAnswerIndex:3,explanation:"ملفات الـ Wheel (`.whl`) هي الصيغة المبنية المفضلة لأنها أسرع في التثبيت."}]},{id:"l3-lesson-11",slug:"error-logging-monitoring",title:"تسجيل الأخطاء ومراقبة أداء التطبيقات (أساسيات)",description:"مقدمة لوحدة `logging` وكيفية استخدامها لتسجيل معلومات مفيدة عن سير عمل التطبيق والأخطاء، مما يساعد في التصحيح والمراقبة.",content:[{type:"heading",text:"المخبر السري لتطبيقك: تسجيل الأخطاء والمراقبة"},{type:"paragraph",text:'لما تطبيقك بيشتغل عند المستخدمين أو على سيرفر، مش هتقدر تشوف الـ `print()` اللي كنت بتستخدمها عشان تتبع المشاكل وقت التطوير. طب لو حصل خطأ غريب، أو لو عايز تعرف إيه اللي بيحصل جوه التطبيق وهو شغال؟ هنا بيجي دور "تسجيل الأحداث" (Logging).'},{type:"paragraph",text:"الـ Logging ده عملية بنسجل فيها معلومات عن الأحداث المهمة اللي بتحصل في البرنامج بتاعنا، زي رسائل خطأ، تحذيرات، معلومات عن سير العمل، أو حتى رسائل تصحيح (debug messages). المعلومات دي ممكن تتسجل في ملف على السيرفر، أو تتبعت لنظام مركزي لتجميع الـ logs، أو حتى تظهر في الترمنال بطريقة منظمة."},{type:"subheading",text:"لماذا نستخدم Logging بدلاً من `print()`؟"},{type:"list",text:"",items:["**التحكم في مستوى التفاصيل (Log Levels):** ممكن تحدد إيه نوع الرسائل اللي عايز تسجلها (زي DEBUG, INFO, WARNING, ERROR, CRITICAL). في بيئة الإنتاج، ممكن تسجل الأخطاء والتحذيرات بس، وفي بيئة التطوير ممكن تزود التفاصيل وتسجل DEBUG و INFO.","**المرونة في وجهة التسجيل (Output Destination):** ممكن توجه الـ logs لملفات، للترمنال، لخدمات خارجية، إلخ، وكل ده من غير ما تغير الكود بتاعك كتير.","**التنسيق الموحد (Formatting):** ممكن تحدد شكل موحد لكل رسائل الـ log، زي إنها تحتوي على الوقت، اسم الموديول، مستوى الخطأ، والرسالة نفسها.","**إمكانية التعطيل/التفعيل بسهولة:** ممكن تقفل أو تفتح تسجيل أنواع معينة من الرسائل من غير ما تحتاج تمسح أو تعلق سطور `print` في كل حتة.","**معلومات سياقية أفضل:** أنظمة الـ logging بتضيف معلومات مفيدة زي اسم الملف ورقم السطر اللي حصل فيه الحدث."]},{type:"subheading",text:"موديول `logging` في بايثون:"},{type:"paragraph",text:"بايثون بييجي معاه موديول مدمج قوي جداً للـ logging اسمه `logging`. بيوفرلك كل الأدوات اللي محتاجها."},{type:"subheading",text:"المكونات الأساسية لموديول `logging`:"},{type:"list",text:"",items:["**Loggers:** دي الكائنات اللي بتستخدمها في الكود بتاعك عشان تبعت رسائل الـ log. كل logger بيكون ليه اسم (عادةً اسم الموديول اللي هو فيه، زي `logging.getLogger(__name__)`) ومستوى (level).","**Handlers:** دي اللي بتحدد إيه اللي هيحصل لرسالة الـ log بعد ما الـ logger يبعتها. مثلاً، `FileHandler` بيكتب الرسائل في ملف، و `StreamHandler` بيبعتها للترمنال (زي `sys.stdout` أو `sys.stderr`). ممكن تضيف أكتر من handler لنفس الـ logger.","**Formatters:** دي بتتحكم في شكل (تنسيق) رسالة الـ log النهائية. بتحدد إيه المعلومات اللي هتظهر (وقت، مستوى، رسالة، إلخ) وبأي ترتيب.","**Filters (أقل استخداماً للمبتدئين):** بتدي تحكم أدق في إيه الرسائل اللي هتمر من الـ logger للـ handler."]},{type:"subheading",text:"مستويات التسجيل (Log Levels):"},{type:"paragraph",text:"موديول `logging` بيعرف كذا مستوى للرسائل، مترتبين حسب الأهمية (من الأقل للأعلى):"},{type:"list",text:"",items:["`DEBUG`: معلومات تفصيلية جداً، مفيدة بس وقت تصحيح الأخطاء (Debugging).","`INFO`: رسائل بتأكد إن الحاجات ماشية زي المتوقع (معلومات عامة عن سير العمل).","`WARNING`: بتشير لحاجة غير متوقعة حصلت، أو مشكلة ممكن تحصل في المستقبل، بس البرنامج لسه شغال (زي استخدام دالة قديمة هتشال قريب). (ده المستوى الافتراضي للـ root logger).","`ERROR`: بسبب مشكلة جدية أكتر، البرنامج مقدرش يعمل جزء معين من وظيفته.","`CRITICAL`: خطأ خطير جداً، البرنامج ممكن ميقدرش يكمل شغل خالص."]},{type:"paragraph",text:'لما بتظبط مستوى الـ log لـ logger معين (أو handler)، هو هيسجل الرسائل اللي من المستوى ده "واللي أعلى منه". يعني لو ظبطت المستوى على `INFO`، هيسجل `INFO`, `WARNING`, `ERROR`, `CRITICAL`، بس مش هيسجل `DEBUG`.'},{type:"code",language:"python",text:`import logging

# --- الإعداد الأساسي جداً (بيظبط الـ root logger) ---
# لو عايز تسجل في ملف، ممكن تعمل كده:
# logging.basicConfig(filename='app.log', level=logging.DEBUG, 
#                     format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

# لو عايز تسجل في الترمنال بمستوى معين وتنسيق معين:
logging.basicConfig(level=logging.INFO, # هيسجل INFO وأعلى
                    format='%(asctime)s | %(levelname)s | %(name)s (%(lineno)d) | %(message)s',
                    datefmt='%Y-%m-%d %H:%M:%S') # شكل الوقت

# الحصول على logger خاص بموديولك الحالي (عادة كويسة)
logger = logging.getLogger(__name__) # __name__ هيكون اسم الموديول (مثلاً "__main__")

def divide_numbers(a, b):
    logger.debug(f"الدالة divide_numbers استدعيت بالقيم: a={a}, b={b}")
    try:
        result = a / b
        logger.info(f"القسمة تمت بنجاح: {a}/{b} = {result}")
        return result
    except ZeroDivisionError:
        logger.error(f"محاولة القسمة على صفر! a={a}, b={b}", exc_info=True) # exc_info=True بتضيف معلومات الـ traceback للـ log
        # ممكن كمان نعمل logger.exception("رسالة") وهي بتعمل زي error بس بتضيف الـ traceback تلقائياً لو جوه except
        return None
    except TypeError:
        logger.warning(f"أنواع بيانات غير متوافقة للقسمة: a type {type(a)}, b type {type(b)}")
        return None

# تجربة
logger.info("البرنامج بدأ.")
divide_numbers(10, 2)
divide_numbers(5, 0)
divide_numbers(10, "x")
logger.critical("ده حدث حرج جداً! (مثال بس)")
logger.info("البرنامج انتهى (أو على وشك).")`},{type:"subheading",text:"إعداد Logging أكثر تقدماً (باستخدام Handlers و Formatters):"},{type:"paragraph",text:"لو عايز تحكم كامل، ممكن تعمل logger وتضيفله handlers و formatters بنفسك:"},{type:"code",language:"python",text:`import logging

# 1. إنشاء Logger
my_app_logger = logging.getLogger('MyBodCodeApp')
my_app_logger.setLevel(logging.DEBUG) # Logger ده هيقبل كل الرسائل من DEBUG وأعلى

# 2. إنشاء Handler (مثلاً للكتابة في ملف)
file_handler = logging.FileHandler('my_app_detailed.log', mode='w', encoding='utf-8')
file_handler.setLevel(logging.WARNING) # الـ Handler ده هيسجل بس WARNING وأعلى

# 3. إنشاء Formatter
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(module)s.%(funcName)s:%(lineno)d - %(message)s')

# 4. ربط الـ Formatter بالـ Handler
file_handler.setFormatter(formatter)

# 5. ربط الـ Handler بالـ Logger
my_app_logger.addHandler(file_handler)

# ممكن نضيف handler تاني للترمنال مثلاً
stream_handler = logging.StreamHandler() # بيبعت لـ stderr افتراضياً
stream_handler.setLevel(logging.INFO)
stream_formatter = logging.Formatter('%(levelname)s: %(message)s')
stream_handler.setFormatter(stream_formatter)
my_app_logger.addHandler(stream_handler)


# استخدام الـ logger بتاعنا
my_app_logger.debug("رسالة debug مش هتظهر في الملف ولا الترمنال (حسب إعدادات الـ handlers).")
my_app_logger.info("معلومة مهمة هتظهر في الترمنال بس.")
my_app_logger.warning("تحذير! ده هيتسجل في الملف وفي الترمنال.")
my_app_logger.error("حصل خطأ، هيتسجل في الملف وفي الترمنال.")

def some_function():
    my_app_logger.info("جوه some_function")

some_function()`},{type:"paragraph",text:"الـ Logging مهارة مهمة جداً لما تطبيقاتك بتكبر أو بتشتغل في بيئة إنتاج. بيساعدك تفهم إيه اللي بيحصل وتلاقي المشاكل بسرعة. استثمر وقتك في إنك تتعلم إزاي تستخدمه صح!"}],quiz:[{id:"adv_log_1",text:"ما هو المستوى الافتراضي الذي يبدأ به الـ root logger في موديول `logging` إذا لم يتم عمل `basicConfig`؟",options:["`DEBUG`","`INFO`","`WARNING`","`ERROR`"],correctAnswerIndex:2,explanation:"المستوى الافتراضي للـ root logger هو `WARNING`."},{id:"adv_log_2",text:"أي من مستويات التسجيل التالية يعتبر الأعلى في الأهمية (الأكثر خطورة)؟",options:["`DEBUG`","`INFO`","`WARNING`","`CRITICAL`"],correctAnswerIndex:3,explanation:"`CRITICAL` هو أعلى مستوى ويشير إلى خطأ خطير جداً."},{id:"adv_log_3",text:"ما هي وظيفة الـ Handler في موديول `logging`؟",options:["لتنسيق شكل رسالة الـ log","لتحديد مستوى أهمية رسالة الـ log","لتحديد إلى أين يتم إرسال رسالة الـ log (ملف، ترمنال، إلخ)","لتصفية رسائل الـ log بناءً على محتواها"],correctAnswerIndex:2,explanation:"الـ Handler هو المسؤول عن توجيه رسائل الـ log إلى وجهتها النهائية."},{id:"adv_log_4",text:'إذا قمت بضبط مستوى الـ logger على `logging.INFO`، هل سيتم تسجيل رسالة تم إرسالها باستخدام `logger.debug("رسالة")`؟',options:["نعم، لأن DEBUG أقل أهمية من INFO","لا، لأن DEBUG أقل أهمية من INFO ولن يتم تمريرها","نعم، سيتم تسجيل كل المستويات دائمًا","يعتمد على الـ Handler المستخدم"],correctAnswerIndex:1,explanation:'الـ Logger يمرر الرسائل التي تكون من مستواه المحدد "أو أعلى". DEBUG أقل من INFO فلن يتم تمريرها.'},{id:"adv_log_5",text:"ما فائدة استخدام `exc_info=True` عند استدعاء `logger.error()` أو `logger.exception()` داخل بلوك `except`؟",options:["لجعل رسالة الخطأ باللون الأحمر","لإضافة معلومات الـ traceback (تتبع الخطأ) الكاملة إلى رسالة الـ log","لإيقاف البرنامج فورًا بعد تسجيل الخطأ","لتجاهل الخطأ وعدم تسجيله"],correctAnswerIndex:1,explanation:"`exc_info=True` (أو استخدام `logger.exception()`) يضيف معلومات تتبع الخطأ التفصيلية إلى الـ log، مما يساعد في تحديد مصدر المشكلة."}]},{id:"l3-lesson-12",slug:"gui-programming-tkinter-intro",title:"مقدمة في برمجة الواجهات الرسومية (GUI) مع Tkinter (أساسيات)",description:"نظرة أولى على كيفية بناء تطبيقات سطح مكتب بسيطة بواجهة رسومية باستخدام مكتبة `Tkinter` المدمجة في بايثون.",content:[{type:"heading",text:"خلي برنامجك ليه وش وحركات: مقدمة لواجهات GUI مع Tkinter"},{type:"paragraph",text:'لحد دلوقتي، معظم البرامج اللي عملناها كانت بتشتغل في الترمنال (Command-Line Interface - CLI). المستخدم بيدخل أوامر نصية والبرنامج بيرد بنصوص. بس كتير من التطبيقات اللي بنستخدمها كل يوم (زي المتصفح، برامج الأوفيس، الألعاب) بيكون ليها "واجهة مستخدم رسومية" (Graphical User Interface - GUI). الواجهة دي بيكون فيها زراير، قوايم، مربعات نصوص، صور، وحاجات تانية المستخدم بيقدر يتفاعل معاها بالماوس والكيبورد.'},{type:"paragraph",text:'بايثون عنده كذا مكتبة ممكن تستخدمها عشان تعمل تطبيقات GUI. واحدة من أشهرهم وأسهلهم للبداية هي `Tkinter` (بتتنطق "تي كيه إنتر"). Tkinter مدمجة مع بايثون، فمش محتاج تثبتها بشكل منفصل.'},{type:"subheading",text:"المفاهيم الأساسية في Tkinter:"},{type:"list",text:"",items:["**النافذة الرئيسية (Root Window/Master):** دي النافذة الأساسية بتاعة تطبيقك اللي كل حاجة تانية بتتحط جواها. بنعملها من كلاس `Tk()` من موديول `tkinter`.","**الأدوات (Widgets):** دي العناصر اللي بتكون الواجهة الرسومية زي الزراير (`Button`)، مربعات النصوص (`Entry` للإدخال، `Text` للعرض والتعديل)، العناوين (`Label`)، القوايم (`Menu`)، مربعات الاختيار (`Checkbutton`, `Radiobutton`)، إلخ. كل widget بيكون ليه خصائص (زي اللون، الحجم، النص اللي عليه) وأفعال ممكن تحصل عليه (زي لما المستخدم يضغط على زرار).","**التخطيط (Layout Managers):** بعد ما تعمل الـ widgets، لازم تقول لـ Tkinter يحطهم فين في النافذة. فيه كذا طريقة للتخطيط:","  - `pack()`: بيرص الـ widgets جنب بعض (فوق، تحت، يمين، شمال) وبيحاول يظبط حجم النافذة عليهم.","  - `grid()`: بيقسم النافذة لشبكة من الصفوف والأعمدة، وإنت بتحط كل widget في خلية معينة.","  - `place()`: بيسمحلك تحدد مكان وحجم الـ widget بالظبط بالإحداثيات (أقل استخداماً لأنه بيخلي الواجهة مش مرنة مع تغيير حجم النافذة).",'**حلقة الأحداث (Event Loop):** تطبيقات الـ GUI بتشتغل بـ "حلقة أحداث". النافذة بتفضل مستنية المستخدم يعمل حاجة (زي إنه يضغط على زرار أو يكتب نص). لما المستخدم بيعمل حاجة، ده بيكون "حدث" (Event). حلقة الأحداث بتمسك الحدث ده وبتشوف لو فيه كود معين المفروض يتنفذ كرد فعل للحدث ده (زي دالة مربوطة بزرار معين). بنشغل حلقة الأحداث دي باستخدام `root.mainloop()`.']},{type:"subheading",text:'مثال: تطبيق "أهلاً بالعالم" بسيط بـ Tkinter:'},{type:"code",language:"python",text:`import tkinter as tk # بنستورد الموديول وبنديله اسم مستعار tk
from tkinter import ttk # ttk فيه widgets شكلها أحدث شوية

# 1. إنشاء النافذة الرئيسية
root = tk.Tk()
root.title("تطبيق Bod Code الأول") # عنوان النافذة
root.geometry("400x200") # حجم النافذة (عرض x ارتفاع)

# 2. إنشاء الأدوات (Widgets)
# Label (عنوان نصي)
welcome_label = ttk.Label(root, text="أهلاً بك في عالم Tkinter مع Bod Code!", font=("Tajawal", 16))

# Button (زرار)
def on_button_click(): # الدالة اللي هتشتغل لما الزرار يتضغط
    print("الزرار اتضغط!")
    welcome_label.config(text="تم الضغط على الزرار بنجاح!") # نغير نص الـ label

action_button = ttk.Button(root, text="اضغط هنا", command=on_button_click) # command بيحدد الدالة اللي هتشتغل

# 3. وضع الأدوات في النافذة (Layout)
# هنستخدم pack() هنا كمثال بسيط
welcome_label.pack(pady=20) # pady بتدي مسافة رأسية حوالين الـ label
action_button.pack(pady=10)

# 4. تشغيل حلقة الأحداث
root.mainloop() # السطر ده بيخلي النافذة تظهر وتفضل شغالة ومستنية تفاعل المستخدم
               # الكود اللي بعد السطر ده مش هيشتغل إلا لما النافذة تتقفل

print("النافذة اتقفلت، البرنامج خلص.")`},{type:"subheading",text:"ربط الـ Widgets بالمتغيرات (Control Variables):"},{type:"paragraph",text:'ساعات بنكون عايزين ناخد القيمة اللي المستخدم كتبها في مربع نص `Entry`، أو نعرف إذا كان `Checkbutton` متعلم عليه ولا لأ. Tkinter بيوفر "متغيرات تحكم" (Control Variables) خاصة زي `StringVar`, `IntVar`, `BooleanVar` عشان نربطها بالـ widgets دي ونتعامل مع قيمها بسهولة.'},{type:"code",language:"python",text:`import tkinter as tk
from tkinter import ttk
from tkinter import messagebox # عشان نظهر رسايل منبثقة

def show_greeting():
    name = name_var.get() # ناخد القيمة من الـ StringVar
    if name:
        greeting_message = f"أهلاً وسهلاً، يا {name}!"
        messagebox.showinfo("ترحيب", greeting_message) # نظهر رسالة منبثقة
        # name_entry.delete(0, tk.END) # ممكن نمسح اللي في مربع النص بعد كده
    else:
        messagebox.showwarning("تنبيه", "من فضلك أدخل اسمك!")


app_window = tk.Tk()
app_window.title("برنامج ترحيب")
app_window.geometry("350x150")

# متغير تحكم من نوع String
name_var = tk.StringVar()

# Label
name_label = ttk.Label(app_window, text="أدخل اسمك:")
name_label.pack(pady=(10,0)) # مسافة فوق بس

# Entry (مربع إدخال نص) مربوط بالـ StringVar
name_entry = ttk.Entry(app_window, textvariable=name_var, width=30, font=("Tajawal", 12))
name_entry.pack(pady=5)
name_entry.focus() # نخلي التركيز على مربع النص ده أول ما البرنامج يشتغل

# Button
submit_button = ttk.Button(app_window, text="إرسال", command=show_greeting)
submit_button.pack(pady=10)

app_window.mainloop()`},{type:"paragraph",text:"Tkinter فيها widgets تانية كتير وإمكانيات أكتر (زي التعامل مع الصور، القوايم، الإطارات Frames عشان تنظم الـ widgets جوه النافذة بشكل أفضل، إلخ). دي كانت مجرد بداية بسيطة عشان تاخد فكرة."},{type:"paragraph",text:"لو عايز تعمل تطبيقات GUI معقدة أكتر أو شكلها احترافي أكتر، فيه مكتبات تانية في بايثون ممكن تبص عليها زي PyQt أو Kivy، بس Tkinter بتفضل خيار كويس للمشاريع الصغيرة أو لما تكون عايز حاجة مدمجة ومش محتاجة تثبيتات إضافية."}],quiz:[{id:"adv_gui_1",text:"ما هي المكتبة المدمجة في بايثون التي تستخدم عادة لإنشاء واجهات مستخدم رسومية (GUI) بسيطة؟",options:["`PyQt`","`Kivy`","`Tkinter`","`wxPython`"],correctAnswerIndex:2,explanation:"`Tkinter` هي مكتبة الـ GUI القياسية المدمجة مع بايثون."},{id:"adv_gui_2",text:"ما هو اسم الكائن الذي يمثل النافذة الرئيسية في تطبيق Tkinter؟",options:["`MainFrame`","`RootWindow` أو `Tk()`","`AppContainer`","`DisplaySurface`"],correctAnswerIndex:1,explanation:"عادة ما يتم إنشاء النافذة الرئيسية كـ `root = tk.Tk()`."},{id:"adv_gui_3",text:'أي من التالي "ليس" مدير تخطيط (Layout Manager) شائع في Tkinter؟',options:["`pack()`","`grid()`","`align()`","`place()`"],correctAnswerIndex:2,explanation:"`align()` ليس مدير تخطيط قياسي في Tkinter. `pack()`, `grid()`, و `place()` هم مدراء التخطيط."},{id:"adv_gui_4",text:"ما هي الدالة التي يجب استدعاؤها على النافذة الرئيسية لبدء حلقة الأحداث (Event Loop) وجعل الواجهة تفاعلية؟",options:["`root.start()`","`root.run_events()`","`root.mainloop()`","`root.listen()`"],correctAnswerIndex:2,explanation:"`root.mainloop()` تبدأ حلقة الأحداث الرئيسية لـ Tkinter."},{id:"adv_gui_5",text:"في Tkinter، إذا أردت ربط قيمة مربع إدخال نص (`Entry` widget) بمتغير في كود بايثون لتسهيل الحصول على النص وتحديثه، أي نوع من المتغيرات الخاصة بـ Tkinter ستستخدم؟",options:["`tk.TextVariable()`","`tk.StringData()`","`tk.StringVar()`","`tk.InputVar()`"],correctAnswerIndex:2,explanation:"`tk.StringVar()` (وكذلك `IntVar`, `DoubleVar`, `BooleanVar`) تستخدم كمتغيرات تحكم للـ widgets."}]}],He=[{id:"plan-intro",title:"مقدمة عن بايثون وعالم البرمجة",description:"ابدأ رحلتك بفهم أساسيات البرمجة ولماذا بايثون هي اختيار رائع.",subSteps:[{id:"plan-intro-1",title:"ما هي البرمجة؟",description:"مفهوم البرمجة وتطبيقاتها.",relatedLevelSlug:"beginner",relatedLessonSlug:"what-is-programming"},{id:"plan-intro-2",title:"لماذا نتعلم بايثون؟",description:"مميزات لغة بايثون وسهولة تعلمها.",relatedLevelSlug:"beginner",relatedLessonSlug:"introduction-to-python"}]},{id:"plan-basics",title:"أساسيات بايثون",description:"تعلم اللبنات الأساسية في بايثون: المتغيرات، أنواع البيانات، والعمليات.",subSteps:[{id:"plan-basics-1",title:"تثبيت بايثون وإعداد بيئة العمل",description:"خطوات عملية لتجهيز جهازك.",relatedLevelSlug:"beginner",relatedLessonSlug:"setting-up-python"},{id:"plan-basics-2",title:'أول برنامج لك: "أهلاً بالعالم!"',description:"كتابة وتشغيل أول كود بايثون.",relatedLevelSlug:"beginner",relatedLessonSlug:"hello-world"},{id:"plan-basics-3",title:"المتغيرات وأنواع البيانات",description:"فهم كيفية تخزين واستخدام البيانات.",relatedLevelSlug:"beginner",relatedLessonSlug:"variables-and-data-types"},{id:"plan-basics-4",title:"العمليات في بايثون",description:"إجراء العمليات الحسابية والمنطقية والمقارنات.",relatedLevelSlug:"beginner",relatedLessonSlug:"operators-in-python"}]},{id:"plan-control",title:"التحكم في سير البرنامج",description:"الشروط، الحلقات، وكيفية اتخاذ القرارات في الكود.",subSteps:[{id:"plan-control-1",title:"الجمل الشرطية (if, elif, else)",description:"جعل البرنامج يتخذ قرارات.",relatedLevelSlug:"beginner",relatedLessonSlug:"conditional-statements"},{id:"plan-control-2",title:"حلقات التكرار (for, while)",description:"تنفيذ الأوامر بشكل متكرر.",relatedLevelSlug:"beginner",relatedLessonSlug:"loops-in-python"}]},{id:"plan-functions",title:"الدوال (Functions)",description:"تنظيم الكود وإعادة استخدامه بكفاءة.",subSteps:[{id:"plan-functions-1",title:"تعريف واستدعاء الدوال",description:"إنشاء بلوكات كود قابلة لإعادة الاستخدام.",relatedLevelSlug:"beginner",relatedLessonSlug:"functions-in-python"},{id:"plan-functions-2",title:"معاملات الدوال والقيم المُرجعة",description:"تمرير البيانات للدوال والحصول على نتائج (يتم تغطيته في درس الدوال).",relatedLevelSlug:"beginner",relatedLessonSlug:"functions-in-python"}]},{id:"plan-intermediate",title:"مستوى متوسط: هياكل البيانات ومفاهيم متقدمة",description:"الغوص أعمق في مفاهيم متقدمة لتصبح مبرمج بايثون محترف.",subSteps:[{id:"plan-intermediate-1",title:"هياكل البيانات (القوائم، الصفوف، القواميس، المجموعات)",description:"طرق متقدمة لتنظيم البيانات.",relatedLevelSlug:"intermediate",relatedLessonSlug:"data-structures"},{id:"plan-intermediate-2",title:"مقدمة في البرمجة الشيئية (OOP)",description:"فهم الكائنات والأصناف.",relatedLevelSlug:"intermediate",relatedLessonSlug:"object-oriented-programming"},{id:"plan-intermediate-3",title:"فهم List Comprehensions",description:"طريقة مختصرة وفعالة لإنشاء القوائم.",relatedLevelSlug:"intermediate",relatedLessonSlug:"list-comprehensions"}]},{id:"plan-advanced-concepts",title:"مفاهيم بايثون الاحترافية وبناء التطبيقات",description:"اكتشف مفاهيم متقدمة وأدوات لبناء تطبيقات بايثون قوية ومتكاملة.",subSteps:[{id:"plan-adv-1",title:"المُزخرفات (Decorators)",description:"تغليف الدوال بوظائف إضافية بأناقة.",relatedLevelSlug:"advanced",relatedLessonSlug:"decorators"},{id:"plan-adv-2",title:"المُولدات والمُكررات (Generators & Iterators)",description:"معالجة البيانات بكفاءة في استخدام الذاكرة.",relatedLevelSlug:"advanced",relatedLessonSlug:"generators-iterators"},{id:"plan-adv-3",title:"البرمجة الشيئية المتقدمة",description:"الوراثة وتعدد الأوجه.",relatedLevelSlug:"advanced",relatedLessonSlug:"advanced-oop"},{id:"plan-adv-4",title:"مديرو السياق (Context Managers)",description:"إدارة الموارد بأمان مع جملة `with`.",relatedLevelSlug:"advanced",relatedLessonSlug:"context-managers"},{id:"plan-adv-5",title:"التعبيرات النمطية (Regex)",description:"البحث المتقدم في النصوص ومعالجتها.",relatedLevelSlug:"advanced",relatedLessonSlug:"regular-expressions"},{id:"plan-adv-6",title:"التعامل مع واجهات برمجة التطبيقات (APIs)",description:"جلب البيانات من خدمات الويب.",relatedLevelSlug:"advanced",relatedLessonSlug:"working-with-apis"},{id:"plan-adv-7",title:"أساسيات قواعد البيانات (SQLite)",description:"تخزين واسترجاع البيانات بشكل دائم.",relatedLevelSlug:"advanced",relatedLessonSlug:"basic-database-interaction"},{id:"plan-adv-8",title:"مقدمة في اختبار البرمجيات",description:"ضمان جودة تطبيقاتك بكتابة الاختبارات.",relatedLevelSlug:"advanced",relatedLessonSlug:"introduction-to-testing"},{id:"plan-adv-9",title:"البرمجة غير المتزامنة (asyncio)",description:"بناء تطبيقات عالية الأداء للعمليات التي تتضمن انتظارًا.",relatedLevelSlug:"advanced",relatedLessonSlug:"async-programming-intro"},{id:"plan-adv-10",title:"هيكلة المشاريع والتغليف",description:"تنظيم المشاريع الكبيرة وتوزيع التطبيقات.",relatedLevelSlug:"advanced",relatedLessonSlug:"project-structuring-packaging"},{id:"plan-adv-11",title:"تسجيل الأخطاء والمراقبة",description:"متابعة أداء التطبيق وتشخيص المشاكل.",relatedLevelSlug:"advanced",relatedLessonSlug:"error-logging-monitoring"},{id:"plan-adv-12",title:"مقدمة في برمجة الواجهات الرسومية (GUI)",description:"بناء تطبيقات سطح مكتب بسيطة مع Tkinter.",relatedLevelSlug:"advanced",relatedLessonSlug:"gui-programming-tkinter-intro"}]}],B=[{id:"level-1",slug:"beginner",title:"مستوى المبتدئين",description:"ابدأ رحلتك في عالم بايثون مع الأساسيات والمفاهيم الأولية.",icon:O.createElement(V,{className:"w-12 h-12 text-sky-400"}),lessons:re},{id:"level-2",slug:"intermediate",title:"مستوى متوسط",description:"تعمق أكثر في بايثون مع هياكل البيانات، البرمجة الشيئية، ومفاهيم متقدمة أخرى.",icon:O.createElement(V,{className:"w-12 h-12 text-teal-400"}),lessons:Ve},{id:"level-3",slug:"advanced",title:"المستوى المتقدم وتطبيقات عملية",description:"اكتشف مفاهيم بايثون متقدمة وتعلم كيفية بناء تطبيقات أكثر قوة وكفاءة.",icon:O.createElement(V,{className:"w-12 h-12 text-purple-400"}),lessons:Ue}];class Ge extends u.Component{constructor(){super(...arguments),this.state={hasError:!1}}static getDerivedStateFromError(r){return{hasError:!0}}componentDidCatch(r,i){console.error("Uncaught error:",r,i)}render(){return this.state.hasError?e.jsxs("div",{role:"alert",className:"flex flex-col items-center justify-center h-full p-6 sm:p-8 bg-slate-800/80 rounded-xl shadow-2xl border border-red-500/70 text-center text-gray-200 my-10",children:[e.jsx("svg",{xmlns:"http://www.w3.org/2000/svg",className:"h-16 w-16 sm:h-20 sm:w-20 text-red-400 mb-5 animate-pulse",fill:"none",viewBox:"0 0 24 24",stroke:"currentColor",strokeWidth:"1.5",children:e.jsx("path",{strokeLinecap:"round",strokeLinejoin:"round",d:"M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126zM12 15.75h.007v.008H12v-.008z"})}),e.jsx("h2",{className:"text-2xl sm:text-3xl font-bold text-red-400 mb-3",children:"عفواً، حدث خطأ ما"}),e.jsx("p",{className:"text-md sm:text-lg text-gray-300 mb-8 max-w-md leading-relaxed",children:"نواجه مشكلة في عرض هذا الجزء من التطبيق. نرجو محاولة إعادة تحميل الصفحة."}),e.jsx("button",{onClick:()=>window.location.reload(),className:"bg-sky-500 hover:bg-sky-400 text-white font-bold py-3 px-8 rounded-lg text-md transition-all duration-300 ease-in-out transform hover:scale-105 shadow-lg hover:shadow-sky-500/30 focus:outline-none focus:ring-2 focus:ring-sky-400 focus:ring-offset-2 focus:ring-offset-slate-800",children:"إعادة تحميل الصفحة"})]}):this.props.children}}const We=({onFinished:t})=>{const[i,s]=u.useState(0);return u.useEffect(()=>{const o=setTimeout(t,3e3);let n=null;const l=p=>{n||(n=p);const m=p-n,c=Math.min(m/3e3*100,100);s(c),m<3e3&&requestAnimationFrame(l)};return requestAnimationFrame(l),()=>{clearTimeout(o)}},[t]),e.jsxs("div",{className:"fixed inset-0 z-50 flex flex-col items-center justify-center bg-gradient-to-br from-slate-900 via-black to-slate-900 p-6 text-white overflow-hidden",children:[e.jsxs("div",{className:"flex flex-col items-center justify-center flex-grow",children:[e.jsx(D,{className:"w-24 h-24 sm:w-32 sm:h-32 text-sky-400 animate-pulse-scale mb-6"}),e.jsx("h1",{className:"text-4xl sm:text-5xl font-bold text-sky-300 mb-3 animate-fadeInUpSlight",children:N}),e.jsx("p",{className:"text-lg sm:text-xl text-gray-300 animate-fadeInUpSlight animation-delay-200",children:"لحظات ونبدأ رحلتنا في عالم الأكواد..."})]}),e.jsx("div",{className:"w-full max-w-md mb-8 px-4",children:e.jsx("div",{className:"h-2.5 bg-slate-700 rounded-full overflow-hidden shadow-inner",children:e.jsx("div",{className:"h-full bg-gradient-to-r from-sky-500 to-teal-400 rounded-full transition-all duration-150 ease-linear",style:{width:`${i}%`},"aria-valuenow":i,"aria-valuemin":0,"aria-valuemax":100,role:"progressbar","aria-label":"تحميل التطبيق"})})}),e.jsx("p",{className:"text-xs text-gray-500 mb-4 animate-fadeIn animation-delay-1000",children:`الإصدار ${ye}`})]})},Je=()=>{const[t,r]=u.useState(!0),[i,s]=u.useState([]);u.useEffect(()=>{s(de())},[]);const o=()=>{r(!1)},n=l=>{Ee(l),s(p=>p.includes(l)?p:[...p,l])};return t?e.jsx(We,{onFinished:o}):e.jsx(me,{children:e.jsxs("div",{className:"flex flex-col min-h-screen text-gray-100",children:[e.jsx(be,{}),e.jsx("main",{className:"flex-grow container mx-auto px-4 sm:px-6 lg:px-8 py-8 sm:py-10",children:e.jsx(Ge,{children:e.jsxs(ge,{children:[e.jsx(E,{path:d.HOME,element:e.jsx(Te,{})}),e.jsx(E,{path:d.LEARNING_PLAN,element:e.jsx(Le,{learningPlan:He,levels:B,completedLessons:i})}),e.jsx(E,{path:d.CURRICULUM,element:e.jsx(Ce,{levels:B})}),e.jsx(E,{path:d.LEVEL_DETAILS,element:e.jsx(qe,{levels:B,completedLessons:i})}),e.jsx(E,{path:d.LESSON_DETAILS,element:e.jsx(Oe,{levels:B,completedLessons:i})}),e.jsx(E,{path:d.LESSON_QUIZ,element:e.jsx(De,{levels:B,onQuizComplete:n,completedLessons:i})}),e.jsx(E,{path:d.CHAT_AI,element:e.jsx(ze,{})}),e.jsx(E,{path:d.PLAYGROUND,element:e.jsx(Be,{})}),e.jsx(E,{path:"*",element:e.jsx(F,{to:d.HOME,replace:!0})})]})})}),e.jsx(we,{})]})})},xe=document.getElementById("root");if(!xe)throw new Error("Could not find root element to mount to");const Qe=he.createRoot(xe);Qe.render(e.jsx(Je,{}));
