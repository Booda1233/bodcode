import { Lesson } from '../../types';

export const beginnerLessons: Lesson[] = [
  {
    id: 'l1-lesson-0',
    slug: 'what-is-programming',
    title: 'ما هي البرمجة؟',
    description: 'فهم ماهية البرمجة وكيف تتحدث مع الكمبيوتر.',
    content: [
      { type: 'heading', text: 'ما هي البرمجة؟ لغة التخاطب مع الكمبيوتر!' },
      { type: 'paragraph', text: 'تخيل إنك عايز تدي أوامر لجهاز الكمبيوتر عشان يعمل حاجة معينة، زي إنه يحسبلك حسبة، أو يعرضلك صورة، أو حتى يلعب معاك لعبة. الكمبيوتر مبيفهمش كلامنا العادي (زي العربي أو الإنجليزي)، لكنه بيفهم لغات تانية معمولة مخصوص عشانه اسمها "لغات البرمجة".' },
      { type: 'paragraph', text: 'البرمجة ببساطة هي عملية كتابة مجموعة من التعليمات والأوامر (بنسميها "كود") بلغة برمجة معينة، عشان الكمبيوتر ينفذها خطوة بخطوة ويأدي المهمة المطلوبة.' },
      { type: 'subheading', text: 'ليه البرمجة مهمة؟' },
      { type: 'list', text: 'البرمجة بتدخل في كل حاجة حوالينا تقريبًا:', items: [
          'المواقع اللي بتشوفها على الإنترنت (زي فيسبوك وجوجل).',
          'التطبيقات اللي على موبايلك (زي واتساب وإنستجرام).',
          'الألعاب اللي بتلعبها.',
          'البرامج اللي بتستخدمها على الكمبيوتر (زي وورد وفوتوشوب).',
          'حتى الأجهزة الذكية في بيتك (زي التلاجة الذكية أو التكييف الذكي).'
        ]
      },
      { type: 'paragraph', text: 'لما تتعلم برمجة، إنت مش بس بتتعلم تكتب أكواد، لأ، إنت بتتعلم إزاي تفكر بطريقة منطقية وتحل المشاكل خطوة بخطوة. دي مهارة مفيدة جدًا في أي مجال في حياتك.'},
      { type: 'subheading', text: 'إيه هو البرنامج (Software)?' },
      { type: 'paragraph', text: 'البرنامج هو مجموعة الأكواد والتعليمات اللي المبرمج بيكتبها عشان يخلي الكمبيوتر يعمل وظيفة معينة. يعني الكود هو الوصفة، والبرنامج هو الطبخة الجاهزة اللي الكمبيوتر بيقدمهالك.'},
      { type: 'code', language: 'text', text:'مثال بسيط جداً لفكرة أمر برمجي (ليس بلغة بايثون، مجرد توضيح):\n\nلو المستخدم ضغط "زر أحمر" اعمل "صوت إنذار"\nلو المستخدم كتب "اسمي" اطبع "أهلاً يا [اسمي]"' },
      { type: 'paragraph', text: 'في الدروس الجاية، هنبدأ نتعلم واحدة من أسهل وأقوى لغات البرمجة وهي "بايثون"، وهنشوف إزاي ندي أوامر للكمبيوتر عشان يعمل حاجات ممتعة ومفيدة!'}
    ],
    quiz: [
      { id: 'q_prog_1', text: 'ما هو التعريف الأبسط للبرمجة؟', options: ['التحدث مع الكمبيوتر بلغة البشر', 'كتابة تعليمات للكمبيوتر بلغة يفهمها لينفذ مهمة', 'تصميم شكل المواقع والتطبيقات', 'إصلاح مشاكل الكمبيوتر (الهاردوير)'], correctAnswerIndex: 1, explanation: 'البرمجة هي إعطاء أوامر للكمبيوتر عبر كود مكتوب بلغة برمجة.' },
      { id: 'q_prog_2', text: 'ما هو المصطلح الذي يطلق على التعليمات والأوامر المكتوبة بلغة برمجة؟', options: ['سوفتوير', 'هاردوير', 'كود', 'نظام تشغيل'], correctAnswerIndex: 2, explanation: 'الكود هو مجموعة الأوامر التي يكتبها المبرمج.' },
      { id: 'q_prog_3', text: 'أي من التالي يعتبر مثالاً على نتيجة للبرمجة؟', options: ['شاشة الكمبيوتر', 'تطبيق واتساب على موبايلك', 'لوحة المفاتيح (الكيبورد)', 'سلك الكهرباء للكمبيوتر'], correctAnswerIndex: 1, explanation: 'تطبيقات الموبايل هي برامج تم إنشاؤها عن طريق البرمجة.' },
      { id: 'q_prog_4', text: 'هل يفهم الكمبيوتر اللغة العربية أو الإنجليزية مباشرة؟', options: ['نعم، يفهم كل اللغات', 'لا، يفهم لغات البرمجة فقط', 'يفهم الإنجليزية فقط', 'يفهم الصينية فقط'], correctAnswerIndex: 1, explanation: 'الكمبيوتر يحتاج إلى لغات برمجة مخصصة ليفهم الأوامر.' },
      { id: 'q_prog_5', text: 'ما الفائدة الرئيسية من تعلم البرمجة إلى جانب كتابة الأكواد؟', options: ['زيادة سرعة الكتابة على الكيبورد', 'تعلم كيفية تصميم الألعاب فقط', 'تطوير مهارات التفكير المنطقي وحل المشكلات', 'القدرة على اختراق الأنظمة'], correctAnswerIndex: 2, explanation: 'البرمجة تعزز التفكير المنطقي وهي مهارة قيمة.' },
      { id: 'q_prog_6', text: 'ماذا يُطلق على المنتج النهائي الذي يتكون من مجموعة أكواد تؤدي وظيفة معينة؟', options: ['نص برمجي (Script)', 'برنامج (Software)', 'مكتبة (Library)', 'إطار عمل (Framework)'], correctAnswerIndex: 1, explanation: 'البرنامج هو التطبيق العملي للكود المكتوب.' },
      { id: 'q_prog_7', text: 'لغات البرمجة تعتبر وسيط بين من ومن؟', options: ['المبرمج والمستخدم', 'الإنسان والكمبيوتر', 'الكمبيوتر والإنترنت', 'البرامج وبعضها'], correctAnswerIndex: 1, explanation: 'لغات البرمجة تمكن الإنسان من إعطاء تعليمات للكمبيوتر.' },
      { id: 'q_prog_8', text: 'هل البرمجة مقتصرة على إنشاء تطبيقات الكمبيوتر فقط؟', options: ['نعم، هي فقط للكمبيوتر المكتبي', 'لا، تدخل في تطبيقات الويب والموبايل والأجهزة الذكية وغيرها', 'نعم، وتحديداً لإنشاء أنظمة التشغيل', 'لا، ولكنها تستخدم بشكل رئيسي في الأبحاث العلمية'], correctAnswerIndex: 1, explanation: 'البرمجة لها تطبيقات واسعة جداً في مختلف المجالات التقنية.' },
      { id: 'q_prog_9', text: 'ماذا يعني أن الكمبيوتر "ينفذ" الكود؟', options: ['يقرأ الكود بصوت عالٍ', 'يخزن الكود في الذاكرة فقط', 'يقوم بتحويل الكود إلى صور', 'يتبع التعليمات الموجودة في الكود خطوة بخطوة'], correctAnswerIndex: 3, explanation: 'تنفيذ الكود يعني أن الكمبيوتر يقوم بالمهام المحددة في التعليمات.' },
      { id: 'q_prog_10', text: 'في هذا الكورس، أي لغة برمجة سنتعلمها؟', options: ['جافاسكريبت', 'جافا', 'C++', 'بايثون'], correctAnswerIndex: 3, explanation: 'هذا الكورس مخصص لتعليم لغة بايثون.' },
    ]
  },
  {
    id: 'l1-lesson-1',
    slug: 'introduction-to-python',
    title: 'مقدمة إلى بايثون',
    description: 'ما هي لغة بايثون، تاريخها، مميزاتها، ولماذا هي مشهورة ومناسبة للمبتدئين.',
    content: [
      { type: 'heading', text: 'أهلاً بك في عالم بايثون!' },
      { type: 'paragraph', text: 'بايثون دي لغة برمجة سهلة جداً وقوية في نفس الوقت. الناس بتحبها عشان مكتوبة بطريقة قريبة من كلامنا العادي وتقدر تعمل بيها حاجات كتير. اتسمت على اسم فرقة كوميدية بريطانية اسمها "Monty Python" مش على اسم تعبان البايثون زي ما ناس كتير فاكرة!' },
      { type: 'subheading', text: 'مين اللي عمل بايثون؟ وتاريخها إيه؟' },
      { type: 'paragraph', text: 'اللي اخترع بايثون واحد هولندي اسمه "Guido van Rossum". بدأ يشتغل عليها في أواخر الثمانينات ونزل أول إصدار منها سنة 1991. جويدو كان عايز يعمل لغة برمجة تكون سهلة في القراية والكتابة، وفي نفس الوقت قوية وتقدر تعمل بيها مشاريع كبيرة.'},
      { type: 'subheading', text: 'فلسفة بايثون (The Zen of Python)' },
      { type: 'paragraph', text: 'بايثون ليها فلسفة خاصة بيها اسمها "The Zen of Python" كتبها واحد اسمه Tim Peters. دي مجموعة مبادئ بتوجه تصميم اللغة، زي مثلاً:'},
      { type: 'list', text: 'بعض مبادئ "Zen of Python":', items: [
        'الجميل أحسن من القبيح.',
        'الصريح أحسن من الضمني.',
        'البسيط أحسن من المعقد.',
        'المعقد أحسن من المعقد أوي.',
        'القراءة مهمة (Readability counts).',
        'لو التنفيذ صعب الشرح، تبقى فكرة وحشة.'
      ]},
      { type: 'paragraph', text: 'لو كتبت `import this` في مترجم بايثون، هتشوف الفلسفة دي كاملة!'},
      { type: 'subheading', text: 'ليه بايثون؟ إيه مميزاتها؟' },
      { type: 'list', text: 'مميزات بايثون الأساسية:', items: [
          'سهلة القراءة والكتابة (Readability): كأنك بتكتب إنجليزي بسيط. الأكواد بتاعتها واضحة ومش معقدة.',
          'متعددة الاستخدامات (Versatile): تقدر تعمل بيها حاجات كتير جداً زي:',
          '  - تطوير مواقع الويب (Web Development) باستخدام إطارات عمل زي Django و Flask.',
          '  - تحليل البيانات (Data Analysis) وعلم البيانات (Data Science) بمساعدة مكتبات زي Pandas و NumPy و Scikit-learn.',
          '  - الذكاء الاصطناعي (Artificial Intelligence) وتعلم الآلة (Machine Learning) بمكتبات زي TensorFlow و PyTorch.',
          '  - برمجة تطبيقات سطح المكتب (Desktop Applications).',
          '  - كتابة الإسكريبتات (Scripting) لعمل مهام متكررة بشكل تلقائي.',
          'مجتمع كبير وداعم (Large Community): لو عندك أي سؤال أو واجهتك مشكلة، هتلاقي ناس كتير أوي تساعدك على الإنترنت ومنتديات المبرمجين.',
          'مكتبات ضخمة (Extensive Libraries): بايثون معاها "Standard Library" فيها أدوات جاهزة كتير، وكمان فيه آلاف المكتبات الخارجية اللي ممكن تستخدمها عشان توفر على نفسك وقت ومجهود.',
          'لغة مُفسَّرة (Interpreted Language): الكود بيشتغل سطر بسطر، وده بيخلي عملية التجربة وتصحيح الأخطاء أسهل، خصوصاً للمبتدئين.',
          'مجانية ومفتوحة المصدر (Free and Open-Source): تقدر تستخدمها وتعدل عليها وتوزعها براحتك من غير أي تكلفة.'
        ]
      },
      { type: 'subheading', text: 'إصدارات بايثون (Python Versions)'},
      { type: 'paragraph', text: 'بايثون ليها إصدارين رئيسيين: بايثون 2 وبايثون 3. بايثون 2 مبقاش مدعوم بشكل رسمي من سنة 2020، وكل الشغل الجديد والمكتبات الحديثة بتتعمل لبايثون 3. عشان كده، إحنا في الكورس ده هنتعلم بايثون 3 لأنه هو المستقبل وهو الإصدار اللي المفروض أي حد جديد يبدأ بيه.'},
      { type: 'paragraph', text: 'في الدرس ده، عرفنا نبذة عن بايثون، تاريخها، ليه هي لغة ممتازة، وإيه مجالات استخدامها. مستعد تبدأ تكتب أكواد؟ يلا بينا!' },
      { type: 'code', language: 'python', text: '# ده مثال بسيط لكود بايثون\n# الأمر print() بيستخدم عشان نطبع حاجة على الشاشة\nprint("أهلاً ببايثون مع Bod Code!")' },
    ],
    quiz: [
      { id: 'q1-1', text: 'إيه أكتر حاجة بتميز لغة بايثون؟', options: ['صعوبتها الشديدة', 'سهولة قراءتها وكتابتها', 'محدودة الاستخدامات', 'محدش بيستخدمها'], correctAnswerIndex: 1, explanation: 'بايثون مشهورة بأنها سهلة جداً في القراءة والكتابة وده بيخليها مناسبة للمبتدئين.' },
      { id: 'q1-2', text: 'هل بايثون لغة مناسبة للمبتدئين؟', options: ['لأ، صعبة جداً', 'نعم، من أسهل اللغات للبدء', 'ممكن، بس محتاجة خبرة سابقة', 'بايثون مش للمبتدئين خالص'], correctAnswerIndex: 1, explanation: 'طبعاً! بايثون تعتبر من أفضل اللغات اللي ممكن تبدأ بيها مشوار البرمجة.' },
      { id: 'q1-3', text: 'أمر الطباعة في بايثون هو:', options: ['echo', 'display', 'print', 'show'], correctAnswerIndex: 2, explanation: 'بنستخدم `print()` عشان نعرض أي حاجة على الشاشة.' },
      { id: 'q1-4', text: 'مين اللي اخترع لغة بايثون؟', options: ['بيل جيتس', 'ستيف جوبز', 'جويدو فان روسوم', 'مارك زوكربيرج'], correctAnswerIndex: 2, explanation: 'Guido van Rossum هو مبتكر لغة بايثون.' },
      { id: 'q1-5', text: 'بايثون تُعتبر لغة:', options: ['مُجمَّعة (Compiled)', 'مُفسَّرة (Interpreted)', 'خاصة بتطوير الألعاب فقط', 'مستخدمة في تصميم الجرافيكس فقط'], correctAnswerIndex: 1, explanation: 'بايثون لغة مفسرة، يعني الكود بيتنفذ سطر بسطر وده بيسهل اكتشاف الأخطاء.' },
      { id: 'q1-6', text: 'أي من المجالات التالية لا تُستخدم فيها بايثون بشكل شائع؟', options: ['تطوير الويب', 'تحليل البيانات', 'برمجة أنظمة التشغيل منخفضة المستوى (Low-level OS programming)', 'الذكاء الاصطناعي'], correctAnswerIndex: 2, explanation: 'بينما يمكن استخدام بايثون في مهام نظام معينة، لغات مثل C أو C++ أكثر شيوعًا لبرمجة أنظمة التشغيل منخفضة المستوى.' },
      { id: 'q1-7', text: 'ما هو الإصدار الحالي من بايثون الذي يُنصح بتعلمه واستخدامه؟', options: ['بايثون 1', 'بايثون 2', 'بايثون 3', 'كلهم زي بعض'], correctAnswerIndex: 2, explanation: 'بايثون 3 هو الإصدار الأحدث والمدعوم حاليًا، ويجب على المتعلمين الجدد البدء به.' },
      { id: 'q1-8', text: 'مبدأ "Readability counts" من فلسفة بايثون، ماذا يعني؟', options: ['أن الكود لازم يكون قصير جداً', 'أن الكود لازم يكون سهل القراءة والفهم', 'أن الكاونترات في الكود مهمة', 'أن سرعة الكتابة هي الأهم'], correctAnswerIndex: 1, explanation: 'سهولة قراءة الكود وفهمه هي من أهم مبادئ بايثون.' },
      { id: 'q1-9', text: 'ماذا يعني أن بايثون "مفتوحة المصدر"؟', options: ['أن مصدرها الوحيد هو الإنترنت', 'أن الكود المصدري لها متاح للجميع ويمكن تعديله واستخدامه بحرية', 'أن لها باب واحد فقط للدخول', 'أنها تعمل على نظام تشغيل واحد فقط'], correctAnswerIndex: 1, explanation: 'مفتوحة المصدر تعني أن الكود الأساسي للغة متاح للجميع ويمكنهم المساهمة فيه أو استخدامه بحرية.' },
      { id: 'q1-10', text: 'لماذا سميت لغة بايثون بهذا الاسم؟', options: ['على اسم نوع من الثعابين', 'على اسم فرقة كوميدية', 'اسم مركب من أسماء مؤسسيها', 'كلمة ليس لها معنى محدد'], correctAnswerIndex: 1, explanation: 'سميت بايثون تيمناً بالفرقة الكوميدية البريطانية "Monty Python\'s Flying Circus".' }
    ]
  },
  {
    id: 'l1-lesson-2',
    slug: 'setting-up-python',
    title: 'تثبيت بايثون وبيئة العمل',
    description: 'خطوات تجهيز جهازك لبدء البرمجة ببايثون، والتعرف على بيئة التطوير.',
    content: [
       { type: 'heading', text: 'تجهيز معمل الأكواد بتاعك!' },
       { type: 'paragraph', text: 'قبل ما نبدأ نكتب أكواد بايثون، لازم نتأكد إن بايثون متثبتة على جهازك وإن عندك مكان تكتب فيه الأكواد دي وتشوف نتيجتها. الموضوع أبسط مما تتخيل!' },
       { type: 'subheading', text: '1. تثبيت بايثون (Installing Python):' },
       { type: 'paragraph', text: 'أول خطوة هي إنك تحمل بايثون نفسها. روح على الموقع الرسمي لبايثون: `python.org`. هتلاقي قسم للتحميلات (Downloads). الموقع عادة بيعرف نظام التشغيل بتاعك (ويندوز، ماك، أو لينكس) وبيقترحلك النسخة المناسبة. حمل أحدث نسخة مستقرة من بايثون 3 (مثلاً Python 3.10 أو أحدث).'},
       { type: 'list', text: 'تعليمات خاصة بأنظمة التشغيل:', items: [
           '**ويندوز (Windows):** أثناء التثبيت، هتظهرلك شاشة فيها خيارات. مهم جداً إنك تعلم على مربع مكتوب جنبه حاجة زي "Add Python to PATH" أو "Add Python 3.x to PATH". دي خطوة بتسهل عليك تشغيل بايثون من أي مكان في الكمبيوتر.',
           '**ماك (macOS):** ماك بييجي معاه نسخة قديمة من بايثون (بايثون 2). الأفضل إنك تثبت بايثون 3 من الموقع الرسمي. ممكن تستخدم مدير حزم زي Homebrew لو بتعرفله، وتكتب أمر زي `brew install python3`.',
           '**لينكس (Linux):** معظم توزيعات لينكس بييجي معاها بايثون 3 متثبت. ممكن تتأكد من خلال الترمنال (Terminal) بكتابة `python3 --version`. لو مش متثبتة أو عايز نسخة أحدث، ممكن تستخدم مدير الحزم بتاع توزيعتك (زي `apt` في أوبونتو/ديبيان: `sudo apt install python3`).'
       ]},
       { type: 'subheading', text: '2. التأكد من التثبيت:' },
       { type: 'paragraph', text: 'بعد ما التثبيت يخلص، افتح الـ Command Prompt (في ويندوز) أو الـ Terminal (في ماك ولينكس). اكتب الأمر ده ودوس Enter:'},
       { type: 'code', language: 'text', text: 'python --version\n# أو لو الأمر اللي فوق مرجعش نتيجة، جرب ده:\npython3 --version' },
       { type: 'paragraph', text: 'لو ظهرلك رقم الإصدار (مثلاً `Python 3.10.4`) يبقى بايثون اتثبتت تمام! لو ظهر خطأ، يبقى فيه مشكلة في التثبيت أو في خطوة "Add to PATH".'},
       { type: 'subheading', text: '3. بايثون REPL (Read-Eval-Print Loop):' },
       { type: 'paragraph', text: 'بايثون بييجي معاها أداة بسيطة اسمها REPL. دي بيئة تفاعلية ممكن تكتب فيها أوامر بايثون وتشوف نتيجتها فوراً. عشان تفتحها، اكتب `python` أو `python3` في الترمنال ودوس Enter. هتلاقي شكل البرومبت اتغير لـ `>>>`. جرب تكتب `print("Hello!")` ودوس Enter.'},
       { type: 'code', language: 'python', text: '>>> print("Bod Code شغال!")\nBod Code شغال!\n>>> 2 + 3\n5' },
       { type: 'paragraph', text: 'للخروج من الـ REPL، اكتب `exit()` أو اضغط `Ctrl+Z` ثم Enter في ويندوز، أو `Ctrl+D` في ماك/لينكس.'},
       { type: 'subheading', text: '4. اختيار محرر الأكواد (Code Editor) أو IDE:' },
       { type: 'paragraph', text: 'الـ REPL كويس للتجارب السريعة، لكن عشان تكتب برامج كاملة هتحتاج برنامج متخصص اسمه "محرر أكواد" أو "بيئة تطوير متكاملة" (IDE). دي برامج بتساعدك تكتب وتنظم وتدير مشاريع البرمجة بتاعتك، وفيها مميزات كتير زي تلوين الأكواد، الإكمال التلقائي، وتصحيح الأخطاء.'},
       { type: 'list', text: 'أشهر الخيارات المجانية والممتازة:', items: [
          '**Visual Studio Code (VS Code):** محرر أكواد قوي جداً ومشهور، من تطوير مايكروسوفت. خفيف وبيدعم لغات كتير، وفيه آلاف الإضافات (Extensions) اللي ممكن تزودها عشان تسهل شغلك مع بايثون (زي إضافة Python الرسمية من مايكروسوفت). **(موصى به بشدة لهذا الكورس)**',
          '**PyCharm Community Edition:** بيئة تطوير متكاملة (IDE) معمولة مخصوص لبايثون بواسطة شركة JetBrains. قوية جداً وفيها مميزات كتير متقدمة. النسخة الـ Community مجانية.',
          '**Sublime Text:** محرر أكواد خفيف وسريع ومرن. ممكن تخصصه زي ما تحب.',
          '**Thonny:** بيئة تطوير بسيطة جداً معمولة للمبتدئين في بايثون. بتيجي معاها بايثون متثبتة جواها أحياناً.',
        ]
      },
      { type: 'paragraph', text: 'نصيحة: ابدأ بـ VS Code. سهل في البداية وقوي كفاية لما مستواك يتقدم.'},
      { type: 'subheading', text: '5. البيئات الافتراضية (Virtual Environments) - فكرة للمستقبل القريب:'},
      { type: 'paragraph', text: 'لما تبدأ تشتغل على مشاريع بايثون مختلفة، كل مشروع ممكن يحتاج مكتبات (packages) بإصدارات معينة. عشان تتجنب التعارض بين إصدارات المكتبات دي، بنستخدم حاجة اسمها "بيئات افتراضية". البيئة الافتراضية بتعمل مجلد معزول لكل مشروع، بتحط فيه نسخة بايثون خاصة بيه والمكتبات اللي المشروع ده بس محتاجها. أشهر أداة لعمل كده هي `venv` اللي بتيجي مع بايثون. مش لازم تقلق بيها أوي في البداية، بس اعرف إنها موجودة ومهمة للمشاريع الأكبر.'},
      { type: 'paragraph', text: 'كده جهازك بقى جاهز لاستقبال أول أوامر بايثون منك! في الدرس الجاي، هنكتب أول برنامج لينا.'},
    ],
    quiz: [
      { id: 'q2-1', text: 'منين أقدر أحمل بايثون؟', options: ['من أي موقع تحميل برامج', 'من الموقع الرسمي python.org', 'بايثون مش محتاجة تحميل', 'بتيجي مع الويندوز فقط'], correctAnswerIndex: 1, explanation: 'يجب دائماً تحميل بايثون من موقعها الرسمي لضمان الحصول على نسخة آمنة وحديثة.' },
      { id: 'q2-2', text: 'VS Code يعتبر إيه؟', options: ['لغة برمجة', 'نظام تشغيل', 'محرر أكواد (أو IDE مصغر)', 'متصفح إنترنت'], correctAnswerIndex: 2, explanation: 'VS Code هو محرر أكواد شهير جداً ومرن، يمكن اعتباره بيئة تطوير مصغرة مع الإضافات المناسبة.' },
      { id: 'q2-3', text: 'إيه أهمية خيار "Add Python to PATH" أثناء التثبيت على ويندوز؟', options: ['بيخلي بايثون أسرع', 'بيسمح بتشغيل بايثون من أي مكان في الـ Command Prompt', 'بيثبت مكتبات إضافية', 'ملوش لازمة'], correctAnswerIndex: 1, explanation: 'إضافة بايثون إلى PATH يسهل الوصول إلى مفسر بايثون من أي مجلد عبر سطر الأوامر.' },
      { id: 'q2-4', text: 'إيه الأمر اللي ممكن أكتبه في الترمنال عشان أتأكد إن بايثون اتثبتت صح وأعرف إصدارها؟', options: ['python status', 'python --version أو python3 --version', 'check python', 'python install check'], correctAnswerIndex: 1, explanation: 'الأمر `python --version` أو `python3 --version` يعرض رقم إصدار بايثون المثبت.' },
      { id: 'q2-5', text: 'ما هي الـ REPL في بايثون؟', options: ['نوع من أنواع الأفاعي', 'محرر أكواد متقدم', 'بيئة تفاعلية لتنفيذ أوامر بايثون مباشرة', 'مكتبة لإنشاء الرسوميات'], correctAnswerIndex: 2, explanation: 'REPL (Read-Eval-Print Loop) هي واجهة تفاعلية تسمح بكتابة وتنفيذ كود بايثون سطراً بسطر ورؤية الناتج فوراً.' },
      { id: 'q2-6', text: 'أشهر محرر أكواد يُنصح به للمبتدئين في هذا الكورس هو:', options: ['Notepad++', 'PyCharm Professional', 'Visual Studio Code (VS Code)', 'Eclipse'], correctAnswerIndex: 2, explanation: 'VS Code خيار ممتاز لأنه يجمع بين البساطة والقوة وهو مجاني ويدعم بايثون بشكل رائع.' },
      { id: 'q2-7', text: 'ما الفائدة الأساسية من استخدام البيئات الافتراضية (Virtual Environments) في بايثون؟', options: ['تسريع تنفيذ الكود', 'تقليل حجم ملفات بايثون', 'عزل متطلبات (مكتبات) كل مشروع عن الآخر لتجنب التعارض', 'تشفير الكود لحمايته'], correctAnswerIndex: 2, explanation: 'البيئات الافتراضية تساعد في إدارة الاعتماديات الخاصة بكل مشروع بشكل منفصل.' },
      { id: 'q2-8', text: 'إذا كنت تستخدم نظام macOS، أي نسخة من بايثون تكون مثبتة مسبقًا عادةً (ولكن يُنصح بتثبيت الأحدث)؟', options: ['لا يوجد بايثون مثبت', 'بايثون 3.9 أو أحدث', 'بايثون 2', 'بايثون موبايل'], correctAnswerIndex: 2, explanation: 'macOS يأتي غالبًا مع بايثون 2، لكن يجب تثبيت بايثون 3 للعمل الحديث.' },
      { id: 'q2-9', text: 'في نظام لينكس (مثل أوبونتو)، كيف يمكنك تثبيت بايثون 3 إذا لم تكن مثبتة؟', options: ['عن طريق تحميل ملف EXE', 'باستخدام أمر مثل `sudo apt install python3`', 'لا يمكن تثبيتها على لينكس', 'عن طريق متجر تطبيقات مايكروسوفت'], correctAnswerIndex: 1, explanation: 'في توزيعات ديبيان/أوبونتو، يُستخدم `apt` لتثبيت البرامج، بما في ذلك بايثون 3.' },
      { id: 'q2-10', text: 'ما هو الأمر الذي ينهي جلسة الـ REPL في بايثون؟', options: ['`end`', '`quit`', '`exit()` أو Ctrl+D/Ctrl+Z', '`close_session`'], correctAnswerIndex: 2, explanation: 'يمكن استخدام `exit()` أو اختصارات لوحة المفاتيح لإنهاء الـ REPL.' }
    ]
  },
  {
    id: 'l1-lesson-4', // Original l1-lesson-4 was hello-world
    slug: 'hello-world',
    title: 'أول برنامج لك: أهلاً بالعالم!',
    description: 'كتابة وتشغيل أول كود بايثون بسيط، وفهم أمر الطباعة والتعليقات.',
    content: [
        { type: 'heading', text: 'برنامجك الأول: "أهلاً بالعالم!"' },
        { type: 'paragraph', text: 'في عالم البرمجة، عادةً أول برنامج بنكتبه في أي لغة جديدة بيكون برنامج بسيط جداً بيطبع جملة "أهلاً بالعالم!" (أو "Hello, World!"). الهدف منه إننا نتأكد إن كل حاجة في بيئة العمل بتاعتنا شغالة تمام، وإننا قادرين نكتب كود ونشغله ونشوف نتيجته. دي تعتبر زي "السلام عليكم" بتاعتك للغة البرمجة الجديدة!' },
        { type: 'subheading', text: 'كتابة الكود:' },
        { type: 'paragraph', text: 'افتح محرر الأكواد بتاعك (زي VS Code). اعمل ملف جديد وسميه أي اسم بامتداد `.py` (مثلاً `hello.py`). امتداد `.py` ده بيقول للكمبيوتر إن الملف ده فيه كود بايثون.'},
        { type: 'paragraph', text: 'جوه الملف ده، اكتب السطر التالي:' },
        { type: 'code', language: 'python', text: 'print("أهلاً بالعالم مع Bod Code!")' },
        { type: 'subheading', text: 'شرح الكود:' },
        { type: 'list', text: '', items: [
            '`print()`: ده اسم "دالة" (Function) جاهزة في بايثون. وظيفتها إنها تطبع أو تعرض أي حاجة بتديها لها على الشاشة (الترمنال أو نافذة الخرج).',
            '`("أهلاً بالعالم مع Bod Code!")`: الكلام اللي بين القوسين `()` ده هو الحاجة اللي إنت عايز تطبعها. ولإنها نص (كلام)، لازم نحطها بين علامتين تنصيص مزدوجتين `""` أو مفردتين `\'\'`. دي بنسميها "سلسلة نصية" أو String.'
        ]},
        { type: 'subheading', text: 'تشغيل الكود:' },
        { type: 'paragraph', text: 'عشان تشغل الكود ده، افتح الترمنال (Terminal) أو الـ Command Prompt. روح للمكان (المجلد/Folder) اللي حفظت فيه ملف `hello.py`. بعدين اكتب الأمر التالي ودوس Enter:'},
        { type: 'code', language: 'text', text: 'python hello.py\n# أو لو الأمر اللي فوق مرجعش نتيجة، جرب ده:\npython3 hello.py' },
        { type: 'paragraph', text: 'لو كل حاجة تمام، المفروض تشوف جملة "أهلاً بالعالم مع Bod Code!" مطبوعة قدامك في الترمنال. مبروك! إنت كده كتبت وشغلت أول برنامج بايثون ليك!'},
        { type: 'subheading', text: 'التعليقات (Comments) في بايثون:'},
        { type: 'paragraph', text: 'ساعات بنحتاج نكتب ملاحظات جوه الكود بتاعنا عشان نفسر حاجة معينة أو نفتكر ليه كتبنا جزء معين بالطريقة دي. الملاحظات دي بنسميها "تعليقات". مفسر بايثون بيتجاهل التعليقات دي تماماً ومش بينفذها، هي بس لينا إحنا كبشر عشان نفهم الكود أحسن.'},
        { type: 'paragraph', text: 'في بايثون، أي سطر بيبدأ بعلامة الهاش `#` بيعتبر تعليق:'},
        { type: 'code', language: 'python', text: '# السطر ده كله تعليق، بايثون هيتجاهله\n\nprint("ده هيتطبع عادي") # ممكن كمان التعليق ييجي في آخر السطر كده\n\n# فايدة التعليقات:\n# - شرح الأجزاء الصعبة في الكود.\n# - تذكير نفسك بحاجة معينة.\n# - تعطيل جزء من الكود مؤقتاً من غير ما تمسحه.' },
        { type: 'subheading', text: 'تجربة أمر الطباعة أكتر:'},
        { type: 'paragraph', text: 'دالة `print()` مرنة جداً. ممكن تطبع بيها أكتر من حاجة في نفس السطر، وممكن تتحكم في الفاصل بينهم وفي نهاية السطر:'},
        { type: 'code', language: 'python', text: 'print("اسمي", "محمد", "عمري", 30) # هيطبعهم جنب بعض بمسافة بينهم\n# الناتج: اسمي محمد عمري 30\n\nprint("بايثون", "سهلة", "جداً", sep="---") # sep بتحدد الفاصل\n# الناتج: بايثون---سهلة---جداً\n\nprint("أول سطر", end=" ") # end بتحدد إيه اللي يتطبع في الآخر (العادي بيكون سطر جديد)\nprint("ده تاني سطر بس على نفس الخط")\n# الناتج: أول سطر ده تاني سطر بس على نفس الخط' },
        { type: 'paragraph', text: 'جرب بنفسك! كل ما تجرب أكتر كل ما هتفهم أكتر.'}
    ],
    quiz: [
        { id: 'q_hw_1', text: 'ما هو الأمر المستخدم لطباعة نص على الشاشة في بايثون؟', options: ['display()', 'echo()', 'print()', 'show()'], correctAnswerIndex: 2, explanation: 'الدالة `print()` هي المستخدمة للطباعة في بايثون.' },
        { id: 'q_hw_2', text: 'كيف تبدأ التعليقات المكونة من سطر واحد في بايثون؟', options: ['// تعليق', '/* تعليق */', '# تعليق', '-- تعليق'], correctAnswerIndex: 2, explanation: 'التعليقات في بايثون تبدأ بعلامة `#`.' },
        { id: 'q_hw_3', text: 'ما هو امتداد الملفات التي تحتوي على كود بايثون عادةً؟', options: ['.txt', '.exe', '.py', '.python'], correctAnswerIndex: 2, explanation: 'ملفات كود بايثون تنتهي عادةً بامتداد `.py`.' },
        { id: 'q_hw_4', text: 'لتشغيل ملف بايثون اسمه `my_script.py` من الترمنال، أي أمر تستخدم غالبًا؟', options: ['run my_script.py', 'execute my_script.py', 'python my_script.py', 'start my_script.py'], correctAnswerIndex: 2, explanation: 'الأمر `python` متبوعًا باسم الملف يستخدم لتشغيل سكربتات بايثون.' },
        { id: 'q_hw_5', text: 'إذا كتبت `print("مرحباً", "يا", "عالم", sep="-")`، ماذا سيكون الناتج؟', options: ['مرحباً يا عالم', 'مرحباً-يا-عالم', 'مرحباً يا عالم-', 'خطأ في الكود'], correctAnswerIndex: 1, explanation: 'المعامل `sep` يحدد السلسلة النصية التي تفصل بين العناصر المطبوعة.' },
        { id: 'q_hw_6', text: 'ماذا تفعل `end=" "` في دالة `print()` مثل `print("نص", end=" ")`؟', options: ['تضيف مسافة في بداية النص', 'تنهي السطر بمسافة بدلاً من الانتقال لسطر جديد', 'تتسبب في خطأ', 'لا تفعل شيئًا'], correctAnswerIndex: 1, explanation: 'المعامل `end` يحدد ما سيتم طباعته في نهاية استدعاء `print()`، والقيمة الافتراضية هي الانتقال لسطر جديد (`\\n`).' },
        { id: 'q_hw_7', text: 'هل يتم تنفيذ التعليقات بواسطة مفسر بايثون؟', options: ['نعم، يتم تنفيذها كأي كود آخر', 'لا، يتم تجاهلها تمامًا', 'يتم تنفيذها فقط إذا كانت بلغة معينة', 'أحيانًا يتم تنفيذها وأحيانًا لا'], correctAnswerIndex: 1, explanation: 'التعليقات هي للمبرمجين فقط ولا تؤثر على تنفيذ البرنامج.' },
        { id: 'q_hw_8', text: 'أي من التالي يعتبر استخدامًا صحيحًا لدالة `print()` لطباعة رقم؟', options: ['print(123)', 'print("123")', 'كلاهما صحيح', 'لا شيء مما سبق'], correctAnswerIndex: 2, explanation: 'يمكن طباعة الأرقام مباشرة، أو طباعتها كسلاسل نصية إذا كانت محاطة بعلامات تنصيص. النتيجة المرئية قد تكون متشابهة ولكن النوع مختلف.' },
        { id: 'q_hw_9', text: 'ما الغرض الرئيسي من برنامج "أهلاً بالعالم!"؟', options: ['تعليم كيفية عمل عمليات حسابية معقدة', 'التأكد من أن بيئة التطوير تعمل بشكل صحيح', 'إنشاء لعبة متكاملة', 'الاتصال بقاعدة بيانات'], correctAnswerIndex: 1, explanation: 'برنامج "أهلاً بالعالم!" هو اختبار أساسي للتأكد من أنك تستطيع كتابة وتشغيل الكود.' },
        { id: 'q_hw_10', text: 'لو كتبت كود بايثون في ملف نصي عادي بامتداد `.txt`، هل سيعمل بشكل صحيح عند محاولة تشغيله بـ `python file.txt`؟', options: ['نعم، الامتداد لا يهم', 'لا، يجب أن يكون الامتداد `.py` ليتعرف عليه مفسر بايثون كملف بايثون', 'سيعمل ولكن ببطء', 'سيعمل فقط إذا كان الكود سطرًا واحدًا'], correctAnswerIndex: 1, explanation: 'على الرغم من أن المفسر قد يحاول قراءته، إلا أن الامتداد المتعارف عليه والموصى به هو `.py`.' }
    ]
  },
  {
    id: 'l1-lesson-3',
    slug: 'variables-and-data-types',
    title: 'المتغيرات وأنواع البيانات',
    description: 'فهم كيفية تخزين واستخدام البيانات في بايثون، وأنواع البيانات المختلفة.',
    content: [
      { type: 'heading', text: 'صناديق المعلومات: المتغيرات (Variables)!' },
      { type: 'paragraph', text: 'تخيل إنك بتطبخ وعايز تشيل شوية سكر أو دقيق عشان تستخدمهم بعدين. بتحطهم في علبة وتكتب عليها اسمها، صح؟ المتغيرات في البرمجة نفس الفكرة بالظبط! هي عبارة عن "أماكن" أو "صناديق" بنحجزها في ذاكرة الكمبيوتر عشان نخزن فيها قيم (بيانات) معينة، وبندي لكل صندوق اسم عشان نعرف نوصله ونستخدم القيمة اللي جواه بعد كده.' },
      { type: 'paragraph', text: 'في بايثون، عشان تعمل متغير، بتكتب اسمه وبعدين علامة يساوي `=` وبعدين القيمة اللي عايز تخزنها جواه. عملية دي بنسميها "إسناد قيمة لمتغير" (Assignment).'},
      { type: 'code', language: 'python', text: '# هنا بنعمل متغير اسمه "name" وبنخزن جواه النص "أحمد"\nname = "أحمد"\n\n# متغير اسمه "age" بنخزن جواه الرقم 25\nage = 25\n\n# متغير اسمه "height" بنخزن جواه الرقم العشري 175.5\nheight = 175.5\n\n# متغير اسمه "is_student" بنخزن جواه قيمة منطقية (صح/غلط)\nis_student = True' },
      { type: 'paragraph', text: 'بعد ما عملنا المتغيرات دي، نقدر نستخدمها في أي مكان في الكود. مثلاً، ممكن نطبع قيمتها:' },
      { type: 'code', language: 'python', text: 'print(name)  # هيطبع: أحمد\nprint(age)   # هيطبع: 25' },
      { type: 'subheading', text: 'قواعد تسمية المتغيرات:' },
      { type: 'list', text: 'عشان الأسماء متتلخبطش، فيه شوية قواعد لازم نتبعها واحنا بنسمي المتغيرات:', items: [
          'اسم المتغير ممكن يحتوي على حروف (إنجليزي طبعاً `a-z`, `A-Z`) وأرقام (`0-9`) وعلامة الشرطة السفلية (`_`).',
          'مينفعش اسم المتغير يبدأ برقم.',
          'الأسماء حساسة لحالة الحرف (Case-sensitive). يعني متغير اسمه `myVar` مختلف عن `myvar` ومختلف عن `MYVAR`.',
          'مينفعش تستخدم "الكلمات المحجوزة" (Keywords) في بايثون كأسماء للمتغيرات. دي كلمات ليها معنى خاص في اللغة زي `print`, `if`, `else`, `for`, `while` وغيرها. (هنتعرف عليهم بالتفصيل بعدين).',
          'من الأفضل (وده المتعارف عليه أو Convention) إن أسماء المتغيرات تكون معبرة عن الحاجة اللي بتخزنها جواها (مثلاً `user_name` أحسن من `x`). ولو الاسم مكون من كذا كلمة، بنفصل بينهم بشرطة سفلية (دي طريقة اسمها `snake_case` زي `first_name`, `total_score`).'
      ]},
      { type: 'subheading', text: 'أنواع البيانات الأساسية (Basic Data Types):' },
      { type: 'paragraph', text: 'القيم اللي بنخزنها في المتغيرات ليها أنواع مختلفة. بايثون لغة "ديناميكية التنميط" (Dynamically Typed)، يعني مش لازم تحدد نوع البيانات بنفسك وانت بتعمل المتغير، هي بتعرف النوع لوحدها من القيمة اللي خزنتها. أهم أنواع البيانات الأساسية هي:' },
      { type: 'list', text: '', items: [
          '**النصوص (Strings - `str`):** أي كلام أو حروف أو رموز بنحطها بين علامتين تنصيص مزدوجتين `""` أو مفردتين `\'\'`. مثال: `"محمد"`, `\'Bod Code123\'`, `"مرحباً يا عالم!"`.',
          '**الأرقام الصحيحة (Integers - `int`):** الأرقام الكاملة اللي مفيهاش كسور، سواء موجبة أو سالبة أو صفر. مثال: `10`, `-5`, `0`, `12345`.',
          '**الأرقام العشرية (Floating-Point Numbers - `float`):** الأرقام اللي فيها علامة عشرية (كسور). مثال: `3.14`, `-0.5`, `2.718`, `10.0`. (لاحظ إن `10.0` ده float لكن `10` ده int).',
          '**القيم المنطقية (Booleans - `bool`):** نوع بيانات خاص ليه قيمتين اتنين بس: `True` (صح) أو `False` (غلط). (لازم أول حرف يكون كابيتال). بنستخدمها كتير في الشروط واتخاذ القرارات. مثال: `is_active = True`, `has_error = False`.'
        ]
      },
      { type: 'subheading', text: 'معرفة نوع المتغير (Checking Variable Type):' },
      { type: 'paragraph', text: 'لو عايز تعرف نوع البيانات اللي متخزنة في متغير معين، ممكن تستخدم دالة جاهزة اسمها `type()`. '},
      { type: 'code', language: 'python', text: 'message = "أهلاً"\ncount = 100\npi_value = 3.14159\nis_done = False\n\nprint(type(message))    # هيطبع: <class \'str\'>\nprint(type(count))      # هيطبع: <class \'int\'>\nprint(type(pi_value))   # هيطبع: <class \'float\'>\nprint(type(is_done))    # هيطبع: <class \'bool\'>'},
      { type: 'subheading', text: 'تحويل أنواع البيانات (Type Casting/Conversion):' },
      { type: 'paragraph', text: 'أحياناً بنحتاج نحول قيمة من نوع بيانات لنوع تاني. بايثون بتقدملك دوال عشان تعمل كده:'},
      { type: 'list', text: 'أشهر دوال التحويل:', items: [
        '`int(x)`: بتحاول تحول `x` لرقم صحيح. لو `x` نص فيه حروف مش أرقام، هيحصل خطأ.',
        '`float(x)`: بتحاول تحول `x` لرقم عشري.',
        '`str(x)`: بتحول `x` لنص (string).',
        '`bool(x)`: بتحول `x` لقيمة منطقية. معظم القيم بتتحول لـ `True` ماعدا القيم "الفاضية" زي `0`, `0.0`, `""` (نص فاضي), `None`, وقايم فاضية (هنعرفها بعدين) بتتحول لـ `False`.'
      ]},
      { type: 'code', language: 'python', text: 'num_str = "123"          # ده نص\nnum_int = int(num_str)     # حولناه لرقم صحيح\nprint(num_int + 7)       # الناتج: 130 (عملية جمع حسابي)\n\nnum_float = float("3.14")  # نص حولناه لرقم عشري\nprint(num_float * 2)     # الناتج: 6.28\n\nage_str = str(30)          # رقم حولناه لنص\nprint("عمري هو: " + age_str) # الناتج: عمري هو: 30 (عملية دمج نصوص)\n\nprint(bool(0))      # False\nprint(bool(10))     # True\nprint(bool(""))     # False\nprint(bool("Hi"))   # True' },
      { type: 'paragraph', text: 'المتغيرات وأنواع البيانات هي حجر الأساس في أي لغة برمجة. فهمهم كويس هيسهل عليك الدروس الجاية كتير!'}
    ],
    quiz: [
      { id: 'q3-1', text: 'لو عايز أخزن اسم شخص، أستخدم متغير من نوع إيه؟', options: ['Integer', 'Float', 'String', 'Boolean'], correctAnswerIndex: 2, explanation: 'الأسماء والنصوص عمومًا تُخزن كـ Strings.' },
      { id: 'q3-2', text: 'قيمة المتغير `x = 10.5` نوعها إيه؟', options: ['Integer', 'Float', 'String', 'Boolean'], correctAnswerIndex: 1, explanation: 'الأرقام التي تحتوي على علامة عشرية هي من نوع Float.' },
      { id: 'q3-3', text: 'أي من أسماء المتغيرات التالية يعتبر اسم صالح في بايثون؟', options: ['1stName', 'first-name', 'firstName', 'first_name'], correctAnswerIndex: 3, explanation: 'أسماء المتغيرات لا يمكن أن تبدأ برقم، ولا تحتوي على شرطة (-). `firstName` (camelCase) صالح لكن `first_name` (snake_case) هو المتعارف عليه في بايثون.' },
      { id: 'q3-4', text: 'ما هي القيمة التي سيطبعها الكود التالي: `print(type(True))`؟', options: ['<class \'bool\'>', '<class \'str\'>', '<class \'int\'>', 'True'], correctAnswerIndex: 0, explanation: '`True` هي قيمة منطقية (Boolean) في بايثون.' },
      { id: 'q3-5', text: 'ماذا سيحدث لو حاولت تنفيذ `age = "سني " + 25`؟', options: ['سيتم تخزين "سني 25" في age', 'سيحدث خطأ (TypeError)', 'سيتم تخزين 25 في age', 'سيتم تخزين "سني " في age'], correctAnswerIndex: 1, explanation: 'لا يمكن دمج نص (string) مع رقم صحيح (integer) مباشرة باستخدام `+`. يجب تحويل الرقم إلى نص أولاً: `age = "سني " + str(25)`.' },
      { id: 'q3-6', text: 'ما هي نتيجة `int("20.7")`؟', options: ['20.7', '20', '21', 'خطأ (ValueError)'], correctAnswerIndex: 3, explanation: 'الدالة `int()` لا تستطيع تحويل نص يمثل رقم عشري مباشرة. يجب تحويله لـ `float` أولاً ثم لـ `int` إذا أردت الجزء الصحيح: `int(float("20.7"))` والذي سيعطي `20`.' },
      { id: 'q3-7', text: 'هل `myVar` و `myvar` يعتبران نفس المتغير في بايثون؟', options: ['نعم، بايثون لا تهتم بحالة الأحرف', 'لا، بايثون حساسة لحالة الأحرف (case-sensitive)', 'يعتمد على نوع البيانات', 'فقط إذا كانا يخزنان نفس القيمة'], correctAnswerIndex: 1, explanation: 'بايثون لغة حساسة لحالة الأحرف، لذا `myVar` و `myvar` هما متغيران مختلفان.' },
      { id: 'q3-8', text: 'أي من القيم التالية يعتبرها `bool()` كقيمة `False`؟', options: ['"False"', '1', '0', '["a"]'], correctAnswerIndex: 2, explanation: 'الرقم `0` (و `0.0`)، والنصوص الفارغة `""`، و `None`، والمجموعات الفارغة (مثل قائمة فارغة `[]`) تعتبر `False` عند تحويلها إلى Boolean. النص `"False"` ليس فارغًا فيعتبر `True`.' },
      { id: 'q3-9', text: 'ماذا تسمى عملية إعطاء قيمة لمتغير مثل `x = 100`؟', options: ['تعريف (Definition)', 'إسناد (Assignment)', 'مقارنة (Comparison)', 'استدعاء (Calling)'], correctAnswerIndex: 1, explanation: 'استخدام علامة `=` لإعطاء قيمة لمتغير يسمى عملية إسناد.' },
      { id: 'q3-10', text: 'إذا كان لديك `a = 10` و `b = "5"`. ما ناتج `str(a) + b`؟', options: ['15', '"105"', 'خطأ', '"10" + "5"'], correctAnswerIndex: 1, explanation: '`str(a)` يحول الرقم `10` إلى النص `"10"`. ثم يتم دمج النص `"10"` مع النص `"5"` ليصبح `"105"`.' }
    ]
  },
  {
    id: 'l1-lesson-ops', // New lesson
    slug: 'operators-in-python',
    title: 'العمليات في بايثون',
    description: 'تعلم كيفية إجراء العمليات الحسابية، المقارنات، والعمليات المنطقية في بايثون.',
    content: [
      { type: 'heading', text: 'الآلات الحاسبة السحرية: العمليات (Operators)!' },
      { type: 'paragraph', text: 'العمليات في بايثون هي الرموز الخاصة اللي بتخلينا نعمل حاجات على البيانات بتاعتنا، زي ما بنستخدم الجمع والطرح في الرياضة. بايثون فيها أنواع مختلفة من العمليات، وكل نوع ليه استخداماته.' },
      { type: 'subheading', text: '1. العمليات الحسابية (Arithmetic Operators):' },
      { type: 'paragraph', text: 'دي العمليات اللي بنستخدمها عشان نعمل حسابات رياضية على الأرقام:' },
      { type: 'list', text: 'أشهر العمليات الحسابية:', items: [
          '`+` (الجمع): `5 + 3` الناتج `8`',
          '`-` (الطرح): `5 - 3` الناتج `2`',
          '`*` (الضرب): `5 * 3` الناتج `15`',
          '`/` (القسمة): `10 / 3` الناتج `3.333...` (الناتج دايماً float)',
          '`//` (القسمة الصحيحة - Floor Division): `10 // 3` الناتج `3` (بياخد الجزء الصحيح بس من ناتج القسمة ويهمل الكسر)',
          '`%` (باقي القسمة - Modulus): `10 % 3` الناتج `1` (الباقي من قسمة 10 على 3)',
          '`**` (الأس - Exponentiation): `5 ** 2` الناتج `25` (يعني 5 أُس 2)'
        ]
      },
      { type: 'code', language: 'python', text: 'x = 10\ny = 3\n\nprint("الجمع:", x + y)        # 13\nprint("الضرب:", x * y)        # 30\nprint("القسمة:", x / y)        # 3.333...\nprint("القسمة الصحيحة:", x // y) # 3\nprint("باقي القسمة:", x % y)   # 1\nprint("الأس:", y ** 2)          # 9 (يعني 3*3)' },
      { type: 'subheading', text: '2. عمليات المقارنة (Comparison Operators):' },
      { type: 'paragraph', text: 'بنستخدمها عشان نقارن بين قيمتين. نتيجة المقارنة بتكون دايماً قيمة منطقية (`True` أو `False`).' },
      { type: 'list', text: 'أشهر عمليات المقارنة:', items: [
          '`==` (يساوي): `5 == 5` (هل 5 تساوي 5؟) الناتج `True`. `5 == 3` الناتج `False`. (لاحظ إنها اتنين يساوي مش واحدة!)',
          '`!=` (لا يساوي): `5 != 3` (هل 5 لا تساوي 3؟) الناتج `True`.',
          '`>` (أكبر من): `5 > 3` الناتج `True`.',
          '`<` (أصغر من): `5 < 3` الناتج `False`.',
          '`>=` (أكبر من أو يساوي): `5 >= 5` الناتج `True`.',
          '`<=` (أصغر من أو يساوي): `3 <= 5` الناتج `True`.'
        ]
      },
      { type: 'code', language: 'python', text: 'a = 10\nb = 5\n\nprint("هل a تساوي b؟", a == b)       # False\nprint("هل a لا تساوي b؟", a != b)     # True\nprint("هل a أكبر من b؟", a > b)       # True\nprint("هل a أصغر من أو تساوي b؟", a <= b) # False' },
      { type: 'subheading', text: '3. العمليات المنطقية (Logical Operators):' },
      { type: 'paragraph', text: 'بنستخدمها عشان نربط بين أكتر من شرط (تعبير منطقي). بتشتغل على قيم منطقية (`True` أو `False`) وبترجع قيمة منطقية.' },
      { type: 'list', text: 'أشهر العمليات المنطقية:', items: [
          '`and` (وَ): بترجع `True` لو كل الشروط اللي بتربط بينهم `True`. لو شرط واحد بس `False`، يبقى الناتج كله `False`.',
          '`or` (أو): بترجع `True` لو فيه شرط واحد على الأقل من الشروط اللي بتربط بينهم `True`. بترجع `False` بس لو كل الشروط `False`.',
          '`not` (ليس/النفي): بتعكس القيمة المنطقية. `not True` تبقى `False`، و `not False` تبقى `True`.'
        ]
      },
      { type: 'code', language: 'python', text: 'age = 25\nhas_license = True\n\n# هل الشخص ده ينفع يسوق؟ (لازم يكون سنه أكبر من أو يساوي 18 ويكون معاه رخصة)\ncan_drive = (age >= 18) and (has_license == True)\nprint("هل يمكنه القيادة؟", can_drive)  # True\n\nis_weekend = False\nis_holiday = True\n\n# هل النهاردة أجازة ممكن أسافر فيها؟ (يا إما ويك إند أو أجازة رسمية)\ncan_travel = is_weekend or is_holiday\nprint("هل يمكن السفر؟", can_travel)  # True\n\nprint("نفي True هو:", not True)    # False' },
      { type: 'subheading', text: '4. عمليات الإسناد (Assignment Operators):' },
      { type: 'paragraph', text: 'إحنا بالفعل استخدمنا أشهر عملية إسناد وهي علامة اليساوي `=` عشان نخزن قيمة في متغير. فيه عمليات إسناد تانية مختصرة بتجمع بين عملية حسابية وعملية الإسناد:' },
      { type: 'list', text: '', items: [
          '`x = 5` (إسناد عادي)',
          '`x += 3` (مكافئة لـ `x = x + 3`)',
          '`x -= 2` (مكافئة لـ `x = x - 2`)',
          '`x *= 4` (مكافئة لـ `x = x * 4`)',
          '`x /= 2` (مكافئة لـ `x = x / 2`)',
          '`x %= 3` (مكافئة لـ `x = x % 3`)'
        ]
      },
      { type: 'code', language: 'python', text: 'counter = 0\ncounter += 1  # counter بقت 1\ncounter += 1  # counter بقت 2\nprint("العداد وصل:", counter) # 2\n\ntotal = 100\ntotal -= 10   # total بقت 90\nprint("الإجمالي:", total)   # 90'},
      { type: 'subheading', text: 'أولوية العمليات (Operator Precedence):' },
      { type: 'paragraph', text: 'زي الرياضة بالظبط، بايثون ليها ترتيب معين بتنفذ بيه العمليات لو جم مع بعض في سطر واحد. مثلاً، الضرب والقسمة ليهم أولوية أعلى من الجمع والطرح. الأقواس `()` ليها أعلى أولوية وبتستخدم عشان نغير ترتيب التنفيذ أو نخليه أوضح.'},
      { type: 'code', language: 'python', text: 'result = 5 + 2 * 3  # الضرب الأول (2*3=6)، بعدين الجمع (5+6=11)\nprint(result)         # 11\n\nresult_with_parens = (5 + 2) * 3 # الأقواس الأول (5+2=7)، بعدين الضرب (7*3=21)\nprint(result_with_parens) # 21'},
      { type: 'paragraph', text: 'العمليات دي هي الأدوات اللي بتخلي برامجنا تفكر وتتخذ قرارات وتعمل حسابات. جربهم بنفسك كتير عشان تستوعبهم كويس!'}
    ],
    quiz: [
      { id: 'q_op_1', text: 'ما هو ناتج `10 // 3` في بايثون؟', options: ['3.333', '3', '1', 'خطأ'], correctAnswerIndex: 1, explanation: '`//` هي عملية القسمة الصحيحة (Floor Division) التي تعطي الجزء الصحيح من ناتج القسمة.' },
      { id: 'q_op_2', text: 'أي من عمليات المقارنة التالية تتحقق من "عدم المساواة"؟', options: ['==', '!=', '<>', '><'], correctAnswerIndex: 1, explanation: '`!=` هي عملية "لا يساوي".' },
      { id: 'q_op_3', text: 'إذا كانت `a = True` و `b = False`، فما هو ناتج `a and b`؟', options: ['True', 'False', 'يعتمد', 'خطأ'], correctAnswerIndex: 1, explanation: 'عملية `and` تكون `True` فقط إذا كان كلا الطرفين `True`.' },
      { id: 'q_op_4', text: 'ما هي العملية المكافئة لـ `x = x + 5`؟', options: ['x += 5', 'x =+ 5', 'x + 5 = x', 'x = 5 + x'], correctAnswerIndex: 0, explanation: '`+=` هي عملية إسناد مختصرة للجمع ثم الإسناد.' },
      { id: 'q_op_5', text: 'ما هو ناتج `10 % 4`؟', options: ['2.5', '2', '0.5', '40'], correctAnswerIndex: 1, explanation: '`%` هي عملية باقي القسمة. 10 قسمة 4 تساوي 2 والباقي 2.' },
      { id: 'q_op_6', text: 'ماذا ستكون قيمة `result` بعد تنفيذ الكود التالي: `result = (5 > 3) or (10 == 9)`؟', options: ['True', 'False', '5', '10'], correctAnswerIndex: 0, explanation: '`(5 > 3)` هي `True`. `(10 == 9)` هي `False`. `True or False` الناتج `True`.' },
      { id: 'q_op_7', text: 'أي عملية لها أعلى أولوية في التنفيذ في بايثون (بدون أقواس)؟', options: ['الجمع (+)', 'الضرب (*)', 'الأس (**)', 'المقارنة (==)'], correctAnswerIndex: 2, explanation: 'الأس `**` له أولوية أعلى من الضرب والقسمة، والتي بدورها أعلى من الجمع والطرح. العمليات الحسابية عمومًا لها أولوية أعلى من المقارنات والمنطقية (ما لم تستخدم الأقواس).' },
      { id: 'q_op_8', text: 'ما هو ناتج `not (5 == 5)`؟', options: ['True', 'False', '5', 'خطأ'], correctAnswerIndex: 1, explanation: '`(5 == 5)` هي `True`. `not True` هي `False`.' },
      { id: 'q_op_9', text: 'إذا كانت `x = 15`. بعد تنفيذ `x /= 3`، ما هي قيمة `x`؟', options: ['15', '5.0', '5', 'خطأ'], correctAnswerIndex: 1, explanation: 'عملية القسمة `/` (أو `/=`) تنتج دائمًا رقمًا عشريًا (float) في بايثون 3.' },
      { id: 'q_op_10', text: 'ما هو ناتج `2 * 3 ** 2`؟', options: ['36 (2*3=6, 6^2=36)', '18 (3^2=9, 2*9=18)', '12 (2*3=6, 6*2=12)', 'خطأ'], correctAnswerIndex: 1, explanation: 'عملية الأس `**` لها أولوية أعلى من الضرب `*`. لذا `3 ** 2` (تساوي 9) تُنفذ أولاً، ثم `2 * 9` (تساوي 18).' }
    ]
  },
  {
    id: 'l1-lesson-5',
    slug: 'conditional-statements',
    title: 'الجمل الشرطية',
    description: 'كيف تجعل برنامجك يتخذ قرارات بناءً على شروط معينة باستخدام `if`, `elif`, `else`.',
    content: [
        { type: 'heading', text: 'البرنامج بيفكر: الجمل الشرطية (Conditional Statements)' },
        { type: 'paragraph', text: 'في حياتنا اليومية، بناخد قرارات طول الوقت بناءً على شروط معينة. مثلاً: "لو الجو حر، هشغل التكييف. وإلا (لو مش حر)، هفتح الشباك." البرامج كمان محتاجة تعمل كده! محتاجة تفكر وتتصرف بشكل مختلف حسب الموقف. هنا بتيجي فايدة الجمل الشرطية.' },
        { type: 'paragraph', text: 'في بايثون، بنستخدم الكلمات المفتاحية `if` (لو)، `elif` (اختصار لـ else if، يعني وإلا لو)، و `else` (وإلا) عشان نخلي البرنامج ينفذ أوامر معينة فقط لو شرط معين اتحقق.' },
        { type: 'subheading', text: '1. جملة `if` البسيطة:' },
        { type: 'paragraph', text: 'بنستخدم `if` لما نكون عايزين ننفذ مجموعة أوامر لو شرط معين كان `True`. لو الشرط كان `False`، البرنامج هيتجاهل الأوامر دي ويكمل عادي.'},
        { type: 'paragraph', text: 'الصيغة العامة بتاعتها:'},
        { type: 'code', language: 'python', text: 'if condition:  # الشرط لازم يكون تعبير نتيجته True أو False\n    # الأوامر اللي هتتنفذ لو الشرط True\n    # (لاحظ المسافة البادئة قبل الأوامر دي، مهمة جداً!)\n    statement1\n    statement2\n\n# باقي الكود (بيتنفذ سواء الشرط True أو False)' },
        { type: 'paragraph', text: '**ملاحظة مهمة جداً:** المسافة البادئة (Indentation) اللي قبل `statement1` و `statement2` دي أساسية في بايثون. هي اللي بتعرف بايثون إن الأوامر دي تابعة لجملة `if`. المسافة دي عادة بتكون 4 مسافات (أو تاب واحدة). لو مكتبتهاش صح، هيحصل خطأ.'},
        { type: 'code', language: 'python', text: 'temperature = 35\n\nif temperature > 30:\n    print("الجو حر جداً!")\n    print("شغل التكييف.")\n\nprint("يومك سعيد!") # دي هتتطبع في كل الأحوال' },
        { type: 'subheading', text: '2. جملة `if...else`:' },
        { type: 'paragraph', text: 'ساعات بنكون عايزين ننفذ مجموعة أوامر لو الشرط `True`، وننفذ مجموعة أوامر تانية مختلفة لو الشرط كان `False`. هنا بنستخدم `else`.'},
        { type: 'code', language: 'python', text: 'if condition:\n    # الأوامر اللي هتتنفذ لو الشرط True\n    statement_A1\n    statement_A2\nelse:\n    # الأوامر اللي هتتنفذ لو الشرط False\n    statement_B1\n    statement_B2' },
        { type: 'code', language: 'python', text: 'age = 16\n\nif age >= 18:\n    print("أنت بالغ ويمكنك التصويت.")\nelse:\n    print("أنت قاصر ولا يمكنك التصويت بعد.")\n    print(f"فاضلك {18 - age} سنين عشان تقدر تصوت.")' },
        { type: 'subheading', text: '3. جملة `if...elif...else` (شروط متعددة):' },
        { type: 'paragraph', text: 'لو عندك أكتر من شرط وعايز تختبرهم بالترتيب، بتستخدم `elif`. بايثون بيمشي على الشروط من فوق لتحت. أول شرط بيلاقيه `True` بينفذ الأوامر بتاعته وبيتجاهل باقي الـ `elif` والـ `else` اللي بعده. لو ولا شرط من `if` أو `elif` كان `True`، بينفذ الأوامر بتاعة `else` (لو موجودة).'},
        { type: 'code', language: 'python', text: 'grade = 85\n\nif grade >= 90:\n    print("ممتاز!")\nelif grade >= 80:  # هيتنفذ لو الشرط الأول False وده True\n    print("جيد جداً.")\nelif grade >= 70:\n    print("جيد.")\nelif grade >= 60:\n    print("مقبول.")\nelse: # هيتنفذ لو كل الشروط اللي فوق False\n    print("محتاج تذاكر أكتر.")' },
        { type: 'subheading', text: 'شروط متداخلة (Nested `if` statements):' },
        { type: 'paragraph', text: 'ممكن تحط جملة `if` جوه جملة `if` تانية. ده بيخليك تعمل شروط معقدة أكتر.'},
        { type: 'code', language: 'python', text: 'num = 15\n\nif num > 0:\n    print("الرقم موجب.")\n    if num % 2 == 0: # شرط داخلي\n        print("وهو رقم زوجي.")\n    else:\n        print("وهو رقم فردي.")\nelse:\n    print("الرقم سالب أو صفر.")' },
        { type: 'subheading', text: 'القيم الـ "Truthy" والـ "Falsy":' },
        { type: 'paragraph', text: 'مش لازم الشرط في جملة `if` يكون ناتج عملية مقارنة صريحة (زي `age > 18`). بايثون بيعتبر بعض القيم "صحيحة ضمنياً" (Truthy) وبعضها "خاطئة ضمنياً" (Falsy).'},
        { type: 'list', text: 'أمثلة على قيم Falsy:', items: [
          '`False` (القيمة المنطقية نفسها)',
          '`None` (قيمة خاصة بتعبر عن "لا شيء")',
          'الأرقام صفر: `0`, `0.0`',
          'النصوص الفارغة: `""`, `\'\'`',
          'المجموعات الفارغة زي القوائم `[]` والقواميس `{}` (هنعرفهم بعدين)'
        ]},
        { type: 'paragraph', text: 'أي قيمة تانية غير دول بتعتبر Truthy.'},
        { type: 'code', language: 'python', text: 'name = ""\nif name: # هنا name "" تعتبر Falsy\n    print(f"أهلاً يا {name}")\nelse:\n    print("لم يتم إدخال اسم.") # ده اللي هيتطبع\n\nmy_list = [1, 2]\nif my_list: # my_list مش فاضية، تعتبر Truthy\n    print("القائمة تحتوي على عناصر.") # ده اللي هيتطبع'},
        { type: 'paragraph', text: 'الجمل الشرطية هي اللي بتدي برامجك القدرة على التكيف مع المواقف المختلفة. تدرب عليها كويس لأنها من أهم أساسيات البرمجة!'}
    ],
    quiz: [
        { id: 'q_cond_1', text: 'أي كلمة مفتاحية تستخدم للتحقق من شرط إضافي إذا لم يتحقق الشرط الأول في جملة `if`؟', options: ['then', 'elseif', 'elif', 'otherwise'], correctAnswerIndex: 2, explanation: '`elif` (اختصار لـ else if) تستخدم لاختبار شروط إضافية.' },
        { id: 'q_cond_2', text: 'ماذا سيطبع الكود التالي إذا كانت `x = 10`؟\n`if x > 10:\n  print("A")\nelif x == 10:\n  print("B")\nelse:\n  print("C")`', options: ['A', 'B', 'C', 'لن يطبع شيئًا'], correctAnswerIndex: 1, explanation: 'بما أن `x` تساوي 10، فإن شرط `x == 10` في `elif` هو الذي سيتحقق.' },
        { id: 'q_cond_3', text: 'هل المسافة البادئة (Indentation) مهمة في جمل `if` في بايثون؟', options: ['لا، هي فقط لتجميل شكل الكود', 'نعم، هي التي تحدد الأوامر التابعة للشرط', 'مهمة فقط في جمل `else`', 'مهمة فقط إذا كان هناك `elif`'], correctAnswerIndex: 1, explanation: 'المسافة البادئة ضرورية في بايثون لتحديد نطاق الكتل البرمجية التابعة للجمل الشرطية والحلقات والدوال وغيرها.' },
        { id: 'q_cond_4', text: 'إذا كان لديك `if condition1: ... elif condition2: ... else: ...` متى يتم تنفيذ الجزء الخاص بـ `else`؟', options: ['دائمًا', 'فقط إذا كان `condition1` صحيحًا', 'فقط إذا كان `condition2` صحيحًا', 'فقط إذا كان كل من `condition1` و `condition2` خاطئين'], correctAnswerIndex: 3, explanation: 'جزء `else` ينفذ فقط إذا كانت جميع شروط `if` و `elif` السابقة له خاطئة.' },
        { id: 'q_cond_5', text: 'أي من القيم التالية تعتبر "Falsy" في بايثون (أي تعامل كـ `False` في سياق شرطي)؟', options: ['"False" (النص)', '0 (الرقم صفر)', '-1 (الرقم سالب واحد)', '[1, 2] (قائمة غير فارغة)'], correctAnswerIndex: 1, explanation: 'الرقم صفر (`0` و `0.0`)، والنصوص الفارغة (`""`)، و`None`، والمجموعات الفارغة تعتبر Falsy.' },
        { id: 'q_cond_6', text: 'ماذا سيطبع الكود التالي؟\n`name = "Bod"\nif name:\n  print("Hello")\nelse:\n  print("No name")`', options: ['Hello', 'No name', 'لن يطبع شيئًا', 'خطأ'], correctAnswerIndex: 0, explanation: 'النص غير الفارغ `"Bod"` يعتبر "Truthy"، لذا سيتحقق الشرط.' },
        { id: 'q_cond_7', text: 'هل يمكن وضع جملة `if` داخل جملة `if` أخرى (شروط متداخلة)؟', options: ['نعم، بدون أي قيود', 'لا، هذا غير مسموح به في بايثون', 'نعم، ولكن بحد أقصى تداخل واحد', 'نعم، ولكن فقط إذا كان الشرط الخارجي `else`'], correctAnswerIndex: 0, explanation: 'يمكن تداخل جمل `if` لإنشاء منطق شرطي معقد.' },
        { id: 'q_cond_8', text: 'ما هو الخطأ الشائع عند كتابة `if a = 5:` بدلاً من `if a == 5:`؟', options: ['لا يوجد خطأ، كلاهما صحيح', 'الأولى تقوم بإسناد قيمة (assignment) بدلاً من المقارنة (comparison)', 'الثانية هي التي تسبب خطأ', 'الأولى أسرع في التنفيذ'], correctAnswerIndex: 1, explanation: '`a = 5` هي عملية إسناد، بينما `a == 5` هي عملية مقارنة. جمل `if` تحتاج إلى تعبير ينتج عنه `True` أو `False` (مثل المقارنة).' },
        { id: 'q_cond_9', text: 'إذا كان لديك عدة `elif` بعد `if`، هل يتم اختبار كل شروط `elif` حتى لو تحقق شرط `if` الأول؟', options: ['نعم، يتم اختبار جميع الشروط دائمًا', 'لا، بمجرد تحقق شرط `if` أو `elif`، يتم تجاهل الباقي', 'يتم اختبارهم فقط إذا كان شرط `if` الأول خاطئًا', 'يتم اختبارهم بشكل عشوائي'], correctAnswerIndex: 1, explanation: 'بايثون يختبر الشروط بالترتيب، وبمجرد العثور على شرط `True`، ينفذ كتلته ويتجاهل بقية `elif` و `else` في نفس السلسلة.' },
        { id: 'q_cond_10', text: 'ماذا سيحدث إذا لم تضع مسافة بادئة صحيحة للأوامر داخل جملة `if`؟', options: ['سيتم تنفيذ الأوامر بشكل طبيعي', 'سيظهر تحذير ولكن الكود سيعمل', 'سيحدث خطأ في بناء الجملة (IndentationError)', 'سيتجاهل بايثون جملة `if` بالكامل'], correctAnswerIndex: 2, explanation: 'عدم وجود مسافة بادئة صحيحة يؤدي إلى `IndentationError` لأن بايثون تعتمد عليها لتحديد الكتل البرمجية.' }
    ]
  },
  {
    id: 'l1-lesson-loops', // New lesson
    slug: 'loops-in-python',
    title: 'حلقات التكرار (for, while)',
    description: 'تعلم كيف تجعل برنامجك يكرر تنفيذ مجموعة من الأوامر عدة مرات باستخدام حلقات `for` و `while`.',
    content: [
      { type: 'heading', text: 'البرنامج النشيط: حلقات التكرار (Loops)!' },
      { type: 'paragraph', text: 'تخيل إنك عايز تطبع كلمة "مرحباً" 100 مرة. هل هتقعد تكتب أمر الطباعة 100 مرة؟ أكيد لأ! هنا بتيجي فايدة حلقات التكرار. الحلقات بتخلينا ننفذ جزء معين من الكود أكتر من مرة بشكل تلقائي، وده بيوفر علينا وقت ومجهود كبير وبيخلي الكود بتاعنا أنضف وأصغر.' },
      { type: 'paragraph', text: 'بايثون فيها نوعين أساسيين من حلقات التكرار: `for` و `while`.' },
      { type: 'subheading', text: '1. حلقة `for` (التكرار المحدد):' },
      { type: 'paragraph', text: 'بنستخدم حلقة `for` لما نكون عارفين عدد المرات اللي عايزين نكرر فيها الكود، أو لما نكون عايزين نمر على كل عنصر في مجموعة من العناصر (زي قائمة أو نص).'},
      { type: 'paragraph', text: 'أشهر استخدام لحلقة `for` هو مع دالة `range()` اللي بتنشئ سلسلة من الأرقام:'},
      { type: 'code', language: 'python', text: '# range(5) بتنشئ الأرقام من 0 لحد 4 (يعني 0, 1, 2, 3, 4)\nfor i in range(5):  # في كل لفة، المتغير i هياخد قيمة جديدة من السلسلة\n    print(f"مرحباً للمرة رقم: {i}")\n\n# ممكن نحدد بداية ونهاية وخطوة للـ range\n# range(start, stop, step) - stop مش بتدخل معانا\nfor num in range(2, 10, 2): # الأرقام: 2, 4, 6, 8\n    print(num)' },
      { type: 'paragraph', text: 'ممكن كمان نستخدم `for` عشان نمر على حروف نص أو عناصر قائمة (هنتكلم عن القوائم بالتفصيل بعدين):'},
      { type: 'code', language: 'python', text: 'name = "BodCode"\nfor char in name: # char هياخد قيمة كل حرف بالترتيب\n    print(char)\n\nfruits = ["تفاح", "موز", "فراولة"]\nfor fruit in fruits:\n    print(f"أنا بحب الـ {fruit}")' },
      { type: 'subheading', text: '2. حلقة `while` (التكرار المشروط):' },
      { type: 'paragraph', text: 'بنستخدم حلقة `while` لما نكون عايزين نكرر الكود طالما شرط معين متحقق (`True`). الحلقة بتفضل شغالة لحد ما الشرط ده يبقى `False`. مهم جداً إننا نتأكد إن الشرط ده هيتغير في وقت ما جوه الحلقة ويصبح `False`، وإلا الحلقة هتفضل شغالة للأبد (بنسميها "حلقة لا نهائية" - Infinite Loop) والبرنامج هيعلق!'},
      { type: 'code', language: 'python', text: 'count = 0\nwhile count < 5:  # طالما count أصغر من 5، كمل\n    print(f"العداد حالياً: {count}")\n    count += 1    # مهم جداً نغير قيمة count عشان الشرط ميفضلش True للأبد\n\nprint("خلصنا العد!")' },
      { type: 'paragraph', text: 'لو نسيت السطر بتاع `count += 1`، الـ `count` هتفضل بصفر على طول والشرط `count < 5` هيفضل `True` إلى ما لا نهاية.'},
      { type: 'subheading', text: '3. التحكم في الحلقات: `break` و `continue`:' },
      { type: 'paragraph', text: 'ساعات بنحتاج نتحكم في سير الحلقة بشكل أدق:'},
      { type: 'list', text: '', items: [
          '`break`: بتستخدم عشان تكسر الحلقة وتخرج منها فوراً، حتى لو شرط الحلقة لسه متحقق (في `while`) أو لسه فيه عناصر (في `for`).',
          '`continue`: بتستخدم عشان تتجاهل باقي الأوامر اللي جوه اللفة الحالية من الحلقة، وتبدأ اللفة اللي بعدها على طول.'
        ]
      },
      { type: 'code', language: 'python', text: '# مثال على break\nfor i in range(10):\n    if i == 5:\n        print("لقينا 5، هنخرج من الحلقة!")\n        break # اخرج من الحلقة فوراً\n    print(i)\n\nprint("-" * 20)\n\n# مثال على continue\nfor num in range(1, 6): # الأرقام من 1 لـ 5\n    if num == 3:\n        print("تجاهلنا رقم 3")\n        continue # روح للفة الجاية على طول، متكملش اللي تحت\n    print(f"الرقم هو: {num}")' },
       { type: 'subheading', text: '4. جملة `else` مع الحلقات:' },
       { type: 'paragraph', text: 'بايثون فيها ميزة مش موجودة في لغات كتير، وهي إنك ممكن تستخدم جملة `else` مع حلقات `for` و `while`. الجزء بتاع `else` بيتنفذ فقط لو الحلقة خلصت بشكل طبيعي (يعني مخرجتش منها باستخدام `break`).'},
       { type: 'code', language: 'python', text: 'for i in range(3):\n    print(f"محاولة رقم {i}")\nelse:\n    print("الحلقة خلصت بشكل طبيعي من غير break.")\n\nprint("-" * 20)\n\ncount = 0\nwhile count < 3:\n    print(f"العداد: {count}")\n    count += 1\n    # if count == 1: break # لو شيلت التعليق من هنا، الـ else مش هيتنفذ\nelse:\n    print("حلقة while خلصت طبيعي.")'},
      { type: 'paragraph', text: 'حلقات التكرار من أقوى الأدوات في البرمجة. بتخليك تعمل حاجات معقدة بكمية كود قليلة. جرب تعمل بيها برامج صغيرة بتكرر مهام معينة!'}
    ],
    quiz: [
      { id: 'q_loop_1', text: 'أي نوع من حلقات التكرار يُستخدم عادةً عندما تعرف مسبقًا عدد مرات التكرار المطلوبة؟', options: ['while', 'for', 'if', 'repeat'], correctAnswerIndex: 1, explanation: 'حلقة `for` مناسبة للتكرار لعدد محدد من المرات أو للمرور على عناصر متتابعة.' },
      { id: 'q_loop_2', text: 'ماذا ستطبع الدالة `range(3)` عند استخدامها في حلقة `for` (مثل `for i in range(3): print(i)`)؟', options: ['1, 2, 3', '0, 1, 2', '0, 1, 2, 3', 'لن تطبع شيئًا'], correctAnswerIndex: 1, explanation: '`range(n)` تولد أرقامًا من 0 حتى `n-1`.' },
      { id: 'q_loop_3', text: 'ما هي وظيفة الكلمة المفتاحية `break` داخل حلقة التكرار؟', options: ['توقف التنفيذ الحالي وتنتقل إلى التكرار التالي', 'تنهي حلقة التكرار فورًا وتنتقل إلى الكود الذي يلي الحلقة', 'تتسبب في حدوث خطأ', 'تعيد تشغيل الحلقة من البداية'], correctAnswerIndex: 1, explanation: '`break` تستخدم للخروج من الحلقة بشكل كامل.' },
      { id: 'q_loop_4', text: 'في حلقة `while condition: # code`، متى تتوقف الحلقة عن التكرار؟', options: ['بعد عدد معين من التكرارات يتم تحديده تلقائيًا', 'عندما يصبح الشرط `condition` قيمته `False`', 'عندما يصبح الشرط `condition` قيمته `True`', 'لا تتوقف أبدًا'], correctAnswerIndex: 1, explanation: 'حلقة `while` تستمر في التكرار طالما كان الشرط `True`، وتتوقف عندما يصبح `False`.' },
      { id: 'q_loop_5', text: 'ماذا تفعل الكلمة المفتاحية `continue` داخل حلقة التكرار؟', options: ['تنهي حلقة التكرار فورًا', 'تتجاهل ما تبقى من الكود في التكرار الحالي وتنتقل إلى بداية التكرار التالي', 'توقف البرنامج بالكامل', 'تطبع رسالة خطأ'], correctAnswerIndex: 1, explanation: '`continue` تتخطى بقية الأوامر في اللفة الحالية وتنتقل إلى اللفة التالية من الحلقة.' },
      { id: 'q_loop_6', text: 'ماذا سيحدث إذا كان شرط حلقة `while` دائمًا `True` ولم يتغير أبدًا داخل الحلقة؟', options: ['ستعمل الحلقة مرة واحدة فقط', 'لن تعمل الحلقة أبدًا', 'ستنشأ حلقة لا نهائية (Infinite Loop)', 'سيقوم بايثون بإيقافها تلقائيًا بعد فترة'], correctAnswerIndex: 2, explanation: 'إذا لم يتغير الشرط ليصبح `False`، ستستمر حلقة `while` في العمل بلا نهاية.' },
      { id: 'q_loop_7', text: 'متى يتم تنفيذ الجزء الخاص بـ `else` في حلقة `for...else`؟', options: ['دائمًا بعد انتهاء الحلقة', 'فقط إذا انتهت الحلقة بشكل طبيعي (بدون `break`)', 'فقط إذا تم استخدام `break` للخروج من الحلقة', 'فقط إذا كانت الحلقة فارغة ولم تنفذ أي تكرار'], correctAnswerIndex: 1, explanation: 'جملة `else` الملحقة بالحلقة تنفذ إذا أكملت الحلقة جميع تكراراتها دون أن يتم مقاطعتها بـ `break`.' },
      { id: 'q_loop_8', text: 'ماذا ستكون قيمة `i` بعد انتهاء الحلقة التالية؟ `for i in range(5): pass`', options: ['4', '5', '0', 'غير معرفة خارج الحلقة (حسب طريقة الاستخدام لكن عادة آخر قيمة)'], correctAnswerIndex: 0, explanation: 'المتغير `i` سيأخذ القيم 0, 1, 2, 3, 4. بعد انتهاء الحلقة، ستبقى `i` على آخر قيمة تم إسنادها إليها وهي 4 (في هذا السياق البسيط).' },
      { id: 'q_loop_9', text: 'للمرور على كل حرف في كلمة "Python"، أي حلقة هي الأنسب؟', options: ['`while char != "n":`', '`for char in "Python":`', '`for i in range(len("Python")-1):`', '`while True:`'], correctAnswerIndex: 1, explanation: 'يمكن استخدام حلقة `for` مباشرة للمرور على عناصر سلسلة نصية (أو قائمة، أو tuple).' },
      { id: 'q_loop_10', text: 'الكود التالي `count = 5; while count > 0: print(count); # لا يوجد تحديث لـ count` ماذا سينتج؟', options: ['يطبع 5 4 3 2 1', 'يطبع 5 فقط', 'لا يطبع شيئًا', 'حلقة لا نهائية تطبع 5 بشكل متكرر'], correctAnswerIndex: 3, explanation: 'بما أن قيمة `count` لا تتغير داخل الحلقة، فإن الشرط `count > 0` سيظل دائمًا `True`، مما يؤدي إلى حلقة لا نهائية.' }
    ]
  },
  {
    id: 'l1-lesson-functions', // New lesson
    slug: 'functions-in-python',
    title: 'الدوال (Functions)',
    description: 'تعلم كيف تنظم الكود الخاص بك في وحدات قابلة لإعادة الاستخدام تسمى الدوال، وكيفية تمرير البيانات إليها والحصول على نتائج منها.',
    content: [
      { type: 'heading', text: 'الكود المنظم: الدوال (Functions)!' },
      { type: 'paragraph', text: 'تخيل إنك بتعمل كيكة، وفيه خطوات معينة بتكررها كل مرة زي خفق البيض أو تسخين الفرن. بدل ما تكتب الخطوات دي كل مرة في الوصفة، ممكن تعمل "وصفة فرعية" صغيرة اسمها "طريقة خفق البيض" وتستخدمها كل ما تحتاجها. الدوال في البرمجة نفس الفكرة! هي عبارة عن مجموعة من الأوامر بنجمعهم مع بعض تحت اسم واحد، عشان نقدر ننفذهم كلهم مرة واحدة عن طريق استدعاء الاسم ده بس. ده بيخلي الكود بتاعنا منظم أكتر، وسهل القراءة، وكمان بيقلل التكرار (مبدأ DRY: Don\'t Repeat Yourself - لا تكرر نفسك).'},
      { type: 'subheading', text: '1. تعريف الدالة (Defining a Function):' },
      { type: 'paragraph', text: 'عشان تعمل دالة في بايثون، بتستخدم الكلمة المفتاحية `def` (اختصار لـ define) وبعدها اسم الدالة اللي بتختاره، وبعدين قوسين `()`، وبعدين نقطتين فوق بعض `:`.'},
      { type: 'paragraph', text: 'الأوامر اللي جوه الدالة لازم تكون داخلة لجوه بمسافة بادئة (Indentation)، زي ما عملنا مع جمل `if` والحلقات.'},
      { type: 'code', language: 'python', text: 'def greet():  # تعريف دالة بسيطة اسمها greet\n    print("أهلاً بك في Bod Code!")\n    print("نتمنى لك يوماً سعيداً.")\n\n# لحد هنا إحنا بس عرفنا الدالة، لكن منفذناش الأوامر اللي جواها.' },
      { type: 'subheading', text: '2. استدعاء الدالة (Calling a Function):' },
      { type: 'paragraph', text: 'بعد ما عرفت الدالة، عشان تشغل الأوامر اللي جواها، لازم "تستدعيها" (Call it) عن طريق كتابة اسمها متبوعاً بالقوسين `()`.'},
      { type: 'code', language: 'python', text: 'def say_hello():\n    print("مرحباً!")\n\nsay_hello()  # هنا بنستدعي الدالة، فهيطبع "مرحباً!"\nsay_hello()  # ممكن نستدعيها أكتر من مرة' },
      { type: 'subheading', text: '3. المعاملات (Parameters) والوسائط (Arguments):' },
      { type: 'paragraph', text: 'ساعات بنكون عايزين الدالة بتاعتنا تكون مرنة أكتر وتقدر تتعامل مع بيانات مختلفة كل مرة بنستدعيها فيها. هنا بتيجي فايدة "المعاملات" (Parameters). المعاملات دي عبارة عن متغيرات بنعرفها جوه القوسين `()` في تعريف الدالة. لما بنيجي نستدعي الدالة، بنمررلها قيم للمعاملات دي، والقيم دي بنسميها "وسائط" (Arguments).'},
      { type: 'code', language: 'python', text: 'def greet_person(name): # name هنا هو المعامل (parameter)\n    print(f"أهلاً يا {name}!")\n\ngreet_person("أحمد")    # "أحمد" هنا هو الوسيط (argument)\ngreet_person("سارة")    # "سارة" وسيط تاني\n\ndef add_numbers(x, y): # دالة بتاخد معاملين\n    result = x + y\n    print(f"مجموع {x} و {y} هو: {result}")\n\nadd_numbers(5, 3)       # 5 و 3 هما الوسائط\nadd_numbers(100, 200)' },
      { type: 'subheading', text: '4. القيم المُرجعة (Return Values):' },
      { type: 'paragraph', text: 'مش كل الدوال بتطبع حاجة على الشاشة بس. ساعات بنكون عايزين الدالة تعمل عملية حسابية معينة وترجعلنا الناتج عشان نستخدمه في مكان تاني في الكود. هنا بنستخدم الكلمة المفتاحية `return`.'},
      { type: 'paragraph', text: 'لما بايثون بيوصل لأمر `return` جوه دالة، الدالة بتخلص شغلها فوراً وبترجع القيمة اللي بعد `return` للمكان اللي تم استدعاء الدالة منه.'},
      { type: 'code', language: 'python', text: 'def multiply_numbers(a, b):\n    product = a * b\n    return product  # الدالة هترجع قيمة product\n\nresult1 = multiply_numbers(4, 5) # قيمة product (اللي هي 20) هتتخزن في result1\nprint(f"النتيجة الأولى: {result1}") # هيطبع 20\n\nresult2 = multiply_numbers(10, 2) + multiply_numbers(3, 3)\n# multiply_numbers(10,2) هترجع 20\n# multiply_numbers(3,3) هترجع 9\n# result2 هتبقى 20 + 9 = 29\nprint(f"النتيجة الثانية: {result2}") # هيطبع 29\n\ndef is_adult(age):\n    if age >= 18:\n        return True\n    else:\n        return False\n\nif is_adult(22):\n    print("الشخص ده بالغ.")\nelse:\n    print("الشخص ده قاصر.")' },
      { type: 'paragraph', text: 'لو الدالة موصلتش لأمر `return` (أو لو كان فيها `return` من غير قيمة بعدها)، هي بترجع قيمة خاصة اسمها `None` بشكل افتراضي.'},
      { type: 'subheading', text: '5. القيم الافتراضية للمعاملات (Default Parameter Values):' },
      { type: 'paragraph', text: 'ممكن ندي للمعاملات قيم افتراضية في تعريف الدالة. لو المستخدم مستدعاش الدالة ومررش قيمة للمعامل ده، بايثون هيستخدم القيمة الافتراضية.'},
      { type: 'code', language: 'python', text: 'def greet_with_message(name, message="أهلاً بك"): # message ليها قيمة افتراضية\n    print(f"{message}, يا {name}!")\n\ngreet_with_message("علي") # هيستخدم القيمة الافتراضية لـ message\n# الناتج: أهلاً بك, يا علي!\n\ngreet_with_message("فاطمة", "صباح الخير") # هنا مررنا قيمة لـ message\n# الناتج: صباح الخير, يا فاطمة!' },
      { type: 'subheading', text: '6. توثيق الدوال (Docstrings):' },
      { type: 'paragraph', text: 'من العادات الكويسة إنك تكتب "سلسلة توثيق" (Docstring) للدوال بتاعتك. دي عبارة عن نص متعدد الأسطر (بيتحط بين تلات علامات تنصيص مزدوجة `""" """` أو مفردة `\'\'\' \'\'\'`) بيكون أول حاجة بعد سطر تعريف الدالة. بيشرح الدالة دي بتعمل إيه، إيه المعاملات اللي بتاخدها، وإيه اللي بترجعه.'},
      { type: 'code', language: 'python', text: 'def calculate_area(length, width):\n    """\n    تحسب مساحة مستطيل.\n\n    Args:\n        length (float or int): طول المستطيل.\n        width (float or int): عرض المستطيل.\n\n    Returns:\n        float or int: مساحة المستطيل.\n    """\n    if length < 0 or width < 0:\n        return "الأبعاد لا يمكن أن تكون سالبة"\n    return length * width\n\n# ممكن تطبع الـ docstring بتاع أي دالة باستخدام help() أو .__doc__\nhelp(calculate_area)\nprint(calculate_area.__doc__)' },
      { type: 'subheading', text: 'نطاق المتغيرات (Variable Scope) - فكرة مبدئية:' },
      { type: 'paragraph', text: 'المتغيرات اللي بتتعرف جوه دالة (زي `product` في دالة `multiply_numbers`) بنسميها "متغيرات محلية" (Local Variables). دي بتكون مرئية ومعروفة جوه الدالة دي بس، ومش ممكن نستخدمها بره الدالة. المتغيرات اللي بتتعرف بره كل الدوال بنسميها "متغيرات عامة" (Global Variables) وممكن نستخدمها في أي مكان. (هنتكلم عن النطاق بالتفصيل أكتر بعدين).'},
      { type: 'paragraph', text: 'الدوال هي عصب البرمجة المنظمة. هتستخدمها في كل برامجك تقريباً. حاول تعمل دوال صغيرة بتعمل وظيفة واحدة محددة، ده هيخلي كودك أسهل في الفهم والصيانة!'}
    ],
    quiz: [
      { id: 'q_func_1', text: 'ما هي الكلمة المفتاحية المستخدمة لتعريف دالة في بايثون؟', options: ['function', 'def', 'define', 'fun'], correctAnswerIndex: 1, explanation: '`def` هي الكلمة المفتاحية لتعريف الدوال.' },
      { id: 'q_func_2', text: 'كيف يتم استدعاء دالة اسمها `my_function` لا تأخذ أي معاملات؟', options: ['call my_function', 'my_function()', 'my_function', 'execute my_function()'], correctAnswerIndex: 1, explanation: 'يتم استدعاء الدالة بكتابة اسمها متبوعًا بقوسين `()`.' },
      { id: 'q_func_3', text: 'ماذا تسمى القيم التي يتم تمريرها إلى الدالة عند استدعائها؟', options: ['معاملات (Parameters)', 'وسائط (Arguments)', 'نتائج (Results)', 'متغيرات داخلية (Internal Variables)'], correctAnswerIndex: 1, explanation: 'القيم الفعلية التي تمررها للدالة عند الاستدعاء تسمى وسائط (Arguments).' },
      { id: 'q_func_4', text: 'ما هي الكلمة المفتاحية المستخدمة لإرجاع قيمة من الدالة؟', options: ['give', 'send', 'return', 'output'], correctAnswerIndex: 2, explanation: '`return` تستخدم لإرجاع قيمة من الدالة.' },
      { id: 'q_func_5', text: 'إذا لم تحتوِ الدالة على جملة `return` صريحة، ماذا تُرجع بشكل افتراضي؟', options: ['0', 'True', 'False', 'None'], correctAnswerIndex: 3, explanation: 'الدوال التي لا تحتوي على `return` أو تحتوي على `return` بدون قيمة، ترجع `None`.' },
      { id: 'q_func_6', text: 'في تعريف الدالة `def greet(name="Guest"):`، ماذا يمثل `"Guest"`؟', options: ['وسيط إجباري', 'قيمة افتراضية للمعامل name', 'نوع بيانات المعامل name', 'اسم آخر للدالة'], correctAnswerIndex: 1, explanation: '`"Guest"` هي القيمة الافتراضية التي سيتم استخدامها للمعامل `name` إذا لم يتم تمرير وسيط له عند استدعاء الدالة.' },
      { id: 'q_func_7', text: 'ما هو الـ Docstring في سياق الدوال؟', options: ['سلسلة نصية تستخدم لتوثيق وشرح عمل الدالة', 'نوع خاص من الأخطاء في الدوال', 'اسم بديل للدالة', 'متغير يتم إرجاعه تلقائيًا'], correctAnswerIndex: 0, explanation: 'الـ Docstring هو نص يوضع في بداية الدالة لشرح وظيفتها ومعاملاتها وما ترجعه.' },
      { id: 'q_func_8', text: 'إذا تم تعريف متغير داخل دالة، هل يمكن الوصول إليه من خارج هذه الدالة مباشرة؟', options: ['نعم، دائمًا', 'لا، المتغيرات المعرفة داخل الدوال تكون محلية (local) بشكل افتراضي', 'فقط إذا كان المتغير رقميًا', 'فقط إذا كانت الدالة ترجع هذا المتغير'], correctAnswerIndex: 1, explanation: 'المتغيرات المعرفة داخل الدالة لها نطاق محلي، أي لا يمكن الوصول إليها مباشرة من خارج الدالة.' },
      { id: 'q_func_9', text: 'ماذا سيطبع الكود التالي؟ `def test(): print("A"); return "B"; print("C")\nresult = test()\nprint(result)`', options: ['A B C B', 'A B', 'A C B', 'A'], correctAnswerIndex: 1, explanation: 'الدالة `test` ستطبع "A"، ثم عند `return "B"` ستتوقف وتعيد "B". `print("C")` لن يتم تنفيذها. `result` ستكون "B"، ثم يتم طباعة `result`.' },
      { id: 'q_func_10', text: 'ما الفائدة الرئيسية من استخدام الدوال في البرمجة؟', options: ['جعل الكود أطول وأكثر تعقيدًا', 'تنظيم الكود، تقليل التكرار، وجعله قابل لإعادة الاستخدام', 'زيادة سرعة تنفيذ البرنامج بشكل كبير دائمًا', 'تشفير الكود لمنع سرقته'], correctAnswerIndex: 1, explanation: 'الدوال تساعد على تنظيم الكود، تجنب تكرار نفس الأوامر، وتسهيل صيانة وتحديث البرنامج.' }
    ]
  }
];
